{"componentChunkName":"component---src-templates-blog-post-js","path":"/Javascript/modern-javascript-tutorials/","result":{"data":{"site":{"siteMetadata":{"title":"MUSTNOT","author":"[mustnot]","siteUrl":"https://mustnot.github.io","comment":{"disqusShortName":"","utterances":"mustnot/mustnot.github.io"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"487b6477-06ce-5784-9738-1438ccb299ee","excerpt":"프론트엔드 분과 간혹 버그와 같은 문제를 발견할 때 조금이나마 이해하기 위해서 모던 Javascript 튜토리얼을 통해 공부한 내용입니다. 자바스크립트 기본 자바스크립트는 자바(Java)와 매우 다른 언어로 볼 수 있다. 자바스크립트(javascript)는 ‘웹 페이지에 생동감을 불어넣기 위해’ 만들어진 프로그래밍 언어로 자바스크립트로 작성한 프로그램을 스크립트라고 부른다. 스크립트는 웹페이지의 HTML…","html":"<blockquote>\n<p>프론트엔드 분과 간혹 버그와 같은 문제를 발견할 때 조금이나마 이해하기 위해서 모던 Javascript 튜토리얼을 통해 공부한 내용입니다.</p>\n</blockquote>\n<h2 id=\"자바스크립트-기본\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EA%B8%B0%EB%B3%B8\" aria-label=\"자바스크립트 기본 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자바스크립트 기본</h2>\n<blockquote>\n<p>자바스크립트는 자바(Java)와 매우 다른 언어로 볼 수 있다.</p>\n</blockquote>\n<p>자바스크립트(javascript)는 ‘웹 페이지에 생동감을 불어넣기 위해’ 만들어진 프로그래밍 언어로 자바스크립트로 작성한 프로그램을 스크립트라고 부른다. 스크립트는 웹페이지의 HTML 안에 작성할 수 있는데, 웹페이지를 불러올 때 스크립트가 자동으로 실행된다. 특별한 준비나 컴파일 없이 보통의 문자 형태로 작성할 수도 있고 실행도 할 수 있다.</p>\n<p>자바스크립트는 브라우저뿐만 아니라 서버에서도 실행할 뿐더러 자바스크립트 엔진(Javascript Engine)이라 불리는 특별한 프로그램이 들어 있는 모든 디바이스에서도 동작한다. 브라우저에는 ‘자바스크립트 가상 머신’이라 불리는 엔진이 내장되어 있는데, 엔진마다 특유의 코드 네임이 있다.</p>\n<ul>\n<li>V8 - Chrome &#x26; Opera</li>\n<li>SpiderMonkey - Firefox</li>\n<li>Trident or Trident - IE</li>\n<li>ChakraCore - Microsoft edge</li>\n<li>SquirrelFish - Safari</li>\n</ul>\n<p>위 코드네임은 개발 관련 글에서 종종 언급되기 때문에 기억해두자</p>\n<p>ㅤ</p>\n<h3 id=\"엔진의-동작-원리\" style=\"position:relative;\"><a href=\"#%EC%97%94%EC%A7%84%EC%9D%98-%EB%8F%99%EC%9E%91-%EC%9B%90%EB%A6%AC\" aria-label=\"엔진의 동작 원리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>엔진의 동작 원리</h3>\n<ol>\n<li>파싱 - 엔진(브라우저라면 내장 엔진)이 스크립트를 읽습니다.</li>\n<li>컴파일 - 읽어 들인 스크립트를 기계어로 전환한다.</li>\n<li>실행 - 기계어로 전환된 코드가 실행된다.</li>\n</ol>\n<p>엔진은 프로세스 각 단계마다 최적화를 진행하여 코드의 진행 방향을 분석한 결과를 토대로 다시 최적화하기도 하는데 이 과정을 거치면서 스크립트의 실행 속도는 점차 빨라진다.</p>\n<p>ㅤ</p>\n<h3 id=\"브라우저에서-할-수-있는-일\" style=\"position:relative;\"><a href=\"#%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EC%97%90%EC%84%9C-%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8A%94-%EC%9D%BC\" aria-label=\"브라우저에서 할 수 있는 일 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>브라우저에서 할 수 있는 일</h3>\n<blockquote>\n<p>브라우저라는 특성을 이해하는 것이 중요해보인다.</p>\n</blockquote>\n<p>모던 자바스크립트는 “안전한” 프로그래밍 언어로 메모리나 CPU 같은 저수준 영역의 조작을 허용하지 않는다. 애초에 이러한 접근을 필요로 하지 않는 브라우저를 대상으로 만든 언어이기 때문이다.</p>\n<p>브라우저에서 자바스크립트로 할 수 있는 일은 다음과 같다.</p>\n<ul>\n<li>페이지에 새로운 HTML을 추가하거나 기존 HTML 혹은 스타일 수정하기</li>\n<li>마우스 클릭이나 포인터의 움직임, 키보드 키 눌림 등과 같은 사용자 행동에 반응하기</li>\n<li>네트워크를 통해 원격 서버에 요청을 보내거나, 파일 다운로드, 업로드하기 (Ajax or Comet 같은 기술 사용)</li>\n<li>쿠키를 가져오거나 설정하기. 사용자에게 질문을 건네거나 메시지 보여주기</li>\n<li>클라이언트 측에 데이터 저장하기 (로컬 스토리지)</li>\n</ul>\n<p>ㅤ</p>\n<h3 id=\"브라우저에서-할-수-없는-일\" style=\"position:relative;\"><a href=\"#%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EC%97%90%EC%84%9C-%ED%95%A0-%EC%88%98-%EC%97%86%EB%8A%94-%EC%9D%BC\" aria-label=\"브라우저에서 할 수 없는 일 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>브라우저에서 할 수 없는 일</h3>\n<p>브라우저는 보안을 위해 자바스크립트의 기능에 제약을 두었다. (이 부분은 굉장히 중요한 것 같다. 보안적인 요소를 생각하면 보다 쉽게 이해할 수 있을거라고 생각했다 !!) 이런 제약은 악성 웹페이지가 클라이언트 즉 사용자의 개인 정보에 접근하거나 사용자의 데이터를 손상하는 것을 막기 위해 만들어졌다.</p>\n<p>제약 사항</p>\n<ul>\n<li>\n<p>웹페이지 내 스크립트는 디스크에 저장된 임의의 파일을 읽거나 쓰고 복사하거나 실행할 때 제약을 받을 수 있다. 운영체제가 지원하는 기능을 브라우저가 직접 쓰지 못하게 막혀 있기 때문이다.</p>\n<ul>\n<li>모던 브라우저를 사용하면 파일을 다룰 수는 있으나 접근이 제한되어 있다. 사용자가 브라우저 창에 파일을 끌어다 두거나 <code class=\"language-text\">&lt;input&gt;</code> 태그를 통해 파일을 선택할 때와 같은 상황에서만 파일 접근이 허용된다.</li>\n</ul>\n</li>\n<li>\n<p>브라우저 내 탭과 창은 서로의 정보를 알 수 없다. 하지만 자바스크립트를 사용해 한 창에서 다른 창을 열 때는 예외가 적용된다. 하지만 이 경우에도 도메인이나 프로토콜, 포트가 다르다면 페이지에 접근할 수가 없다.</p>\n<ul>\n<li>이런 제약사항을 “동일 출처 정책 (Same Origin Policy)“라 부른다. 이 정책을 피하려면 두 페이지는 데이터 교환에 동의해야 하고 동의와 관련된 특수한 자바스크립트 코드를 포함하고 있어야 한다.</li>\n</ul>\n</li>\n<li>자바스크립트 이용하면 페이지를 생성한 서버와 쉽게 정보를 주고 받을 수 있다. 하지만 타 사이트나 도메인에서 데이터를 받아오는 것은 불가능하고 가능하더라도 원격 서버에서 명확히 승인을 해줘야 한다. (HTTP Header 등을 이용한 방법)</li>\n</ul>\n<p>ㅤ</p>\n<h3 id=\"자바-스크립트만의-강점\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%B0%94-%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EB%A7%8C%EC%9D%98-%EA%B0%95%EC%A0%90\" aria-label=\"자바 스크립트만의 강점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자바 스크립트만의 강점</h3>\n<ul>\n<li>HTML / CSS와 완전히 통합할 수 있음</li>\n<li>간단한 일은 간단하게 처리할 수 있게 해줌</li>\n<li>모든 주요 브라우저에서 지원하고 기본 언어로 사용됨</li>\n</ul>\n<p>ㅤ</p>\n<h3 id=\"자바스크립트-너머의-언어들\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EB%84%88%EB%A8%B8%EC%9D%98-%EC%96%B8%EC%96%B4%EB%93%A4\" aria-label=\"자바스크립트 너머의 언어들 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자바스크립트 ‘너머의’ 언어들</h3>\n<blockquote>\n<p>“너머”라길래 전혀 다른 언어를 말하는 줄 알았다.</p>\n</blockquote>\n<p>자바스크립트 문법은 사람마다 각기 다른 기능을 원하기 때문에 모든 사람의 요구 사항을 충족시키지 못했는데, 당연한 이야기지만 프로젝트마다 요구 사항이 천차만별이기 때문이다. 이로 인해 브라우저에서 실행 되기 전 자바스크립트로 트랜스파일(transpile, 변환) 할 수 있는 새로운 언어들이 많이 등장했다.</p>\n<ul>\n<li>CoffeScript : 자바스크립트를 위한 <code class=\"language-text\">syntactic sugar</code> 다. 짧은 문법을 도입하여 명료하고 이해하기 쉬운 코드를 작성할 수 있어 Ruby 개발자들이 선호한다.</li>\n<li>TypeScript : 개발을 단순화하고 복잡한 시스템을 지원하려는 목적으로 “자료형의 명시화 (strict data typing)“에 집중해 만든 언어로 Microsoft에서 개발하였다.</li>\n<li>Flow : TypeScript와 같이 자료형을 강제하나 다른 방식을 사용하고 Facebook이 개발하였다.</li>\n<li>Dart : 모바일 앱과 같이 브라우저가 아닌 환경에서 동작하는 고유의 엔진을 가진 독자적인 언어, Google에서 개발</li>\n</ul>\n<p>ㅤ</p>\n<p>ㅤ</p>\n<h2 id=\"hello-world\" style=\"position:relative;\"><a href=\"#hello-world\" aria-label=\"hello world permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Hello, World!</h2>\n<p>진행 중인 튜토리얼은 온라인으로 제공되기 때문에 실행환경을 브라우저로 한정하며 <code class=\"language-text\">Node.js</code>와 같이 브라우저 이외에 환경에 주력하는 학습자를 위해, 브라우저 한정 명령어 (alert 등)는 최소한으로 사용하여 안내한다.</p>\n<p>ㅤ</p>\n<h3 id=\"code-classlanguage-textscriptcode-태그\" style=\"position:relative;\"><a href=\"#code-classlanguage-textscriptcode-%ED%83%9C%EA%B7%B8\" aria-label=\"code classlanguage textscriptcode 태그 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">script</code> 태그</h3>\n<p><code class=\"language-text\">&lt;script&gt;</code> 태그를 이용하면 자바스크립트 프로그램을 HTML 문서 어느 곳에나 삽입할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>스크립트 전<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n      <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello, world!'</span><span class=\"token punctuation\">)</span>\n    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>스크립트 후<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>ㅤ</p>\n<h3 id=\"모던-마크업\" style=\"position:relative;\"><a href=\"#%EB%AA%A8%EB%8D%98-%EB%A7%88%ED%81%AC%EC%97%85\" aria-label=\"모던 마크업 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>모던 마크업</h3>\n<p><code class=\"language-text\">&lt;script&gt;</code> 태그엔 몇 가지 속성(attribute)이 있다. 요즘에는 잘 사용하지 않지만 오래된 코드에서 종종 볼 수 있다.</p>\n<ul>\n<li>\n<p>type 속성 : <code class=\"language-text\">&lt;script type=...&gt;</code></p>\n<ul>\n<li>HTML4 에서는 스크립트에 <code class=\"language-text\">type</code>을 명시하는 것이 필수였다. 따라서 <code class=\"language-text\">type=&quot;text/javascript&quot;</code> 속성이 붙은 스크립트를 어렵지 않게 찾을 수 있는데, 이제는 타입 명시가 필수가 아니다. 모던 HTML 표준에선 이 속성의 의미가 바뀌었는데, 이 속성은 자바스크립트 모듈에 사용할 수 있지만 다음에 배운다.</li>\n</ul>\n</li>\n<li>\n<p>language 속성 : <code class=\"language-text\">&lt;script language=...&gt;</code></p>\n<ul>\n<li>현재 사용하고 있는 스크립트 언어를 나타내지만, 지금은 자바스크립트가 기본 언어이기 때문에 더는 사용할 필요가 없다.</li>\n</ul>\n</li>\n<li>\n<p>스크립트 전후에 위치한 주석</p>\n<ul>\n<li>아주 오래된 책과 가이드에서는 다음과 같이 <code class=\"language-text\">&lt;script&gt;</code> 태그 안에 주석이 존재하는 것을 볼 수 있다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>\n      <span class=\"token operator\">...</span>\n      <span class=\"token comment\">//--></span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n</li>\n</ul>\n<p>ㅤ</p>\n<h3 id=\"외부-스크립트\" style=\"position:relative;\"><a href=\"#%EC%99%B8%EB%B6%80-%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8\" aria-label=\"외부 스크립트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>외부 스크립트</h3>\n<p>자바스크립트 코드의 양이 많은 경우에는 파일로 소분하여 저장할 수 있는데, 이렇게 분해해 놓은 각 파일은 <code class=\"language-text\">src</code> 속성을 사용하여 HTML에 삽입합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">&lt;script src=\"/path/to/script.js><span class=\"token script\"><span class=\"token language-javascript\">\"</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><code class=\"language-text\">src</code>의 경로는 <u>절대경로</u>를 나타내기도 하고 <u>상대경로</u>를 사용하는 것도 가능하다. 또는 URL 전체를 속성으로 사용할 수도 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://cdnjs.cloudflare.com/ajax/lib/lodash.js/3.2.0/lodash.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<blockquote>\n<p>🚨 script에 src 속성이 있으면 태그 내부의 코드는 무시된다.</p>\n</blockquote>\n<p>ㅤ</p>\n<h3 id=\"과제\" style=\"position:relative;\"><a href=\"#%EA%B3%BC%EC%A0%9C\" aria-label=\"과제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>과제</h3>\n<h4 id=\"alert-창-띄우기\" style=\"position:relative;\"><a href=\"#alert-%EC%B0%BD-%EB%9D%84%EC%9A%B0%EA%B8%B0\" aria-label=\"alert 창 띄우기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>alert 창 띄우기</h4>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"># alert.html\n<span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n      <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'자바스크립트!'</span><span class=\"token punctuation\">)</span>\n    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>ㅤ</p>\n<h4 id=\"외부-스크립트를-이용해-alert-창-띄우기\" style=\"position:relative;\"><a href=\"#%EC%99%B8%EB%B6%80-%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%B4-alert-%EC%B0%BD-%EB%9D%84%EC%9A%B0%EA%B8%B0\" aria-label=\"외부 스크립트를 이용해 alert 창 띄우기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>외부 스크립트를 이용해 alert 창 띄우기</h4>\n<blockquote>\n<p>한글이 깨져서 당황했다. encoding 문제인 것 같아 charset을 추가했다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// alert.js</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'자바스크립트!'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token comment\">&lt;!-- alert.html --></span>\n<span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>alert.js<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>utf-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>ㅤ</p>\n<p>ㅤ</p>\n<h2 id=\"코드-구조\" style=\"position:relative;\"><a href=\"#%EC%BD%94%EB%93%9C-%EA%B5%AC%EC%A1%B0\" aria-label=\"코드 구조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코드 구조</h2>\n<p>코드 블록을 만드는 방법을 설명한다.</p>\n<p>ㅤ</p>\n<h3 id=\"문-statement\" style=\"position:relative;\"><a href=\"#%EB%AC%B8-statement\" aria-label=\"문 statement permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문 (statement)</h3>\n<p>statement는 어떤 작업을 수행하는 문법 구조(syntax structure)와 명령어(command)를 의미합니다. 코드에는 원하는 만큼의 문을 작성할 수 있는데, 이 때 서로 다른 문은 세미콜론(;)으로 구분한다. 그리고 코드의 가독성을 높이기 위해 각 문은 서로 다른 줄에 작성하는 것이 일반적이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"script\"><pre class=\"language-script\"><code class=\"language-script\">alert(&#39;hello_1&#39;);\nalert(&#39;hello_2&#39;);</code></pre></div>\n<p>ㅤ</p>\n<h3 id=\"세미콜론-\" style=\"position:relative;\"><a href=\"#%EC%84%B8%EB%AF%B8%EC%BD%9C%EB%A1%A0-\" aria-label=\"세미콜론  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>세미콜론 (;)</h3>\n<p>줄바꿈이 있다면 세미콜론(;)을 생략할 수 있어, 위 코드에서 <code class=\"language-text\">;</code>을 제거하더도 에러 없이 동작한다. 그 이유는 자바스크립트는 암시적으로 줄바꿈을 세미콜론으로 해석하는데, 이런 동작 방식을 “세미콜론 자동 삽입”이라 부른다. 대부분의 경우, 줄바꿈은 세미콜론을 의미하나 “대부분의 경우”이지 “항상”을 의미하진 않는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>이 같은 경우에는 줄바꿈을 세미콜론으로 이해하면 안된다. 반면, 세미콜론이 정말로 필요하지만 자바스크립트가 이를 추정하지 “못하는” 상황도 존재한다.</p>\n<p>ㅤ</p>\n<h3 id=\"주석\" style=\"position:relative;\"><a href=\"#%EC%A3%BC%EC%84%9D\" aria-label=\"주석 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>주석</h3>\n<p><strong>1줄 주석</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 이 주석은 한 줄 주석</span></code></pre></div>\n<p><strong>여러줄 주석</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/* 두 줄 이상 주석 예제\n이것은 주석입니다.\n*/</span></code></pre></div>\n<p>ㅤ</p>\n<h3 id=\"엄격-모드\" style=\"position:relative;\"><a href=\"#%EC%97%84%EA%B2%A9-%EB%AA%A8%EB%93%9C\" aria-label=\"엄격 모드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>엄격 모드</h3>\n<p>자바스크립트는 꽤 오랫동안 호환성 이슈 없이 발전해왔으며 기존의 기능을 변경하지 않으면서 새로운 기능들이 추가되었다. 덕분에 기존에 작성한 코드는 절대 망가지지 않는다는 장점이 있었다. 하지만 자바스크립트 창시자들이 했던 실수나 불완전한 결정이 언어 안에 영원히 박제된다는 단점이 있다.</p>\n<p>이런 상황은 ECMAScript5(ES5)가 등장하기 전인 2009년까지 지속되었고, 새롭게 제정된 ES5에서는 새로운 기능이 추가되고 기존 기능 중 일부가 변경되었다. 기존 기능을 변경하였기 때문에 하위 호환성 문제는 여지 없이 발생했고 그래서 변경사항 대부분은 ES5의 기본 모드에선 활성화되지 않도록 설계되었다. 대신 <code class=\"language-text\">use strict</code>라는 특별 지시자를 사용해 엄격 모드(strict mode)를 활성화 했을 때만 이 변경사항이 활성화되게 해놓았다.</p>\n<p>ㅤ</p>\n<h4 id=\"use-strict\" style=\"position:relative;\"><a href=\"#use-strict\" aria-label=\"use strict permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Use Strict</h4>\n<p>지시자 <code class=\"language-text\">&quot;use strict&quot;</code> 혹은 <code class=\"language-text\">&#39;use stric&#39;</code>은 단순한 문자열처럼 생겼지만. 이 지시자가 스크립트 최상단에 오면 스크립트 전체가 “모던한” 방식으로 동작된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token string\">'use strict'</span></code></pre></div>\n<p>명령어를 그룹화하는 방식인 함수에 대해선 곧 학습할 예정으로 함수에 대해 학습하기 전 “use strict”는 스크립트 최상단이 아닌 함수 본문 맨 앞에 올 수 있다는 점을 기억하자. 이렇게 하면 오직 해당 함수만 엄격 모드로 실행된다.</p>\n<blockquote>\n<p>⚠️ use strict를 취소할 방법은 없다.</p>\n</blockquote>\n<p>ㅤ</p>\n<h4 id=\"use-strict를-꼭-사용해야-하는가\" style=\"position:relative;\"><a href=\"#use-strict%EB%A5%BC-%EA%BC%AD-%EC%82%AC%EC%9A%A9%ED%95%B4%EC%95%BC-%ED%95%98%EB%8A%94%EA%B0%80\" aria-label=\"use strict를 꼭 사용해야 하는가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>‘use strict’를 꼭 사용해야 하는가?</h4>\n<p>모던 자바스크립트는 ‘클래스’와 ‘모듈’이라 불리는 진일보한 구조를 제공하는데, 이 둘을 사용하면 use strict가 자동으로 적요요된다. 따라서 이 둘을 사용하고 있다면 스크립트에 “use strict”를 붙일 필요가 없다. 하지만 사용하지 않는다면, “use strict”를 항상 사용하도록 한다.</p>\n<p>ㅤ</p>\n<h2 id=\"alert-prompt-confirm-을-이용한-상호작용\" style=\"position:relative;\"><a href=\"#alert-prompt-confirm-%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EC%83%81%ED%98%B8%EC%9E%91%EC%9A%A9\" aria-label=\"alert prompt confirm 을 이용한 상호작용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>alert, prompt, confirm 을 이용한 상호작용</h2>\n<p>브라우저 환경에서 사용되는 최소한의 사용자 인터페이스 기능인 <code class=\"language-text\">alert</code>, <code class=\"language-text\">prompt</code>, <code class=\"language-text\">confirm</code>에 대해 알아본다.</p>\n<p>ㅤ</p>\n<h4 id=\"alert\" style=\"position:relative;\"><a href=\"#alert\" aria-label=\"alert permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>alert</h4>\n<p>이 함수가 실행되면 사용자가 ‘확인(OK)’ 버튼을 누를 때까지 메세지를 보여주는 창이 계속 떠있게 된다.</p>\n<p>ㅤ</p>\n<h4 id=\"prompt\" style=\"position:relative;\"><a href=\"#prompt\" aria-label=\"prompt permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>prompt</h4>\n<p>브라우저에서 제공하는 <code class=\"language-text\">prompt</code> 함수는 두 개의 인수를 받는다. 실행되면 텍스트 메시지와 입력 필드(input field), 확인(OK) 및 취소(Cancle) 버튼이 있는 모달 창을 띄워준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">result <span class=\"token operator\">=</span> <span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">title</code> : 사용자에게 보여줄 문자열</li>\n<li><code class=\"language-text\">default</code> : 입력 필드의 초기값 (선택값)</li>\n</ul>\n<blockquote>\n<p>ℹ️ 인수를 감싸는 대괄호 <code class=\"language-text\">[...]</code> 의 의미</p>\n<p>매개변수가 필수가 아닌 선택값이라는 것을 의미한다.</p>\n</blockquote>\n<p>사용자는 프롬프트 대화상자의 입력 필드에 원하는 값을 입력하고 확인을 누를 수 있고, 값을 입력하길 원치 않는 경우 취소나 <code class=\"language-text\">Esc</code> 를 통해 빠져나갈 수 있습니다.</p>\n<p><code class=\"language-text\">prompt</code> 함수는 사용자가 입력 필드에 기재한 문자열을 반환하고 사용자가 입력을 취소한 경우 <code class=\"language-text\">null</code>이 반환된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> age <span class=\"token operator\">=</span> <span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'나이를 입력하시오.'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">당신의 나이는 </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>age<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">살 입니다.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 당신의 나이는 100살 입니다.</span></code></pre></div>\n<p>ㅤ</p>\n<h4 id=\"confirm\" style=\"position:relative;\"><a href=\"#confirm\" aria-label=\"confirm permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>confirm</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">result <span class=\"token operator\">=</span> <span class=\"token function\">confirm</span><span class=\"token punctuation\">(</span>question<span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">confirm</code> 함수는 매개변수로 받은 <code class=\"language-text\">question</code>과 확인 및 취소 버튼이 있는 모달 창을 보여준다.</p>\n<p>사용자가 확인을 누르면 <code class=\"language-text\">true</code>, 그 외에는 <code class=\"language-text\">false</code>를 반환한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> isAdmin <span class=\"token operator\">=</span> <span class=\"token function\">confirm</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Are you Admin?'</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>isAdmin<span class=\"token punctuation\">)</span></code></pre></div>\n<p>ㅤ</p>\n<h3 id=\"과제-1\" style=\"position:relative;\"><a href=\"#%EA%B3%BC%EC%A0%9C-1\" aria-label=\"과제 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>과제</h3>\n<h4 id=\"간단한-페이지-만들기\" style=\"position:relative;\"><a href=\"#%EA%B0%84%EB%8B%A8%ED%95%9C-%ED%8E%98%EC%9D%B4%EC%A7%80-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-label=\"간단한 페이지 만들기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>간단한 페이지 만들기</h4>\n<p>사용자에게 이름을 물어보고, 입력받은 이름을 그대로 출력해주는 페이지를 만들어 보세요.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// getname.js</span>\n<span class=\"token string\">'use strict'</span>\n\n<span class=\"token keyword\">let</span> name\nname <span class=\"token operator\">=</span> <span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'What is your name?'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>getname.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h2 id=\"변수와-상수\" style=\"position:relative;\"><a href=\"#%EB%B3%80%EC%88%98%EC%99%80-%EC%83%81%EC%88%98\" aria-label=\"변수와 상수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>변수와 상수</h2>\n<p>대다수 자바스크립트 어플리케이션은 사용자나 서버로부터 입력받은 정보를 처리하는 방식으로 동작한다.</p>\n<ul>\n<li>온라인 쇼핑몰 - 판매 중인 상품 혹은 장바구니 등의 정보</li>\n<li>채팅 어플리케이션 - 사용자 정보, 메시지 등의 정보</li>\n</ul>\n<p>변수는 이러한 정보를 저장하는 용도로 사용한다.</p>\n<p>ㅤ</p>\n<h3 id=\"변수-variable\" style=\"position:relative;\"><a href=\"#%EB%B3%80%EC%88%98-variable\" aria-label=\"변수 variable permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>변수 (variable)</h3>\n<p>자바스크립트에서는 <code class=\"language-text\">let</code> 키워드를 사용해 변수를 생성합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> message\nmessage <span class=\"token operator\">=</span> <span class=\"token string\">'hello'</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span></code></pre></div>\n<p>ㅤ</p>\n<p>한 줄에 여러 개의 변수를 설정할 수 있으나, 되도록이면 가독성을 위해 여러 줄로 분리한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token string\">'John'</span><span class=\"token punctuation\">,</span>\n  age <span class=\"token operator\">=</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span>\n  message <span class=\"token operator\">=</span> <span class=\"token string\">'hello'</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token string\">'John'</span>\n<span class=\"token keyword\">let</span> age <span class=\"token operator\">=</span> <span class=\"token number\">25</span>\n<span class=\"token keyword\">let</span> message <span class=\"token operator\">=</span> <span class=\"token string\">'hello'</span></code></pre></div>\n<blockquote>\n<p>ℹ️ let 대신 var</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> message <span class=\"token operator\">=</span> <span class=\"token string\">'hello'</span></code></pre></div>\n<p>와 같이 <code class=\"language-text\">var</code>를 이용한 방법도 있으나, 오래된 방식으로 거의 동일한 <code class=\"language-text\">let</code>을 사용하자</p>\n</blockquote>\n<p>ㅤ</p>\n<h3 id=\"변수-명명-규칙\" style=\"position:relative;\"><a href=\"#%EB%B3%80%EC%88%98-%EB%AA%85%EB%AA%85-%EA%B7%9C%EC%B9%99\" aria-label=\"변수 명명 규칙 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>변수 명명 규칙</h3>\n<p>자바스크립트에서 변수 명명 시에는 두 가지 제약 사항이 있다.</p>\n<ol>\n<li>변수명에는 오직 문자와 숫자, 그리고 기호 $ 와 _ 만 들어갈 수 있다.</li>\n<li>첫 글자는 숫자가 될 수 없다.</li>\n</ol>\n<p>여러 단어를 조합해서 변수명을 만들 때에는 <a href=\"https://en.wikipedia.org/wiki/CamelCase\">카멜 표기법(camelCase)</a>가 흔히 사용되는데, 카멜 표기법은 단어를 차례대로 나열하면서 첫 단어를 제외한 각 단어의 첫 글자를 대문자로 작성한다. <code class=\"language-text\">myVeryLongName</code>과 같이 말이다.</p>\n<blockquote>\n<p>⚠️ use strict 없이 변수 할당하기</p>\n<p>변수는 대게 정의되어 있어야 사용할 수 있으나 예전에는 <code class=\"language-text\">let</code> 없이도 단순하게 값을 할당해 변수를 생성하는 것이 가능했기 때문인데, 이 때 앞서 배운 <code class=\"language-text\">&quot;use strict&quot;</code> 를 쓰지 않으면 과거 스크립트와의 호환성을 유지할 수 있기 때문에 이 방식을 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">num <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span></code></pre></div>\n<p>하지만 이렇게 변수를 생성하는 것은 나쁜 관습으로 엄격 모드에서는 에러를 발생시킨다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token string\">'user strict'</span>\nnum <span class=\"token operator\">=</span> <span class=\"token number\">5</span></code></pre></div>\n</blockquote>\n<p>ㅤ</p>\n<h3 id=\"상수-constant\" style=\"position:relative;\"><a href=\"#%EC%83%81%EC%88%98-constant\" aria-label=\"상수 constant permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>상수 (constant)</h3>\n<p>변화하지 않는 변수를 선언할 때에는 <code class=\"language-text\">let</code> 대신에 <code class=\"language-text\">const</code>를 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> myBirthday <span class=\"token operator\">=</span> <span class=\"token string\">'2020.01.01'</span></code></pre></div>\n<p>이렇듯 생일과 같이 변화하지 않는 변수를 선언할 때에는 <code class=\"language-text\">const</code>를 사용하며 상수라고 부른다. 상수는 재할당을 할 수 없으므로 상수를 변경하려 하면 에러가 발생한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> myBirthday <span class=\"token operator\">=</span> <span class=\"token string\">'2020.01.01'</span>\nmyBirthday <span class=\"token operator\">=</span> <span class=\"token string\">'2020.01.02'</span></code></pre></div>\n<p>ㅤ</p>\n<h3 id=\"대문자-상수\" style=\"position:relative;\"><a href=\"#%EB%8C%80%EB%AC%B8%EC%9E%90-%EC%83%81%EC%88%98\" aria-label=\"대문자 상수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>대문자 상수</h3>\n<p>기억하기 힘든 값을 변수에 할당하여 별칭으로 사용하는 것은 널리 사용되는 관습이다. 이러한 상수는 대문자와 밑줄로 구성된 이름으로 명명한다. 글로벌 변수와 동일하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token constant\">COLOR_RED</span> <span class=\"token operator\">=</span> <span class=\"token string\">'#F00'</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">COLOR_GREEN</span> <span class=\"token operator\">=</span> <span class=\"token string\">'#0F0'</span>\n<span class=\"token comment\">// 색상을 고를 때에는 `let`을 사용하여 할당</span>\n<span class=\"token keyword\">let</span> color <span class=\"token operator\">=</span> <span class=\"token constant\">COLOR_ORANGE</span></code></pre></div>\n<p>ㅤ</p>\n<h3 id=\"바람직한-변수명\" style=\"position:relative;\"><a href=\"#%EB%B0%94%EB%9E%8C%EC%A7%81%ED%95%9C-%EB%B3%80%EC%88%98%EB%AA%85\" aria-label=\"바람직한 변수명 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>바람직한 변수명</h3>\n<p>변수명은 간결하고, 명확해야한다. 다른 개발자가 보더라도 변수명을 보고 이것이 무엇을 의미하는지 잘 설명할 수 있어야한다. 변수의 이름을 짓는 것은 개발에서 가장 중요하고 복잡한 기술 중 하나이다. 실제 프로젝트에서 처음부터 완전히 독립적인 코드를 개발하기 보다는 기존 코드의 틀을 변경하고 확장하면서 대부분의 시간을 할당하는데, 작성했던 코드를 얼마 후에 다시 봤을 때, 정보에 알맞은 이름이 적혀 있으면 정보를 더 쉽게 찾을 수 있다.</p>\n<p><strong>좋은 명명 규칙</strong></p>\n<ul>\n<li><code class=\"language-text\">userName</code> 이나 <code class=\"language-text\">shoppingCart</code> 와 같이 사람이 읽을 수 있는 이름을 사용</li>\n<li>무엇을 하고 있는지 명확히 알고 있지 않을 경우에는 줄임말이나 <code class=\"language-text\">a, b, c</code> 와 같은 짧은 단어는 피한다.</li>\n<li>최대한 서술적이고 간결하게 명명한다. 대표적인 예로 <code class=\"language-text\">data</code>와 <code class=\"language-text\">value</code>이다. 코드 문맥상 변수가 가리키는 데이터나 값이 아주 명확할 때에만 이러한 이름을 사용한다.</li>\n<li>자신만의 규칙 혹은 소속된 팀의 규칙을 따르자.</li>\n</ul>\n<blockquote>\n<p>ℹ️ 변수는 재사용하는 것이 좋을까 새로 만드는 것이 좋을까?</p>\n<p>개발자 중 새로운 변수를 선언하기보다 기존 변수를 재사용 하는 것을 선호하는 사람들이 있는데, 재사용된 변수는 과거에 붙여진 스티커를 떼지 않은 채 물건만 바뀐 상자와 같다. (만약 독립된 제품일 경우에는 가능할까?) 변수를 재사용하면 변수 선언에 쏟는 노력을 덜 순 있어도 디버깅에 열 배 더 많은 시간을 쏟아야한다. 예시로 <code class=\"language-text\">data</code>라는 변수명을 쓰이는 곳이 이곳 저곳 다양하다면, 관련된 변수명을 수정하거나 어떤 값에서 에러가 났는지 정확히 판단하기 어려움이 있다.</p>\n</blockquote>\n<p>ㅤ</p>\n<h3 id=\"과제-2\" style=\"position:relative;\"><a href=\"#%EA%B3%BC%EC%A0%9C-2\" aria-label=\"과제 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>과제</h3>\n<h4 id=\"1-변수-가지고-놀기\" style=\"position:relative;\"><a href=\"#1-%EB%B3%80%EC%88%98-%EA%B0%80%EC%A7%80%EA%B3%A0-%EB%86%80%EA%B8%B0\" aria-label=\"1 변수 가지고 놀기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 변수 가지고 놀기</h4>\n<ol>\n<li><code class=\"language-text\">admin</code>과 <code class=\"language-text\">name</code>이라는 변수 선언</li>\n<li><code class=\"language-text\">name</code>에 값으로 <code class=\"language-text\">John</code>을 할당</li>\n<li><code class=\"language-text\">name</code>의 값을 <code class=\"language-text\">admin</code>에 복사</li>\n<li><code class=\"language-text\">admin</code>의 값을 <code class=\"language-text\">alert</code>창에 띄워보고 <code class=\"language-text\">John</code>으로 출력되는지 확인하라.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token string\">'use strict'</span>\n<span class=\"token keyword\">let</span> admin<span class=\"token punctuation\">,</span> name\n\nname <span class=\"token operator\">=</span> <span class=\"token string\">'John'</span>\nadmin <span class=\"token operator\">=</span> name\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>admin<span class=\"token punctuation\">)</span></code></pre></div>\n<p>ㅤ</p>\n<h4 id=\"2-올바른-이름-선택하기\" style=\"position:relative;\"><a href=\"#2-%EC%98%AC%EB%B0%94%EB%A5%B8-%EC%9D%B4%EB%A6%84-%EC%84%A0%ED%83%9D%ED%95%98%EA%B8%B0\" aria-label=\"2 올바른 이름 선택하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 올바른 이름 선택하기</h4>\n<ol>\n<li>현재 우리가 살고 있는 행성(planet)의 이름을 값으로 가진 변수를 만들고, 변수 이름 역시 설정 하시오.</li>\n<li>웹사이트를 개발 중이라고 가정하고, 현재 접속 중인 사용자(user)의 이름(name)을 저장하는 변수를 만들고, 변수 이름을 설정 하시오.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> outPlanet <span class=\"token operator\">=</span> <span class=\"token string\">'Earth'</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> currentUserName <span class=\"token operator\">=</span> <span class=\"token string\">'whoareyou'</span></code></pre></div>\n<p>ㅤ</p>\n<h4 id=\"3-대문자-상수-올바르게-사용하기\" style=\"position:relative;\"><a href=\"#3-%EB%8C%80%EB%AC%B8%EC%9E%90-%EC%83%81%EC%88%98-%EC%98%AC%EB%B0%94%EB%A5%B4%EA%B2%8C-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"3 대문자 상수 올바르게 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 대문자 상수 올바르게 사용하기</h4>\n<p>아래 코드를 평가하시오</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> birthday <span class=\"token operator\">=</span> <span class=\"token string\">'18.04.1982'</span>\n<span class=\"token keyword\">const</span> age <span class=\"token operator\">=</span> <span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span>birthday<span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">birthday</code>는 태어난 이상 변경되지 않기 때문에 대문자여도 좋지만, <code class=\"language-text\">age</code>는 매년 변경되기 때문에 소문자로 놓는 것이 옳다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token constant\">BIRTHDAY</span> <span class=\"token operator\">=</span> <span class=\"token string\">'18.04.1982'</span>\n<span class=\"token keyword\">const</span> age <span class=\"token operator\">=</span> <span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token constant\">BIRTHDAY</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>ㅤ</p>\n<p>ㅤ</p>\n<h2 id=\"자료형\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%A3%8C%ED%98%95\" aria-label=\"자료형 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자료형</h2>\n<p>자바스크립트에서 값은 항상 문자열이나 숫자형 같은 특정한 자료형에 속하며 총 여덟 가지 기본 자료형이 있습니다.</p>\n<p>ㅤ</p>\n<ul>\n<li><code class=\"language-text\">숫자형</code> – 정수, 부동 소수점 숫자 등의 숫자를 나타낼 때 사용합니다. 정수의 한계는 ±253 입니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> n <span class=\"token operator\">=</span> <span class=\"token number\">123</span>\nn <span class=\"token operator\">=</span> <span class=\"token number\">12.345</span>\nn <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">/</span> <span class=\"token number\">0</span> <span class=\"token comment\">// 무한대</span>\nn <span class=\"token operator\">=</span> <span class=\"token number\">Infinity</span> <span class=\"token comment\">// 무한대</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">bigint</code> – 길이 제약 없이 정수를 나타낼 수 있습니다. 끝에 n이 붙는다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> bigInt <span class=\"token operator\">=</span> <span class=\"token number\">1234567890123456789012345678901234567890n</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">문자형</code> – 빈 문자열이나 글자들로 이뤄진 문자열을 나타낼 때 사용합니다. 단일 문자를 나타내는 별도의 자료형은 없습니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'hello'</span>\n<span class=\"token keyword\">let</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'this is string'</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> phrase <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">can embed another </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>str<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token comment\">// ' / \" 이 아닌 ` 을 사용한다.</span>\n<span class=\"token comment\">// example</span>\n<span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'John'</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">!</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">불린형</code> – <code class=\"language-text\">true</code>, <code class=\"language-text\">false</code>를 나타낼 때 사용합니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> nameFieldChecked <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n<span class=\"token keyword\">let</span> ageFieldChecked <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">null</code> – <code class=\"language-text\">null</code> 값만을 위한 독립 자료형입니다. <code class=\"language-text\">null</code>은 알 수 없는 값을 나타냅니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> age <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">undefined</code> – <code class=\"language-text\">undefined</code> 값만을 위한 독립 자료형입니다. <code class=\"language-text\">undefined</code>는 할당되지 않은 값을 나타냅니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> age\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'undefined' 출력되며 age가 아직 정의되지 않았음을 의미한다.</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">객체형</code> – 복잡한 데이터 구조를 표현할 때 사용합니다. (다시 설명 예정)</li>\n</ul>\n<p>객체형은 특수한 자료형으로 객체형을 제외한 다른 자료형은 문자열이든 숫자든 한 가지만 표현할 수 있기 때문에 원시(primitive) 자료형이라 부르지만, 객체는 데이터 컬렉션이나 복잡한 개체(entity)를 표현할 수 있습니다.</p>\n<p>이런 특징 때문에 자바스크립트에서 객체는 좀 더 특별한 취급을 받고 있습니다.</p>\n<ul>\n<li><code class=\"language-text\">심볼형</code> – 객체의 고유 식별자를 만들 때 사용합니다. (다시 설명 예정)</li>\n</ul>\n<p>ㅤ</p>\n<h3 id=\"typeof-연산자\" style=\"position:relative;\"><a href=\"#typeof-%EC%97%B0%EC%82%B0%EC%9E%90\" aria-label=\"typeof 연산자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>typeof 연산자</h3>\n<p><code class=\"language-text\">typeof</code> 연산자는 인수의 자료형을 반환하고 자료형에 따라 처리 방식을 다르게 하고 싶거나 변수의 자료형을 빠르게 알아내고자 할 때 유용하다.</p>\n<ul>\n<li><code class=\"language-text\">typeof x</code> vs <code class=\"language-text\">typeof(x)</code> : 각각 연산자로 쓰임과 함수형으로 쓰이는 형태로 둘다 동일하다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">undefined</span> <span class=\"token comment\">// \"undefined\"</span>\n\n<span class=\"token keyword\">typeof</span> <span class=\"token number\">0</span> <span class=\"token comment\">// \"number\"</span>\n\n<span class=\"token keyword\">typeof</span> <span class=\"token number\">10n</span> <span class=\"token comment\">// \"bigint\"</span>\n\n<span class=\"token keyword\">typeof</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">// \"boolean\"</span>\n\n<span class=\"token keyword\">typeof</span> <span class=\"token string\">'foo'</span> <span class=\"token comment\">// \"string\"</span>\n\n<span class=\"token keyword\">typeof</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"symbol\"</span>\n\n<span class=\"token keyword\">typeof</span> Math <span class=\"token comment\">// \"object\"  (1)</span>\n\n<span class=\"token keyword\">typeof</span> <span class=\"token keyword\">null</span> <span class=\"token comment\">// \"object\"  (2)</span>\n\n<span class=\"token keyword\">typeof</span> alert <span class=\"token comment\">// \"function\"  (3)</span></code></pre></div>\n<p>ㅤ</p>\n<p>ㅤ</p>\n<h2 id=\"형-변환-type-conversion\" style=\"position:relative;\"><a href=\"#%ED%98%95-%EB%B3%80%ED%99%98-type-conversion\" aria-label=\"형 변환 type conversion permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>형 변환 (type conversion)</h2>\n<p>함수와 연산자에 전달되는 값은 대부분 적절한 자료형으로 자동 변환되는데, 이런 과정을 “형 변환”이라고 한다. 예를 들어 <code class=\"language-text\">alert</code>가 전달 받은 값의 자료형과 관계없이 이를 문자열로 자동 변환하여 보여주는 것이나, 수학 관련 연산자가 전달받은 값을 숫자로 변환하는 경우가 대표적인 형 변환의 예이다.</p>\n<p>이 외에, 전달 받은 값을 의도에 맞게 원하는 타입으로 변환 하는 것 역시 형 변환이라 할 수 있다.</p>\n<p>ㅤ</p>\n<h4 id=\"string--문자형으로-변환\" style=\"position:relative;\"><a href=\"#string--%EB%AC%B8%EC%9E%90%ED%98%95%EC%9C%BC%EB%A1%9C-%EB%B3%80%ED%99%98\" aria-label=\"string  문자형으로 변환 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>String : 문자형으로 변환</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// boolean</span>\n\nvalue <span class=\"token operator\">=</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>type <span class=\"token keyword\">of</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// string</span></code></pre></div>\n<p>ㅤ</p>\n<h4 id=\"number--숫자형으로-변환\" style=\"position:relative;\"><a href=\"#number--%EC%88%AB%EC%9E%90%ED%98%95%EC%9C%BC%EB%A1%9C-%EB%B3%80%ED%99%98\" aria-label=\"number  숫자형으로 변환 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Number : 숫자형으로 변환</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'123'</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> value<span class=\"token punctuation\">)</span> <span class=\"token comment\">// string</span>\n\nvalue <span class=\"token operator\">=</span> <span class=\"token function\">number</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> value<span class=\"token punctuation\">)</span> <span class=\"token comment\">// number</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">undefinded</code> : <code class=\"language-text\">NaN</code></li>\n<li><code class=\"language-text\">null</code> : <code class=\"language-text\">0</code></li>\n<li><code class=\"language-text\">true and false</code> : <code class=\"language-text\">1 and 0</code></li>\n<li><code class=\"language-text\">string</code> : 문자열의 처음과 끝 공백이 제거되고 남아있는 문자열이 없다면 <code class=\"language-text\">0</code>, 그렇지 않다면 숫자를 읽는데, 실패할 경우 <code class=\"language-text\">NaN</code>을 리턴한다.</li>\n</ul>\n<p>ㅤ</p>\n<h4 id=\"boolean--불린형으로-변환\" style=\"position:relative;\"><a href=\"#boolean--%EB%B6%88%EB%A6%B0%ED%98%95%EC%9C%BC%EB%A1%9C-%EB%B3%80%ED%99%98\" aria-label=\"boolean  불린형으로 변환 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Boolean : 불린형으로 변환</h4>\n<p><code class=\"language-text\">0</code>, <code class=\"language-text\">&#39;&#39;</code> , <code class=\"language-text\">&quot;&quot;</code> , <code class=\"language-text\">undefined</code>, <code class=\"language-text\">NaN</code> 과 같이 직관적으로 비어있거나 존재하지 않는 값에 대해서는 <code class=\"language-text\">false</code>를 리턴한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 숫자 1(true)</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 숫자 0(false)</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 문자열(true)</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 빈 문자열(false)</span></code></pre></div>\n<h2 id=\"원시값의-메서드-methods-of-primitives\" style=\"position:relative;\"><a href=\"#%EC%9B%90%EC%8B%9C%EA%B0%92%EC%9D%98-%EB%A9%94%EC%84%9C%EB%93%9C-methods-of-primitives\" aria-label=\"원시값의 메서드 methods of primitives permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>원시값의 메서드 (Methods of primitives)</h2>\n<p>자바스크립트는 원시값(문자열, 숫자 등)을 마치 객체처럼 다룰 수 있게 해줍니다. 말그대로 객체에서처럼 메서드를 호출할 수 있는데, 그렇다고 원시값이 객체는 아니라는 것을 명심하자.</p>\n<p>ㅤ</p>\n<h3 id=\"원시값을-객체처럼-사용하기\" style=\"position:relative;\"><a href=\"#%EC%9B%90%EC%8B%9C%EA%B0%92%EC%9D%84-%EA%B0%9D%EC%B2%B4%EC%B2%98%EB%9F%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"원시값을 객체처럼 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>원시값을 객체처럼 사용하기</h3>\n<ul>\n<li>문자열이나 숫자와 같은 원시값을 다루어야 하는 작업이 많은데, 메서드를 사용하면 작업을 수월하게 할 수 있을 것 같다는 생각이 듭니다.</li>\n<li>그런데 원시값은 가능한 한 빠르고 가벼워야 합니다.</li>\n</ul>\n<p>자바스크립트는 위와 같은 모순적인 상황을 해결하기 위해 다음과 같은 해결책을 제안했습니다.</p>\n<ol>\n<li>원시값은 원시값 그대로 남겨둬 단일 값 형태를 유지</li>\n<li>문자열, 숫자, 불린, 심볼의 메서드와 프로퍼티에 접근할 수 있도록 언어 차원에서 허용</li>\n<li>이를 가능하게 하기 위해, 원시값이 메서드나 프로퍼티에 접근하려 하면 추가 기능을 제공해주는 특수한 객체, “원시 래퍼 객체(object wrapper)“를 만들어 주고 객체는 삭제된다.</li>\n</ol>\n<p>“래퍼 객체”는 원시 타입에 따라 종류가 다양한데, 각 래퍼 객체는 원시 자료형의 이름을 그대로 차용해, <code class=\"language-text\">String, Number, Boolean, Symbol</code> 이라고 부르고, 래퍼 객체마다 제공하는 메서드 역시 다르다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// string</span>\n<span class=\"token keyword\">let</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'Hello'</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// HELLO;</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Hello;</span></code></pre></div>\n<p>동작 방식은 다음과 같다.</p>\n<ol>\n<li>문자열 <code class=\"language-text\">str</code>은 <code class=\"language-text\">String</code> 타입의 원시값으로, 원시값의 프로퍼티인 <code class=\"language-text\">toUpperCase()</code>에 접근하는 순간 특별한 객체가 만들어진다.</li>\n<li>메서드가 실행되고, 새로운 문자열을 반환</li>\n<li>반환된 이후에 1에서 생성되었던 특별한 객체는 파괴되고, 원시값인 <code class=\"language-text\">str</code> 만 다시 남는다.</li>\n</ol>\n<p>ㅤ</p>\n<p>ㅤ</p>\n<h2 id=\"숫자형\" style=\"position:relative;\"><a href=\"#%EC%88%AB%EC%9E%90%ED%98%95\" aria-label=\"숫자형 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>숫자형</h2>\n<p>모던 자바스크립트는 숫자를 나타내는 두 가지 자료형을 지원한다.</p>\n<ol>\n<li>일반적인 숫자 ‘배정밀도 부동소수점 숫자’로 알려진 64bit 형식의 <a href=\"https://en.wikipedia.org/wiki/IEEE_754-2008_revision\">IEEE-754</a>에 저장</li>\n<li>임의의 길이를 가진 정수는 <strong>Bigint</strong> 숫자로 나타낼 수 있는데, 일반적인 숫자는 <code class=\"language-text\">2^53</code>이상 이거나 <code class=\"language-text\">-2^53</code>이하일 수 없다는 제약 때문에 BigInt라는 새로운 자료형이 만들어짐</li>\n</ol>\n<p>ㅤ</p>\n<h3 id=\"숫자를-입력하는-다양한-방법\" style=\"position:relative;\"><a href=\"#%EC%88%AB%EC%9E%90%EB%A5%BC-%EC%9E%85%EB%A0%A5%ED%95%98%EB%8A%94-%EB%8B%A4%EC%96%91%ED%95%9C-%EB%B0%A9%EB%B2%95\" aria-label=\"숫자를 입력하는 다양한 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>숫자를 입력하는 다양한 방법</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> billion <span class=\"token operator\">=</span> <span class=\"token number\">1000000000</span>\n<span class=\"token keyword\">let</span> billion <span class=\"token operator\">=</span> <span class=\"token number\">1e9</span> <span class=\"token comment\">// 1 * 10^9</span></code></pre></div>\n<h3 id=\"16진수-2진수-8진수\" style=\"position:relative;\"><a href=\"#16%EC%A7%84%EC%88%98-2%EC%A7%84%EC%88%98-8%EC%A7%84%EC%88%98\" aria-label=\"16진수 2진수 8진수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>16진수, 2진수, 8진수</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 16진수 ff와 FF는 대소문자를 구분하지 않는다.</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xff</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 255</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xff</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 255</span>\n<span class=\"token comment\">// 2진수</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">0b11111111</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 255</span>\n<span class=\"token comment\">// 8진수</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">0o377</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 255</span></code></pre></div>\n<h3 id=\"tostringbase\" style=\"position:relative;\"><a href=\"#tostringbase\" aria-label=\"tostringbase permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>toString(base)</h3>\n<p><code class=\"language-text\">num.toString(base)</code> 메서는 <code class=\"language-text\">base</code> 진법으로 <code class=\"language-text\">num</code> 을 표현한 후 이를 문자형으로 변환해 반환한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> <span class=\"token number\">255</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ff</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 111111111</span></code></pre></div>\n<p>ㅤ</p>\n<p>ㅤ</p>\n<h2 id=\"문자열\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%9E%90%EC%97%B4\" aria-label=\"문자열 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문자열</h2>\n<blockquote>\n<p>메서드만 알아보고 넘어가는게 좋아보여 코드만 작성했다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 문자열 길이 str.length - length는 프로퍼티이다.</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'this is string'</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 14</span>\n\n<span class=\"token comment\">// 특정 글자에 접근하기</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'this is string'</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// t</span>\n\n<span class=\"token comment\">// 문자열의 불변성 - 특정 글자만 변경 불가능</span>\n<span class=\"token keyword\">let</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'this is string'</span>\nstr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'T'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span> <span class=\"token comment\">// this is string;</span>\n\n<span class=\"token comment\">// 대-소문자 변경하기</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// THIS IS STRING</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// this is string</span>\n\n<span class=\"token comment\">// 부분 문자열 찾기</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'this'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Interger'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// -1</span>\n\n<span class=\"token comment\">// include, startsWith, endsWith</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">include</span><span class=\"token punctuation\">(</span><span class=\"token string\">'this'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'this'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">endsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n\n<span class=\"token comment\">// 부분 문자열 추출하기 (end-1 까지 반환)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// this</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// this is</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// this i</span>\n\n<span class=\"token comment\">// etc</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'z'</span><span class=\"token punctuation\">.</span><span class=\"token function\">codePointAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 122</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Z'</span><span class=\"token punctuation\">.</span><span class=\"token function\">codePointAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 90</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">.</span><span class=\"token function\">fromCodePoint</span><span class=\"token punctuation\">(</span><span class=\"token number\">90</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Z</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\u005a'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Z</span></code></pre></div>\n<h2 id=\"기본-연산자와-수학\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EB%B3%B8-%EC%97%B0%EC%82%B0%EC%9E%90%EC%99%80-%EC%88%98%ED%95%99\" aria-label=\"기본 연산자와 수학 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기본 연산자와 수학</h2>\n<p>자바스크립트에서만 제공하는 연산자에 대해 배운다.</p>\n<p>ㅤ</p>\n<h3 id=\"용어-단항-이항-피연산자\" style=\"position:relative;\"><a href=\"#%EC%9A%A9%EC%96%B4-%EB%8B%A8%ED%95%AD-%EC%9D%B4%ED%95%AD-%ED%94%BC%EC%97%B0%EC%82%B0%EC%9E%90\" aria-label=\"용어 단항 이항 피연산자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>용어: ‘단항’, ‘이항’, ‘피연산자’</h3>\n<ul>\n<li>피연산자(operand) s는 연산자가 연산을 수행하는 대상 <code class=\"language-text\">5 * 2</code> 에서는 <code class=\"language-text\">5, 2</code> 두 개의 피연산자다. ‘피연산자’는 ‘인수(argument)‘라는 용어로 불리기도 한다.</li>\n<li>피연산자를 하나만 받는 연산자는 단항(unary) 연산자라고 부른다. 피연산자의 부호를 뒤집는 단항 마이너스 연산자 <code class=\"language-text\">-</code>는 단항 연산자의 대표적인 예</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\nx <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>x\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token comment\">// -1</span></code></pre></div>\n<ul>\n<li>두 개의 피연산자를 받는 연산자는 이항(binary) 연산자라 부른다. 마이너스 연산자는 아래와 같은 이항 연산자로 쓸수 있다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  y <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>y <span class=\"token operator\">-</span> x<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2</span></code></pre></div>\n<p>ㅤ</p>\n<h3 id=\"수학\" style=\"position:relative;\"><a href=\"#%EC%88%98%ED%95%99\" aria-label=\"수학 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>수학</h3>\n<blockquote>\n<p>어느 언어들과 다를 것이 없다.</p>\n</blockquote>\n<ul>\n<li>덧셈(+), 뺄셈(-), 곱셈(*), 나눗셈(/), 나머지(%), 거듭제곱 연산자(**)</li>\n</ul>\n<p>ㅤ</p>\n<h3 id=\"단항-연산자-와-숫자형으로의-변환\" style=\"position:relative;\"><a href=\"#%EB%8B%A8%ED%95%AD-%EC%97%B0%EC%82%B0%EC%9E%90-%EC%99%80-%EC%88%AB%EC%9E%90%ED%98%95%EC%9C%BC%EB%A1%9C%EC%9D%98-%EB%B3%80%ED%99%98\" aria-label=\"단항 연산자 와 숫자형으로의 변환 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>단항 연산자 +와 숫자형으로의 변환</h3>\n<p>덧셈 연산자 +는 이항 연산자뿐만 아니라 단항 연산자로도 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token operator\">+</span>x<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span>\n<span class=\"token keyword\">let</span> y <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token operator\">+</span>y<span class=\"token punctuation\">)</span> <span class=\"token comment\">// -2</span>\n<span class=\"token comment\">// 숫자형이 아닌 피연산자는 숫자형으로 변화</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token operator\">+</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token operator\">+</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0</span></code></pre></div>\n<p>아래와 같이도 사용할 수 있다. 코드만 보고 넘어가자.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> apples <span class=\"token operator\">=</span> <span class=\"token string\">'2'</span>\n<span class=\"token keyword\">let</span> oranges <span class=\"token operator\">=</span> <span class=\"token string\">'3'</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>apples <span class=\"token operator\">+</span> oranges<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 23, 이항 덧셈 연산자는 문자열을 연결합니다.</span>\n\n<span class=\"token comment\">// 이항 덧셈 연산자가 적용되기 전에, 두 피연산자는 숫자형으로 변화합니다.</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token operator\">+</span>apples <span class=\"token operator\">+</span> <span class=\"token operator\">+</span>oranges<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 5</span>\n\n<span class=\"token comment\">// `Number(...)`를 사용해서 같은 동작을 하는 코드를 작성할 수 있지만, 더 기네요.</span>\n<span class=\"token comment\">// alert( Number(apples) + Number(oranges) ); // 5</span></code></pre></div>\n<p>ㅤ</p>\n<h3 id=\"증가감소-연산자\" style=\"position:relative;\"><a href=\"#%EC%A6%9D%EA%B0%80%EA%B0%90%EC%86%8C-%EC%97%B0%EC%82%B0%EC%9E%90\" aria-label=\"증가감소 연산자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>증가/감소 연산자</h3>\n<ul>\n<li>증가 (increment) 연산자 : <code class=\"language-text\">++</code> 은 변수를 1 증가시킨다.</li>\n<li>감소 (decrement) 연산자 : <code class=\"language-text\">--</code> 은 변수를 1 감소시킨다.</li>\n</ul>\n<p><code class=\"language-text\">++</code> 와 <code class=\"language-text\">--</code> 연산자는 변수의 앞이나 뒤에 올 수 있다.</p>\n<ul>\n<li>\n<p>후위형 (postfix form) : <code class=\"language-text\">counter++</code>와 같이 피연산자 뒤에 올 때를 말한다.</p>\n<ul>\n<li>새로운 값을 먼저 반환하고 피연산자를 증가시킨다.</li>\n</ul>\n</li>\n<li>\n<p>전위형 (prefix form) : <code class=\"language-text\">++counter</code>와 같이 피연산자 앞에 올 때를 말한다.</p>\n<ul>\n<li>피연산자를 먼저 증가시키고 새로운 값을 반환한다.</li>\n</ul>\n</li>\n</ul>\n<p>ㅤ</p>\n<h3 id=\"비트-연산자\" style=\"position:relative;\"><a href=\"#%EB%B9%84%ED%8A%B8-%EC%97%B0%EC%82%B0%EC%9E%90\" aria-label=\"비트 연산자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>비트 연산자</h3>\n<p>비트 연산자(bitwise operator)는 인수를 32비트 정수로 변환하여 이진 연산을 수행합니다.</p>\n<ul>\n<li>AND (&#x26;) , OR (|), XOR (^), NOT (~)</li>\n<li>LEFT SHIFT (&#x3C;&#x3C;), RIGHT SHIFT (>>), 부호 없는 오른쪽 시프트 (>>>)</li>\n</ul>\n<p>ㅤ</p>\n<h3 id=\"쉼표-연산자\" style=\"position:relative;\"><a href=\"#%EC%89%BC%ED%91%9C-%EC%97%B0%EC%82%B0%EC%9E%90\" aria-label=\"쉼표 연산자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>쉼표 연산자</h3>\n<p>쉼표 연산자(<code class=\"language-text\">,</code>) 는 좀처럼 보기 힘들고 특이한 연산자 중 하나이다. 코드를 짧게 쓰려는 의도로 가끔 사용되는데, 쉼표 연산자는 여러 표현식을 코드 한 줄에서 평가할 수 있게 해준다. 이 때 표현식은 각각 모두 평가되지만, 마지막 표현식의 평가 결과만 반환된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 5</span></code></pre></div>\n<blockquote>\n<p>쉼표의 우선 순위는 매우 낮다.</p>\n</blockquote>\n<p>ㅤ</p>\n<h3 id=\"과제-3\" style=\"position:relative;\"><a href=\"#%EA%B3%BC%EC%A0%9C-3\" aria-label=\"과제 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>과제</h3>\n<h4 id=\"형변환\" style=\"position:relative;\"><a href=\"#%ED%98%95%EB%B3%80%ED%99%98\" aria-label=\"형변환 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>형변환</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token string\">''</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">0</span> <span class=\"token comment\">// \"\" + 1 = \"1\" + 0 = \"10\"</span>\n<span class=\"token string\">''</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">0</span> <span class=\"token comment\">// -1</span>\n<span class=\"token boolean\">true</span> <span class=\"token operator\">+</span> <span class=\"token boolean\">false</span> <span class=\"token comment\">// 1</span>\n<span class=\"token number\">6</span> <span class=\"token operator\">/</span> <span class=\"token string\">'3'</span> <span class=\"token comment\">// 6 / 3 = 2 // / 는 숫자형만 인수로 받는다.</span>\n<span class=\"token string\">'2'</span> <span class=\"token operator\">*</span> <span class=\"token string\">'3'</span> <span class=\"token comment\">// 2 * 3 = 6  // * 는 숫자형만 인수로 받는다.</span>\n<span class=\"token number\">4</span> <span class=\"token operator\">+</span> <span class=\"token number\">5</span> <span class=\"token operator\">+</span> <span class=\"token string\">'px'</span> <span class=\"token comment\">// 4 + 5 = 9 + \"px\" = \"9px\"</span>\n<span class=\"token string\">'$'</span> <span class=\"token operator\">+</span> <span class=\"token number\">4</span> <span class=\"token operator\">+</span> <span class=\"token number\">5</span> <span class=\"token comment\">// $45</span>\n<span class=\"token string\">'4'</span> <span class=\"token operator\">-</span> <span class=\"token number\">2</span> <span class=\"token comment\">// 2</span>\n<span class=\"token string\">'4px'</span> <span class=\"token operator\">-</span> <span class=\"token number\">2</span> <span class=\"token comment\">// NaN</span>\n<span class=\"token number\">7</span> <span class=\"token operator\">/</span> <span class=\"token number\">0</span> <span class=\"token comment\">// Infinity</span>\n<span class=\"token string\">' -9  '</span> <span class=\"token operator\">+</span> <span class=\"token number\">5</span> <span class=\"token comment\">// \" -9  5\"</span>\n<span class=\"token string\">' -9  '</span> <span class=\"token operator\">-</span> <span class=\"token number\">5</span> <span class=\"token comment\">// -14</span>\n<span class=\"token keyword\">null</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token comment\">// 1</span>\n<span class=\"token keyword\">undefined</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token comment\">// NaN // undefined는 수치로 반환되지 않는다.</span>\n<span class=\"token string\">' \\t \\n'</span> <span class=\"token operator\">-</span> <span class=\"token number\">2</span></code></pre></div>\n<p>ㅤ</p>\n<p>ㅤ</p>\n<h2 id=\"조건부-연산자-code-classlanguage-textifcode와-code-classlanguage-textcode\" style=\"position:relative;\"><a href=\"#%EC%A1%B0%EA%B1%B4%EB%B6%80-%EC%97%B0%EC%82%B0%EC%9E%90-code-classlanguage-textifcode%EC%99%80-code-classlanguage-textcode\" aria-label=\"조건부 연산자 code classlanguage textifcode와 code classlanguage textcode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>조건부 연산자 <code class=\"language-text\">if</code>와 <code class=\"language-text\">?</code></h2>\n<p><code class=\"language-text\">if (...)</code>문은 괄호 안에 들어가는 조건의 결과가 <code class=\"language-text\">true</code>이면 아래 명시된 코드 블록이 실행된다. 공부한 내용을 종합적으로 하나의 코드로 작성하면 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>year <span class=\"token operator\">>=</span> <span class=\"token number\">2021</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'future'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>year <span class=\"token operator\">>=</span> <span class=\"token number\">2020</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'present'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'past'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> age <span class=\"token operator\">=</span> <span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'나이를 입력해 주세요.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// using if statement</span>\n<span class=\"token keyword\">let</span> accessAllowed <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>age <span class=\"token operator\">></span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  accessAllowed <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// using ? statement</span>\n<span class=\"token comment\">// let result = condition ? value1 : value2;</span>\n<span class=\"token keyword\">let</span> accessAllowed <span class=\"token operator\">=</span> age <span class=\"token operator\">></span> <span class=\"token number\">18</span> <span class=\"token operator\">?</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">false</span></code></pre></div>\n<p>ㅤ</p>\n<p>ㅤ</p>\n<h2 id=\"논리-연산자\" style=\"position:relative;\"><a href=\"#%EB%85%BC%EB%A6%AC-%EC%97%B0%EC%82%B0%EC%9E%90\" aria-label=\"논리 연산자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>논리 연산자</h2>\n<p>자바스크립트엔 세 종류의 논리 연산자 <code class=\"language-text\">||</code> (OR), <code class=\"language-text\">&amp;&amp;</code> (AND), <code class=\"language-text\">!</code> (NOT) 이 있습니다.</p>\n<h3 id=\"or-연산자---code-classlanguage-textcode\" style=\"position:relative;\"><a href=\"#or-%EC%97%B0%EC%82%B0%EC%9E%90---code-classlanguage-textcode\" aria-label=\"or 연산자   code classlanguage textcode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>OR 연산자 - <code class=\"language-text\">||</code></h3>\n<p>전통적인 프로그래밍에서 OR 연산자는 불린값을 조작하는 데 쓰인다. 인수 중 하나라도<code class=\"language-text\">true</code> 이면 <code class=\"language-text\">true</code> 를 반환하고, 그렇지 않으면 <code class=\"language-text\">false</code> 를 반환한다. 자바스크립의 OR 연산자는 다루긴 까다롭지만 강력한 기능을 제공한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// OR</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span> <span class=\"token operator\">||</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span> <span class=\"token operator\">||</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span> <span class=\"token operator\">||</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span></code></pre></div>\n<p>ㅤ</p>\n<h4 id=\"첫-번째-truthy를-찾는-or-연산자-code-classlanguage-textcode\" style=\"position:relative;\"><a href=\"#%EC%B2%AB-%EB%B2%88%EC%A7%B8-truthy%EB%A5%BC-%EC%B0%BE%EB%8A%94-or-%EC%97%B0%EC%82%B0%EC%9E%90-code-classlanguage-textcode\" aria-label=\"첫 번째 truthy를 찾는 or 연산자 code classlanguage textcode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>첫 번째 truthy를 찾는 OR 연산자 <code class=\"language-text\">||</code></h4>\n<p>논리연산자 OR의 ‘추가’ 기능으로 다음과 같은 알고리즘으로 동작한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">result <span class=\"token operator\">=</span> value1 <span class=\"token operator\">||</span> value2 <span class=\"token operator\">||</span> value3\n<span class=\"token comment\">/*\nif (value1) {\n\tresult = value1;\n} else if (value2) {\n\tresult = value2;\n}\telse if (value3) {\n\tresult = value3;\n}\telse {\n\tresult = false;\n}\n*/</span></code></pre></div>\n<p>이런 기능을 이용하여 여러 용도로 OR 연산자를 활용할 수 있다.</p>\n<p><strong>1. 변수 또는 표현식으로 구성된 목록에서 첫 번째 truthy 얻기</strong></p>\n<blockquote>\n<p>이건 나중에 사용하기 좋은 예제인 것 같다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> firstName <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n<span class=\"token keyword\">let</span> lastName <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n<span class=\"token keyword\">let</span> nickName <span class=\"token operator\">=</span> <span class=\"token string\">'바이올렛'</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>firstName <span class=\"token operator\">||</span> lastName <span class=\"token operator\">||</span> nickName <span class=\"token operator\">||</span> <span class=\"token string\">'익명'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 바이올렛</span></code></pre></div>\n<p><strong>2. 단락평가</strong></p>\n<p>OR 연산자 <code class=\"language-text\">||</code>가 제공하는 또 다른 기능은 ‘단락 평가(short circuit evaluation)’ 이다. 위와 같이 OR 연산자는 왼쪽에서 시작해서 오른쪽으로 평가를 진행하는데, truthy를 만나면 나머지 값들은 건드리지 않은 채 평가를 멈춘다. 이런 프로세스를 단락 평가라고 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">result <span class=\"token operator\">=</span> <span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'이름을 입력하세요'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'이름을 입력하지 않았습니다.'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>ㅤ</p>\n<h3 id=\"and-연산자---code-classlanguage-textampampcode\" style=\"position:relative;\"><a href=\"#and-%EC%97%B0%EC%82%B0%EC%9E%90---code-classlanguage-textampampcode\" aria-label=\"and 연산자   code classlanguage textampampcode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AND 연산자 - <code class=\"language-text\">&amp;&amp;</code></h3>\n<p>AND 연산자는 OR 연산자와 정반대로 생각하면 안되지만, 대체로 정반대로 생각하면 편한 것 같다. OR 연산자가 첫 번째 truthy를 찾는데 사용했다면, 반대로 AND 연산자는 첫 번째 falsy를 찾는데에 사용한다. 아래 예시 코드를 정리하고 넘어간다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// AND</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">result <span class=\"token operator\">=</span> value1 <span class=\"token operator\">&amp;&amp;</span> value2 <span class=\"token operator\">&amp;&amp;</span> value3\n<span class=\"token comment\">/*\nif ( !value1 ) {\n\tresult = value1;\n} else if ( !value2 ) {\n\tresult = value2;\n} else if ( !value3 ) {\n\tresult = value3;\n} else {\n\tresult = true;\n}\n*/</span></code></pre></div>\n<p>ㅤ</p>\n<p>ㅤ</p>\n<h2 id=\"null-병합-연산자-code-classlanguage-textcode\" style=\"position:relative;\"><a href=\"#null-%EB%B3%91%ED%95%A9-%EC%97%B0%EC%82%B0%EC%9E%90-code-classlanguage-textcode\" aria-label=\"null 병합 연산자 code classlanguage textcode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>null 병합 연산자 <code class=\"language-text\">??</code></h2>\n<blockquote>\n<p>⚠️ 최근에 추가됨</p>\n<p>스펙에 추가된 지 얼마 안 된 문법으로 구식 브라우저는 폴리필이 필요합니다.</p>\n</blockquote>\n<p>null 병합 연산자 (nullish coalescing operator) <code class=\"language-text\">??</code>를 사용하면 여러 피연산자 중 그 값이 ‘확정되어 있는’ 변수를 짧은 문법으로도 찾을 수 있다. 상황에 따른 <code class=\"language-text\">a ?? b</code>의 결과를 보면 다음과 같다.</p>\n<ul>\n<li><code class=\"language-text\">a</code>가 <code class=\"language-text\">null</code>이나 <code class=\"language-text\">undefined</code>가 아니면 <code class=\"language-text\">a</code></li>\n<li><code class=\"language-text\">a</code>가 <code class=\"language-text\">null</code>이나 <code class=\"language-text\">undefined</code>가 아니면 <code class=\"language-text\">b</code></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">x <span class=\"token operator\">=</span> a <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> a <span class=\"token operator\">!==</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">?</span> a <span class=\"token operator\">:</span> b</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> firstName <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n<span class=\"token keyword\">let</span> lastName <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n<span class=\"token keyword\">let</span> nickName <span class=\"token operator\">=</span> <span class=\"token string\">'바이올렛'</span>\n\n<span class=\"token comment\">// null이나 undefined가 아닌 첫 번째 피연산자</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>firstName <span class=\"token operator\">??</span> lastName <span class=\"token operator\">??</span> nickName <span class=\"token operator\">??</span> <span class=\"token string\">'익명'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 바이올렛</span></code></pre></div>\n<p>ㅤ</p>\n<h4 id=\"code-classlanguage-textcode-와-code-classlanguage-textcode-의-차이\" style=\"position:relative;\"><a href=\"#code-classlanguage-textcode-%EC%99%80-code-classlanguage-textcode-%EC%9D%98-%EC%B0%A8%EC%9D%B4\" aria-label=\"code classlanguage textcode 와 code classlanguage textcode 의 차이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">??</code> 와 <code class=\"language-text\">||</code> 의 차이</h4>\n<p>null 병합 연산자와 OR 연산자는 실제로 상당히 유사해보이는데, 위의 코드를 수정하더라도 결과는 동일하게 나타난다. 하지만 중요한 차이점이 있는데, 코드를 통해 확인하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> height <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>height <span class=\"token operator\">||</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 100</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>height <span class=\"token operator\">??</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0</span></code></pre></div>\n<p><code class=\"language-text\">??</code> 연산자 같은 경우 어쨋든 <code class=\"language-text\">false</code> 더라도 할당되어 있다면 그 값을 리턴하는 반면 <code class=\"language-text\">||</code> 연산자는 정확히 값이 <code class=\"language-text\">true</code> 이여야 반환한다.</p>\n<h2 id=\"반복문-while-과-for\" style=\"position:relative;\"><a href=\"#%EB%B0%98%EB%B3%B5%EB%AC%B8-while-%EA%B3%BC-for\" aria-label=\"반복문 while 과 for permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>반복문 while 과 for</h2>\n<blockquote>\n<p>문법만 보고 넘어가자</p>\n</blockquote>\n<p>ㅤ</p>\n<h4 id=\"code-classlanguage-textwhilecode-반복문\" style=\"position:relative;\"><a href=\"#code-classlanguage-textwhilecode-%EB%B0%98%EB%B3%B5%EB%AC%B8\" aria-label=\"code classlanguage textwhilecode 반복문 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">while</code> 반복문</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>condition<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// body</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"code-classlanguage-textdowhilecode-반복문\" style=\"position:relative;\"><a href=\"#code-classlanguage-textdowhilecode-%EB%B0%98%EB%B3%B5%EB%AC%B8\" aria-label=\"code classlanguage textdowhilecode 반복문 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">do...while</code> 반복문</h4>\n<p><code class=\"language-text\">do...while</code> 문법을 사용하면 <code class=\"language-text\">condition</code>을 반복문 아래로 옮길 수 있는데, 이 때 본문이 먼저 실행되고, 조건을 확인한 후 조건이 <code class=\"language-text\">true</code>인 동안 본문이 계속 실행된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// body</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>condition<span class=\"token punctuation\">)</span></code></pre></div>\n<h4 id=\"code-classlanguage-textforcode-반복문\" style=\"position:relative;\"><a href=\"#code-classlanguage-textforcode-%EB%B0%98%EB%B3%B5%EB%AC%B8\" aria-label=\"code classlanguage textforcode 반복문 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">for</code> 반복문</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">;</span> condition<span class=\"token punctuation\">;</span> step<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// body</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 0, 1, 2가 출력됩니다.</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>ㅤ</p>\n<p>ㅤ</p>\n<h2 id=\"switch-문\" style=\"position:relative;\"><a href=\"#switch-%EB%AC%B8\" aria-label=\"switch 문 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>switch 문</h2>\n<p>복수의 <code class=\"language-text\">if</code> 조건문은 <code class=\"language-text\">switch</code> 문으로 바꿀 수 있는데, <code class=\"language-text\">switch</code> 문을 사용한 비교법은 특정 변수를 다양한 상황에서 비교할 수 있게 해준다. 코드 자체가 비교 상황을 잘 설명한다는 장점도 있다. <code class=\"language-text\">switch</code> 문은 하나 이상의 <code class=\"language-text\">case</code> 문으로 구성된다. 대게 <code class=\"language-text\">default</code> 문도 있지만 필수는 아니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// example</span>\n<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">case</span> <span class=\"token string\">'value1'</span><span class=\"token operator\">:</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token keyword\">break</span>\n  <span class=\"token keyword\">case</span> <span class=\"token string\">'value2'</span><span class=\"token operator\">:</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token keyword\">break</span>\n  <span class=\"token keyword\">case</span> <span class=\"token string\">'value3'</span><span class=\"token operator\">:</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token keyword\">break</span>\n  <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token keyword\">break</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>변수 <code class=\"language-text\">x</code>의 값을 순서대로 작성한 <code class=\"language-text\">case</code> 에 작성한 <code class=\"language-text\">value</code> 와 비교한다.</li>\n<li><code class=\"language-text\">case</code> 문에서 변수 <code class=\"language-text\">x</code> 와 값이 일치하는 값을 찾으면 <code class=\"language-text\">case</code> 문의 아래 코드가 실행되며 이때, <code class=\"language-text\">break</code> 문을 만나거나 <code class=\"language-text\">switch</code> 문이 끝나면 실행이 멈춥니다.</li>\n<li>값과 일치하는 <code class=\"language-text\">case</code>문이 없다면, <code class=\"language-text\">default</code> 문 아래의 코드가 실행되는데, 이는 필수가 아니기 때문에 없는 경우 종료된다.</li>\n</ul>\n<p>ㅤ</p>\n<h4 id=\"여러-개의-code-classlanguage-textcasecode-문-묶기\" style=\"position:relative;\"><a href=\"#%EC%97%AC%EB%9F%AC-%EA%B0%9C%EC%9D%98-code-classlanguage-textcasecode-%EB%AC%B8-%EB%AC%B6%EA%B8%B0\" aria-label=\"여러 개의 code classlanguage textcasecode 문 묶기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>여러 개의 <code class=\"language-text\">case</code> 문 묶기</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n\n<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">case</span> <span class=\"token number\">4</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'계산이 맞습니다!'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">break</span>\n\n  <span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span> <span class=\"token comment\">// (*) 두 case문을 묶음</span>\n  <span class=\"token keyword\">case</span> <span class=\"token number\">5</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'계산이 틀립니다!'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'수학 수업을 다시 들어보는걸 권유 드립니다.'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">break</span>\n\n  <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'계산 결과가 이상하네요.'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"함수\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98\" aria-label=\"함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수</h2>\n<p>스크립트를 작성하다 보면 유사한 동작을 하는 코드가 여러 곳에서 필요할 때가 있다. 함수는 프로그램을 구성하는 주요 ‘구성 요소(building block)‘으로 함수를 이용하면 중복 없이 유사한 동작을 하는 코드를 여러 번 호출할 수 있다.</p>\n<p>ㅤ</p>\n<h3 id=\"함수-선언\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98-%EC%84%A0%EC%96%B8\" aria-label=\"함수 선언 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수 선언</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">showMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'this is message'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">showMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">parameters</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 함수 본문</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>ㅤ</p>\n<h3 id=\"지역-변수\" style=\"position:relative;\"><a href=\"#%EC%A7%80%EC%97%AD-%EB%B3%80%EC%88%98\" aria-label=\"지역 변수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>지역 변수</h3>\n<p>함수 내 선언한 변수는 지역 (local variable) 로 함수 안에서만 접근할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">showMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> message <span class=\"token operator\">=</span> <span class=\"token string\">'this is message!'</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">showMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span> <span class=\"token comment\">// ReferenceError: message is not defined</span></code></pre></div>\n<p>ㅤ</p>\n<h3 id=\"외부-변수\" style=\"position:relative;\"><a href=\"#%EC%99%B8%EB%B6%80-%EB%B3%80%EC%88%98\" aria-label=\"외부 변수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>외부 변수</h3>\n<p>함수 내부에서 함수 외부의 변수인 외부 변수 (outer variable) 에 접근할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> userName <span class=\"token operator\">=</span> <span class=\"token string\">'John'</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">showMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>userName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">showMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>함수에서는 외부 변수에 접근하는 것뿐만 아니라, 수정 역시도 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> userName <span class=\"token operator\">=</span> <span class=\"token string\">'John'</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">showMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  userName <span class=\"token operator\">=</span> <span class=\"token string\">'Bob'</span> <span class=\"token comment\">// (1) 외부 변수를 수정함</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello, $(userName}</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>userName<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 함수 호출 전이므로 John 이 출력됨</span>\n\n<span class=\"token function\">showMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>userName<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 함수에 의해 Bob 으로 값이 바뀜</span></code></pre></div>\n<blockquote>\n<p>ℹ️ 전역 변수</p>\n<p>이러한 <code class=\"language-text\">userName</code> 과 같이 함수 외부에 선언된 변수는 전역 변수 (global variable) 라고 부르며, 이러한 전역 변수는 같은 이름을 가진 또 다른 지역 변수에 의해 변경되지 않는다면 모든 함수에서 접근할 수 있다.</p>\n</blockquote>\n<p>ㅤ</p>\n<h3 id=\"매개변수\" style=\"position:relative;\"><a href=\"#%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98\" aria-label=\"매개변수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>매개변수</h3>\n<p>매개변수(parameter)를 이용하면 임의의 데이터를 함수 안에 전달할 수 있다. 매개변수는 인수(argument)라고 불리기도 하는데 실제로는 같진 않지만, 일단 넘어간다.</p>\n<p>아래 예시는 <code class=\"language-text\">showMessage()</code> 함수에 매개변수 <code class=\"language-text\">from</code>과 <code class=\"language-text\">text</code>를 가지는 함수로 변경한 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">showMessage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token keyword\">from</span><span class=\"token punctuation\">,</span> text</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 인수: from, text</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">from</span> <span class=\"token operator\">+</span> <span class=\"token string\">': '</span> <span class=\"token operator\">+</span> text<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">showMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Ann'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Hello!'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Ann: Hello! (*)</span>\n<span class=\"token function\">showMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Ann'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"What's up?\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Ann: What's up? (**)</span></code></pre></div>\n<p>ㅤ</p>\n<h3 id=\"함수-이름-짓기\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98-%EC%9D%B4%EB%A6%84-%EC%A7%93%EA%B8%B0\" aria-label=\"함수 이름 짓기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수 이름 짓기</h3>\n<blockquote>\n<p>ℹ️ 함수는 동작 하나만 담당해야 한다.</p>\n<p>함수는 함수 이름에 언급되어 있는 동작을 정확히 수행해야하고 그 외의 동작은 수행해서는 안된다. 독립적인 두 개의 동작은 독립된 함수 두 개에서 나눠서 수행할 수 있게 해야 하고, 만약 두 동작을 필요로 하는 경우에는 제 3의 함수를 만들어 그 곳에서 두 함수를 호출한다.</p>\n<ul>\n<li><code class=\"language-text\">getAge</code> 함수는 나이를 얻어오는 동작만 수행해야 하는데, <code class=\"language-text\">alert</code> 창에 나이를 출력해주는 동작은 이 함수에 들어가지 않는 것이 좋다.</li>\n<li><code class=\"language-text\">createForm</code> 함수는 <code class=\"language-text\">form</code>을 만들고 이를 반환하는 동작만 수행 해야 하고, <code class=\"language-text\">form</code>을 문서에 추가하는 동작이 해당 함수에 들어가 있으면 좋지 않다.</li>\n</ul>\n</blockquote>\n<p>함수는 어떤 <code class=\"language-text\">동작</code>을 수행하기 위한 코드를 모아놓은 것으로 함수의 이름을 대개 동사입니다. 그렇기에 함수 이름은 가능한 한 간결하고 명확해야한다. 함수가 어떤 동작을 하는지 설명할 수 있어야하기 때문인데, 코드를 읽는 사람은 함수 이름만 보고도 함수가 어떤 기능을 하는지 힌트를 얻을 수 있어야한다.</p>\n<p>함수가 어떤 동작을 하는지 축약해서 설명해주는 동작을 접두어로 붙여 함수 이름을 만드는 게 관습이지만, 팀 내 합의된 접두어만 사용하는 것이 좋다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">showMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\">// 메시지를 보여줌</span>\n<span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span>          <span class=\"token comment\">// 나이를 나타내는 값을 얻고 그 값을 반환함</span>\n<span class=\"token function\">calcSum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span>         <span class=\"token comment\">// 합계를 계산하고 그 결과를 반환함</span>\n<span class=\"token function\">createForm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span>      <span class=\"token comment\">// form을 생성하고 만들어진 form을 반환함</span>\n<span class=\"token function\">checkPermission</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 승인 여부를 확인하고 true나 false를 반환함</span></code></pre></div>\n<p>ㅤ</p>\n<p>ㅤ</p>\n<h2 id=\"함수-표현식\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98-%ED%91%9C%ED%98%84%EC%8B%9D\" aria-label=\"함수 표현식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수 표현식</h2>\n<p>자바스크립트는 함수를 특별한 종류의 값으로 취급한다. 지금까지 배운 함수는 <code class=\"language-text\">함수 선언문</code> 방식으로 함수를 만들었지만, <code class=\"language-text\">함수 표현식</code> 방식도 존재한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 함수 선언문</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello!'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 함수 표현식</span>\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">sayHi</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello!'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>ㅤ</p>\n<h3 id=\"콜백-함수\" style=\"position:relative;\"><a href=\"#%EC%BD%9C%EB%B0%B1-%ED%95%A8%EC%88%98\" aria-label=\"콜백 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>콜백 함수</h3>\n<p>함수를 값처럼 전달하는 예시, 함수 표현식에 관한 예시를 조금 더 살펴보면 예로 매개변수가 3개가 있는 함수, <code class=\"language-text\">ask(question, yes, no)</code> 를 작성한다고 할 때 각 매개변수에 대한 설명은 다음과 같다.</p>\n<ul>\n<li><code class=\"language-text\">question</code> : 질문</li>\n<li><code class=\"language-text\">yes</code> : <code class=\"language-text\">yes</code>라고 대답한 경우 실행하는 함수</li>\n<li><code class=\"language-text\">no</code> : <code class=\"language-text\">no</code>라고 답한 경우 실행되는 함수</li>\n</ul>\n<p>함수는 반두시 <code class=\"language-text\">question</code>을 해야 하고, 사용자의 답변에 따라 <code class=\"language-text\">yes(), no()</code> 를 호출한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">ask</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">question<span class=\"token punctuation\">,</span> yes<span class=\"token punctuation\">,</span> no</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">confirm</span><span class=\"token punctuation\">(</span>question<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token function\">yes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">else</span> <span class=\"token function\">no</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">showOk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'동의하셨습니다.'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">showCancel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'취소 버튼을 누르셨습니다.'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 사용법: 함수 showOk와 showCancel가 ask 함수의 인수로 전달됨</span>\n<span class=\"token function\">ask</span><span class=\"token punctuation\">(</span><span class=\"token string\">'동의하십니까?'</span><span class=\"token punctuation\">,</span> showOk<span class=\"token punctuation\">,</span> showCancel<span class=\"token punctuation\">)</span></code></pre></div>\n<p>이런 함수 작성 방식은 실무에서 아주 유용하게 쓰이는데, 여기서 <code class=\"language-text\">ask</code>의 인수인, <code class=\"language-text\">showOk</code>와 <code class=\"language-text\">showCancel</code>를 <strong>콜백 함수</strong> 또는 <strong>콜백</strong> 이라고 부릅니다. 위 코드를 아래와 같이 짧게 만들 수도 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">ask</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">question<span class=\"token punctuation\">,</span> yes<span class=\"token punctuation\">,</span> no</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">confirm</span><span class=\"token punctuation\">(</span>question<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token function\">yes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">else</span> <span class=\"token function\">no</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">ask</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">'동의하십니까?'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'동의하셨습니다.'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'취소 버튼을 누르셨습니다.'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<blockquote>\n<p>ℹ️ 함수 선언문과 함수 표현식 중 무엇을 선택해야 하나요?</p>\n<p>저자의 경험에 따르면 함수 선언문을 이용해 함수 선언하는 걸 먼저 고려하는 게 좋다. 함수 선언문으로 함수를 정의하면, 함수가 선언되기 전에 호출할 수 있어서 코드 구성을 좀 더 자유롭게 할 수 있다. (실행 코드를 함수보다 위에 작성할 수 있다.)</p>\n<p>함수 선언문은 가독성 역시 좋은데, <code class=\"language-text\">let f = function(...) {...}</code> qㅗ다 <code class=\"language-text\">function f(...) {...}</code> 를 찾는 게 더 쉽다.</p>\n</blockquote>\n<p>ㅤ</p>\n<p>ㅤ</p>\n<h2 id=\"화살표-함수-기초\" style=\"position:relative;\"><a href=\"#%ED%99%94%EC%82%B4%ED%91%9C-%ED%95%A8%EC%88%98-%EA%B8%B0%EC%B4%88\" aria-label=\"화살표 함수 기초 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>화살표 함수 기초</h2>\n<blockquote>\n<p>python의 lambda 같은건가..</p>\n</blockquote>\n<p>함수 표현식보다 더 단순하고 간결한 문법으로 함수를 만들 수 있는 방법이 있는데, 바로 화살표 함수 (arrow function)을 사용하는 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">func</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">arg1<span class=\"token punctuation\">,</span> arg2<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> expression</code></pre></div>\n<p>화살표 함수는 아래와 같은 방법으로도 사용할 수 있다. 하지만 처음 접하거나 익숙하지 않은 개발자에게는 가독성이 매우 떨어진다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> age <span class=\"token operator\">=</span> <span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'나이를 알려주세요.'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">let</span> welcome <span class=\"token operator\">=</span> age <span class=\"token operator\">&lt;</span> <span class=\"token number\">18</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'안녕'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'안녕하세요!'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">welcome</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>ㅤ</p>\n<h3 id=\"본문이-여러-줄인-화살표-함수\" style=\"position:relative;\"><a href=\"#%EB%B3%B8%EB%AC%B8%EC%9D%B4-%EC%97%AC%EB%9F%AC-%EC%A4%84%EC%9D%B8-%ED%99%94%EC%82%B4%ED%91%9C-%ED%95%A8%EC%88%98\" aria-label=\"본문이 여러 줄인 화살표 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>본문이 여러 줄인 화살표 함수</h3>\n<p>위에서 사용한 화살표 함수들은 주로 한 줄로 작성되어 하나의 표현식을 사용하는 함수들이었는데, 만약에 표현식이나 구문이 여러 개인 함수가 있을 수 있다면, 어떻게 해야할까? 이 경우 역시 화살표 함수 문법을 사용해 함수를 만들 수 있는데, 다만 중괄호 안에 코드를 넣어줘야하고 <code class=\"language-text\">return</code> 지시자를 사용해 명시적으로 결과값을 반환해 주어야한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">sum</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> b\n  <span class=\"token keyword\">return</span> result\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"배열\" style=\"position:relative;\"><a href=\"#%EB%B0%B0%EC%97%B4\" aria-label=\"배열 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>배열</h2>\n<p>키를 사용해 식별할 수 있는 값을 담은 컬렉션은 주로 객체라는 자료구조를 이용해 저장하는데, 객체만으로도 충분히 다양한 작업을 할 수 있다. 하지만 개발을 하다보면 첫 번째 요소, 두 번째 요소, .. 등과 같이 순서가 있는 컬렉션이 필요 할 때가 생긴다. 사용자나 물건, HTML 요소 목록 같이 순서를 만들어 정렬하기 위해서 필요하다.</p>\n<p>순서가 있는 컬렉션을 다뤄야할 때 객체를 사용하면 순서와 관련된 메서드가 없어 그다지 편리하지 않다. 객체는 태생이 순서를 고려하지 않고 만들어진 자료 구조이기 때문에 객체를 이용하여 새로운 프로퍼티를 기존 프로퍼티 사이에 끼워 넣는 것도 불가능하다.</p>\n<p>ㅤ</p>\n<h3 id=\"배열-선언\" style=\"position:relative;\"><a href=\"#%EB%B0%B0%EC%97%B4-%EC%84%A0%EC%96%B8\" aria-label=\"배열 선언 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>배열 선언</h3>\n<ul>\n<li>배열은 길이의 제약이 없는 자료구조로 추가하고 싶다면, 언제든지 데이터를 추가할 수 있다.</li>\n<li>자료형에 제약이 없어, 배열 내부에 여러가지 자료형이 포함될 수 있다.\n<code class=\"language-text\">ex) [String, Function, Integer, Object]</code></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'사과'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'오렌지'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'자두'</span><span class=\"token punctuation\">]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 사과 - 인덱스는 0부터 시작</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 오렌지</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 자두</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 배열 추가</span>\nfruits<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'레몬'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 레몬</span>\n\n<span class=\"token comment\">// length</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 3</span></code></pre></div>\n<p>ㅤ</p>\n<h3 id=\"pop-push와-shift-unshift\" style=\"position:relative;\"><a href=\"#pop-push%EC%99%80-shift-unshift\" aria-label=\"pop push와 shift unshift permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>pop-push와 shift-unshift</h3>\n<p>자료구조 <a href=\"https://en.wikipedia.org/wiki/Queue_(abstract_data_type)\">큐(queue)</a>는 배열을 사용해 만들 수 있는 대표적인 자료구조로, 배열과 마찬가지로 순서가 있는 컬렉션을 저장하는 데 사용한다. 큐에서 사용하는 주요 연산은 다음과 같다.</p>\n<ul>\n<li><code class=\"language-text\">push</code> : 맨 끝에 요소를 추가</li>\n<li><code class=\"language-text\">shift</code> : 제일 앞 요소를 꺼내 제거한 후 남아있는 요소들을 앞으로 밀어준다. 두 번째 요소가 첫 번째 요소가 된다.</li>\n</ul>\n<p>배열엔 두 연산을 가능케 해주는 내장 메서드인 <code class=\"language-text\">push</code> 와 <code class=\"language-text\">pop</code> 이 있다. 화면에 순차적으로 띄울 메시지를 비축해 놓을 자료 구조를 만들 때 큐를 사용하는 것처럼 큐는 실무에서 상당히 자주 쓰이는 자료구조입니다. 이런 배열은 큐 이외에 <a href=\"https://en.wikipedia.org/wiki/Stack_(abstract_data_type)\">스택(stack)</a>이라 불리는 자료구조를 구현할 때에도 사용한다.</p>\n<ul>\n<li><code class=\"language-text\">push</code> : 요소를 스택 끝에 집어 넣는다.</li>\n<li><code class=\"language-text\">pop</code> : 스택 끝 요소를 추출한다.</li>\n</ul>\n<p>스택을 사용하면 가장 나중에 집어넣은 요소가 먼저 나오는데, 이런 특징을 줄여서 후입선출(LIFO)라고 부르고, 반대로 큐를 사용하면 먼저 집어 넣은 요소가 먼저 나오기 때문에 선입선출(FIFO) 자료구조라 부른다.</p>\n<p>이렇게 처음이나 끝에 요소를 더하거나 빼주는 연산을 하는 자료구조를 컴퓨터 과학 분야에서는 <strong>deque</strong>라고 부른다.</p>\n<blockquote>\n<p>ℹ️ 배열은 객체이므로 원하는 프로퍼티를 추가해도 문제가 발생하지 않는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\nfruits<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">25</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 25</span></code></pre></div>\n</blockquote>\n<p>ㅤ</p>\n<h3 id=\"반복문\" style=\"position:relative;\"><a href=\"#%EB%B0%98%EB%B3%B5%EB%AC%B8\" aria-label=\"반복문 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>반복문</h3>\n<p><code class=\"language-text\">for</code>문은 배열을 순회할 때 쓰는 가장 오래된 방법이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// index를 사용하는 방법</span>\n<span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"사과\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"오렌지\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"배\"</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// for..of를 사용하는 방법</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> fruit <span class=\"token keyword\">of</span> fruits<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> fruit <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>ㅤ</p>\n<p>ㅤ</p>\n<h2 id=\"배열과-메서드\" style=\"position:relative;\"><a href=\"#%EB%B0%B0%EC%97%B4%EA%B3%BC-%EB%A9%94%EC%84%9C%EB%93%9C\" aria-label=\"배열과 메서드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>배열과 메서드</h2>\n<p>배열은 이전에 공부한 <code class=\"language-text\">push</code>, <code class=\"language-text\">pop</code>, <code class=\"language-text\">shift</code>, <code class=\"language-text\">unshift</code>를 제외하고 다양한 메서드를 지원한다.</p>\n<h3 id=\"splice\" style=\"position:relative;\"><a href=\"#splice\" aria-label=\"splice permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>splice</h3>\n<p>배열을 이용하다보면, 배열의 요소를 하나만 지우고 싶을 때가 있는데, <code class=\"language-text\">delete</code>를 사용하는 방법이 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'this'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'is'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'array'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">delete</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// undefined ? 지워진 자리에 알아서 채워지진 않는다.</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 3</span></code></pre></div>\n<p><code class=\"language-text\">delete</code>를 사용하게 되면 위에서 처럼 기존에 자리를 그대로 차지하고 있는 문제가 있다. 지우면 알아서 그 뒤에 있던 요소가 앞으로 오면서 자리를 차지하는 것이 아니다. 이럴 때에는 <code class=\"language-text\">splice</code> 메서드를 사용하면 된다. 문법은 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">arr<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> deleteCount<span class=\"token punctuation\">,</span> elem1<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span> elemN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">index</code>: 조작을 가할 첫 번째 요소</li>\n<li><code class=\"language-text\">deleteCount</code>: 제거하고자 하는 요소의 개수</li>\n<li><code class=\"language-text\">elem1, ..., elemN</code>: 배열에 추가할 요소</li>\n</ul>\n<p>예시</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'I'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'study'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'JavaScript'</span><span class=\"token punctuation\">]</span>\n\narr<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\"I\", \"JavaScript\"]</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'I'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'study'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'JavaScript'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'right'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'now'</span><span class=\"token punctuation\">]</span>\n\narr<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Let's\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'dance'</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token comment\">// now [\"Let's\", \"dance\", \"right\", \"now\"]</span></code></pre></div>\n<p>이렇듯 삭제할 첫 번째 요소부터 제거하고자 하는 요소의 개수를 지정하면 해당 요소들은 제거하고, 추가하는 것 역시 가능하다. 또한, <code class=\"language-text\">splice</code> 된 데이터는 다른 배열 객체로 반환되기도 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'I'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'study'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'JavaScript'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'right'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'now'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">let</span> removed <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>removed<span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"I\", \"study\"</span></code></pre></div>\n<p>ㅤ</p>\n<h3 id=\"slice\" style=\"position:relative;\"><a href=\"#slice\" aria-label=\"slice permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>slice</h3>\n<p><code class=\"language-text\">arr.slice</code>는 <code class=\"language-text\">arr.splice</code>와 유사해 보이지만 훨씬 간단하다. 문법을 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">arr<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">slice</code> 메서드는 <code class=\"language-text\">start</code> 인덱스부터 <code class=\"language-text\">end</code> 를 제외한 인덱스까지의 요소를 복사한 새로운 배열을 반환한다. <code class=\"language-text\">start</code>와 <code class=\"language-text\">end</code>는 둘 다 음수일 수 있다.</p>\n<p>예시 :</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'t'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'e'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'s'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'t'</span><span class=\"token punctuation\">]</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// e, s</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// s, t</span></code></pre></div>\n<p>ㅤ</p>\n<h3 id=\"concat\" style=\"position:relative;\"><a href=\"#concat\" aria-label=\"concat permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>concat</h3>\n<p><code class=\"language-text\">arr.concat</code>은 기존 배열의 요소를 사용해 새로운 배열을 만들거나 기존 배열에 요소를 추가하고자 할 때 사용할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">arr<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>arg1<span class=\"token punctuation\">,</span> arg2<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>인수에는 배열이나 값이 올 수 있는데, 개수에는 제한이 없다. 메서드를 호출하면 <code class=\"language-text\">arr</code>에 속한 모든 요소와 <code class=\"language-text\">arg1, arg2, ...</code>에 속한 모든 요소들 한데 모은 새로운 배열이 반환된다.</p>\n<p>예시 :</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1,2,3,4</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1,2,3,4,5,6</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1,2,3,4,5,6</span></code></pre></div>\n<p><code class=\"language-text\">concat</code> 메서드는 제공받은 배열의 요소를 복사해 활용하는데, 객체가 인자로 넘어오면, 객체는 분해되지 않고 통으로 복사되어 더해진다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">let</span> arrayLike <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token number\">0</span><span class=\"token operator\">:</span> <span class=\"token string\">'something'</span><span class=\"token punctuation\">,</span>\n  length<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>arrayLike<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1,2,[object Object]</span></code></pre></div>\n<p>ㅤ</p>\n<h3 id=\"foreach로-반복작업-하기\" style=\"position:relative;\"><a href=\"#foreach%EB%A1%9C-%EB%B0%98%EB%B3%B5%EC%9E%91%EC%97%85-%ED%95%98%EA%B8%B0\" aria-label=\"foreach로 반복작업 하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>forEach로 반복작업 하기</h3>\n<p><code class=\"language-text\">arr.forEach</code>는 주어진 함수를 배열 요소 각각에 대해 실행할 수 있게 해준다.</p>\n<p>문법 :</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">arr<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> array</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 요소에 무언가를 할 수 있습니다.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>예시 :</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// for each element call alert</span>\n<span class=\"token punctuation\">;</span><span class=\"token punctuation\">[</span><span class=\"token string\">'Bilbo'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Gandalf'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Nazgul'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>alert<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// for each element call alert with more informations e.g index</span>\n<span class=\"token punctuation\">;</span><span class=\"token punctuation\">[</span><span class=\"token string\">'Bilbo'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Gandalf'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Nazgul'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> array</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>item<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> is at index </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>index<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> in </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>array<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// ${item} : 요소 값 / ${index} : 인덱스 / ${array} : 배열 전체</span></code></pre></div>\n<p>ㅤ</p>\n<h3 id=\"배열-탐색하기\" style=\"position:relative;\"><a href=\"#%EB%B0%B0%EC%97%B4-%ED%83%90%EC%83%89%ED%95%98%EA%B8%B0\" aria-label=\"배열 탐색하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>배열 탐색하기</h3>\n<h4 id=\"indexof-lastindexof-와-includes\" style=\"position:relative;\"><a href=\"#indexof-lastindexof-%EC%99%80-includes\" aria-label=\"indexof lastindexof 와 includes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>indexOf, lastIndexOf 와 includes</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// -1</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></code></pre></div>\n<h4 id=\"find-와-findindex\" style=\"position:relative;\"><a href=\"#find-%EC%99%80-findindex\" aria-label=\"find 와 findindex permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>find 와 findIndex</h4>\n<p>객체로 이루어진 배열이 있다고 가정할 때, 특정 조건에 부합하는 객체를 배열 내에서 찾을 수 있는 메서드로 <code class=\"language-text\">arr.find(fn)</code> 이 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// arr.find(fn)</span>\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> array</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// true가 반환되면 반복이 멈추고 해당 요소를 반환합니다.</span>\n  <span class=\"token comment\">// 조건에 해당하는 요소가 없으면 undefined를 반환합니다.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> users <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'John'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Pete'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Mary'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Jery'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> users<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> array</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'J'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span> <span class=\"token comment\">// {id: 1, name: \"John\"}</span></code></pre></div>\n<h4 id=\"filter\" style=\"position:relative;\"><a href=\"#filter\" aria-label=\"filter permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>filter</h4>\n<p><code class=\"language-text\">find</code> 메서드는 함수의 반환 값이 <code class=\"language-text\">true</code>인 <u>단 하나</u>의 원소를 찾는 반면, 조건을 충족하는 요소가 여러 개일 때, 모두 반환하는 <code class=\"language-text\">arr.filter(fn)</code>이 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> users <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'John'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Pete'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Mary'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Jery'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">let</span> j_user <span class=\"token operator\">=</span> users<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> array</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'J'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>j_user<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [{id: 1, name: \"John\"}, {id: 4, name: \"Jery\"}]</span></code></pre></div>\n<p>ㅤ</p>\n<h3 id=\"배열을-변형하는-메서드\" style=\"position:relative;\"><a href=\"#%EB%B0%B0%EC%97%B4%EC%9D%84-%EB%B3%80%ED%98%95%ED%95%98%EB%8A%94-%EB%A9%94%EC%84%9C%EB%93%9C\" aria-label=\"배열을 변형하는 메서드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>배열을 변형하는 메서드</h3>\n<p>배열을 변형시키거나 요소를 재정렬해주는 메서드에 대해 알아본다.</p>\n<h4 id=\"map\" style=\"position:relative;\"><a href=\"#map\" aria-label=\"map permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>map</h4>\n<p><code class=\"language-text\">arr.map</code>은 유용성과 사용 빈도가 아주 높은 메서드 중 하나로 배열 요소 전체를 대상으로 함수를 호출하고, 함수 호출 결과를 배열로 반환해준다.</p>\n<p>문법:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> array</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 요소 대신 새로운 값을 반환합니다.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>예시:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> lenghts <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Bilbo'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Gandalf'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Nazgul'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> item<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>lengths<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 5, 7, 6</span></code></pre></div>\n<h4 id=\"sortfn\" style=\"position:relative;\"><a href=\"#sortfn\" aria-label=\"sortfn permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>sort(fn)</h4>\n<p><code class=\"language-text\">arr.sort(fn)</code>은 배열의 요소를 정렬해주고, 배열 자체가 변경된다는 주요점이 있다. 메서드를 호출하면 재정렬된 배열을 반환하는데, 이미 <code class=\"language-text\">arr</code> 자체가 수정되었기 때문에 반환 값을 잘 사용되지 않는다.</p>\n<p>예시:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1, 15, 2</span></code></pre></div>\n<p>예시를 보면 <code class=\"language-text\">sort()</code> 했는데도 불구하고 <code class=\"language-text\">1, 2, 15</code> 가 아닌 <code class=\"language-text\">1, 15, 2</code> 로 변형되었는데, 이는 문자열로 취급되어 재정렬되었기 때문이다. 이는 아래처럼 변경 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// compareNumeric 함수를 만들어 사용하는 방법</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">compareNumeric</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">></span> b<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> b<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>compareNumeric<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 간결한 방법</span>\n<span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">]</span>\n\narr<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">-</span> b\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h4 id=\"reverse\" style=\"position:relative;\"><a href=\"#reverse\" aria-label=\"reverse permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>reverse</h4>\n<p><code class=\"language-text\">arr.reverse</code> 는 <code class=\"language-text\">arr</code>의 요소를 역순으로 정렬 시켜주는 메서드다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [5, 4, 3, 2, 1]</span></code></pre></div>\n<h4 id=\"split과-join\" style=\"position:relative;\"><a href=\"#split%EA%B3%BC-join\" aria-label=\"split과 join permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>split과 join</h4>\n<p>메시지 전송 어플리케이션을 만들고 있다고 가정할 때, 수신자가 여러 명일 경우 발신자는 쉼표로 각 수신자를 구분한다. 예를 들어 <code class=\"language-text\">John, Pete, Mary</code> 같이, 개발자는 긴 문자열 형태의 수신자 리스트를 배열 형태로 전환해 처리하고 싶을텐데, 입력받은 문자열을 어떻게 배열로 바꿀 수 있을까?</p>\n<p><code class=\"language-text\">str.split(delim)</code> 은 구분자(delimiter) 를 기준으로 문자열을 쪼개준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> names <span class=\"token operator\">=</span> <span class=\"token string\">'Bilbo, Gandalf, Nazgul'</span>\n<span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> names<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">', '</span><span class=\"token punctuation\">)</span>\n\narr<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>alert<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Bilbo, Gandalf, Nazgul</span></code></pre></div>\n<p><code class=\"language-text\">split</code> 메서드는 두 번 째 인수로 숫자를 받을 수 있는데, 배열의 길이를 제한해주어 길이를 넘어서는 요소는 무시한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> names <span class=\"token operator\">=</span> <span class=\"token string\">'Bilbo, Gandalf, Nazgul'</span>\n<span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> names<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">', '</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\narr<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>alert<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Bilbo, Gandalf</span></code></pre></div>\n<blockquote>\n<p>ℹ️ 문자열을 글자 단위로 분리하기</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'test'</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// t,e,s,t</span></code></pre></div>\n</blockquote>\n<h4 id=\"reduce와-reduceright\" style=\"position:relative;\"><a href=\"#reduce%EC%99%80-reduceright\" aria-label=\"reduce와 reduceright permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>reduce와 reduceRight</h4>\n<p><code class=\"language-text\">forEach</code>, <code class=\"language-text\">for</code>, <code class=\"language-text\">for...of</code> 를 사용하면 배열 내 요소를 대상으로 반복 작업을 할 수 있고, 이런 반복 작업을 수행하고 결과물을 새로운 배열 형태로 얻으려면 <code class=\"language-text\">map</code>을 사용하면 된다. 이런 작업을 하는 유사한 메서드가 있는데, 바로 <code class=\"language-text\">arr.reduce</code> 와 <code class=\"language-text\">arr.reduceRight</code> 이다.</p>\n<p>문법 :</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">accumulator<span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> array</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span>initial<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">accumulator</code> : 이전 함수 호출의 결과 <code class=\"language-text\">initial</code>은 함수 최초 호출 시 사용되는 초기값을 나타냄 (옵션)</li>\n<li><code class=\"language-text\">item, index, array</code> : 동일</li>\n</ul>\n<p>이전 함수 호출 결과는 다음 함수를 호출 시 첫 번째 인수(<code class=\"language-text\">previousValue</code>)로 사용된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">sum<span class=\"token punctuation\">,</span> current</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> sum <span class=\"token operator\">+</span> current<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 15</span></code></pre></div>\n<p>일종에 <code class=\"language-text\">accumulator</code>는 앞서 호출했던 결과들이 누적되어 저장되는 <strong>누산기</strong>라고 생각하면 되는데, 마지막까지 호출되면 <code class=\"language-text\">reduce</code>의 반환값이 된다.</p>\n<p>ㅤ</p>\n<h3 id=\"arrayisarray로-배열-여부-알아내기\" style=\"position:relative;\"><a href=\"#arrayisarray%EB%A1%9C-%EB%B0%B0%EC%97%B4-%EC%97%AC%EB%B6%80-%EC%95%8C%EC%95%84%EB%82%B4%EA%B8%B0\" aria-label=\"arrayisarray로 배열 여부 알아내기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Array.isArray로 배열 여부 알아내기</h3>\n<p>자바스크립트에서 배열은 독립된 자료형으로 취급되지 않고 객체형에 속하기 때문에 일반적인 <code class=\"language-text\">typeof</code>로는 일반 객체와 배열을 구분할 수가 없다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// object</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// object</span></code></pre></div>\n<p>그래서 배열은 배열인지 아닌지를 감별해내는 특별한 메서드가 있는데, 바로 <code class=\"language-text\">Array.isArray(value)</code> 라는 메서드가 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></code></pre></div>\n<h2 id=\"맵-map\" style=\"position:relative;\"><a href=\"#%EB%A7%B5-map\" aria-label=\"맵 map permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>맵 (map)</h2>\n<p><code class=\"language-text\">map</code>은 키가 있는 데이터를 저장한다는 점에서 <code class=\"language-text\">객체</code>와 유사하다. 하지만 <code class=\"language-text\">map</code>은 키에 다양한 자료형을 허용한다는 점에서 차이가 있다. 맵의 주요 메서드와 프로퍼티를 살펴보면 다음과 같다.</p>\n<ul>\n<li><code class=\"language-text\">new Map()</code></li>\n<li><code class=\"language-text\">map.set(key, value)</code> : <code class=\"language-text\">key</code>를 이용해 <code class=\"language-text\">value</code>를 저장</li>\n<li><code class=\"language-text\">map.get(key)</code> : <code class=\"language-text\">key</code>에 해당하는 값을 반환. <code class=\"language-text\">key</code>가 존재하지 않으면, <code class=\"language-text\">undefined</code>를 반환한다.</li>\n<li><code class=\"language-text\">map.has(key)</code> : <code class=\"language-text\">key</code>가 존재하면 <code class=\"language-text\">true</code>, 존재하지 않는다면 <code class=\"language-text\">false</code>를 반환한다.</li>\n<li><code class=\"language-text\">map.delete(key)</code> : <code class=\"language-text\">key</code> 제거</li>\n<li><code class=\"language-text\">map.clear</code> : 맵 안의 모든 요소를 제거한다.</li>\n<li><code class=\"language-text\">map.size</code></li>\n</ul>\n<p>예시 :</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nmap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'str1'</span><span class=\"token punctuation\">)</span>\nmap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'num1'</span><span class=\"token punctuation\">)</span>\nmap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bool1'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// num1</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// str1</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 3</span></code></pre></div>\n<blockquote>\n<p>ℹ️ <code class=\"language-text\">map[key]</code>는 <code class=\"language-text\">Map</code>을 쓰는 올바른 방법이 아니다.</p>\n<p><code class=\"language-text\">map[key] = 2</code>로 값을 설정하는 것과 같이 <code class=\"language-text\">map[key]</code>를 사용할 수 있다. 하지만 이 방법은 <code class=\"language-text\">map</code>을 일반 객체처럼 취급하기 때문에 개발자로 하여금 혼란스러울 수 있으니, <code class=\"language-text\">set</code>과 <code class=\"language-text\">get</code>를 사용하자.</p>\n</blockquote>\n<h4 id=\"맵은-객체-또한-키로-허용한다\" style=\"position:relative;\"><a href=\"#%EB%A7%B5%EC%9D%80-%EA%B0%9D%EC%B2%B4-%EB%98%90%ED%95%9C-%ED%82%A4%EB%A1%9C-%ED%97%88%EC%9A%A9%ED%95%9C%EB%8B%A4\" aria-label=\"맵은 객체 또한 키로 허용한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>맵은 객체 또한 키로 허용한다.</h4>\n<p>예시 :</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> john <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"John\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> visitsCountMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nvisitsCountMap<span class=\"token punctuation\">[</span>john<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span> visitsCountMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>john<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 123</span></code></pre></div>\n<p>객체를 키로 사용할 수 있다는 점은 <code class=\"language-text\">map</code>의 가장 중요한 기능 중 하나이다.</p>\n<p>ㅤ</p>\n<h3 id=\"맵의-요소에-반복-작업하기\" style=\"position:relative;\"><a href=\"#%EB%A7%B5%EC%9D%98-%EC%9A%94%EC%86%8C%EC%97%90-%EB%B0%98%EB%B3%B5-%EC%9E%91%EC%97%85%ED%95%98%EA%B8%B0\" aria-label=\"맵의 요소에 반복 작업하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>맵의 요소에 반복 작업하기</h3>\n<p>다음 <code class=\"language-text\">map</code>의 메서드는 각 요소에 반복 작업을 할 수 있게 해준다.</p>\n<ul>\n<li><code class=\"language-text\">map.keys()</code> : 각 요소의 키를 모은 반복 가능한(iterable) 객체를 반환한다.</li>\n<li><code class=\"language-text\">map.values()</code> : 각 요소의 값을 모은 이터러블 객체를 반환한다.</li>\n<li><code class=\"language-text\">map.entries()</code> : 요소의 <code class=\"language-text\">[키, 값]</code> 을 한 쌍으로 하는 이터러블 객체를 반환하고, 이 객체는 <code class=\"language-text\">for..of</code> 반복문의 기초로 쓰인다.</li>\n</ul>\n<p>예시 :</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> recipeMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">'cucumber'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">'tomatoes'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">350</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">'onion'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> vegetable <span class=\"token keyword\">of</span> recipeMap<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>vegetable<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> amount <span class=\"token keyword\">of</span> recipeMap<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>amount<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> entry <span class=\"token keyword\">of</span> recipeMap<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> entry <span class=\"token keyword\">of</span> recipeMap<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> vegetable <span class=\"token operator\">=</span> entry<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">let</span> amount <span class=\"token operator\">=</span> entry<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>vegetable<span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>여기에 <code class=\"language-text\">map</code>은 <code class=\"language-text\">array</code>와 유사하게 내장 메서드인 <code class=\"language-text\">forEach</code>도 지원한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">Map<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> map</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>key<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>value<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>ㅤ</p>\n<h3 id=\"객체를-맵으로-맵을-객체로-바꾸기\" style=\"position:relative;\"><a href=\"#%EA%B0%9D%EC%B2%B4%EB%A5%BC-%EB%A7%B5%EC%9C%BC%EB%A1%9C-%EB%A7%B5%EC%9D%84-%EA%B0%9D%EC%B2%B4%EB%A1%9C-%EB%B0%94%EA%BE%B8%EA%B8%B0\" aria-label=\"객체를 맵으로 맵을 객체로 바꾸기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>객체를 맵으로, 맵을 객체로 바꾸기</h3>\n<h4 id=\"objectentries--객체를-맵으로-바꾸기\" style=\"position:relative;\"><a href=\"#objectentries--%EA%B0%9D%EC%B2%B4%EB%A5%BC-%EB%A7%B5%EC%9C%BC%EB%A1%9C-%EB%B0%94%EA%BE%B8%EA%B8%B0\" aria-label=\"objectentries  객체를 맵으로 바꾸기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Object.entries : 객체를 맵으로 바꾸기</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'John'</span><span class=\"token punctuation\">,</span>\n  age<span class=\"token operator\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// John</span></code></pre></div>\n<h4 id=\"objectfromentries--맵을-객체로-바꾸기\" style=\"position:relative;\"><a href=\"#objectfromentries--%EB%A7%B5%EC%9D%84-%EA%B0%9D%EC%B2%B4%EB%A1%9C-%EB%B0%94%EA%BE%B8%EA%B8%B0\" aria-label=\"objectfromentries  맵을 객체로 바꾸기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Object.fromEntries : 맵을 객체로 바꾸기</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> prices <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">fromEntries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">'banana'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">'orange'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">'meat'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>prices<span class=\"token punctuation\">.</span>orange<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2</span></code></pre></div>\n<p>ㅤ</p>\n<p>ㅤ</p>\n<h2 id=\"셋-set\" style=\"position:relative;\"><a href=\"#%EC%85%8B-set\" aria-label=\"셋 set permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>셋 (set)</h2>\n<p><code class=\"language-text\">set</code> 은 중복을 허용하지 않는 값을 모아놓은 특별한 컬렉션으로 키가 없는 값이 저장된다.</p>\n<ul>\n<li><code class=\"language-text\">new Set(iterable)</code></li>\n<li><code class=\"language-text\">set.add(value)</code></li>\n<li><code class=\"language-text\">set.delete(value)</code></li>\n<li><code class=\"language-text\">set.has(value)</code></li>\n<li><code class=\"language-text\">set.clear()</code></li>\n<li><code class=\"language-text\">set.size()</code></li>\n</ul>\n<p>셋 내 동일한 값이 있다면, <code class=\"language-text\">set.add(value)</code>를 아무리 호출하더라도 아무런 반응이 없을 것이다. 셋 내의 값에는 중복값이 허용되지 않기 때문인데, 예를 들어 방문자 방명록을 만든다고 가정하자. 한 방문자가 여러 번 방문해도 방문자를 중복해서 기록하지 않겠다고 결정한 상황이다.</p>\n<p>예시 :</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> visitors <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">let</span> john <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'John'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> pete <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Pete'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> mary <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Mary'</span> <span class=\"token punctuation\">}</span>\n\nvisitors<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>john<span class=\"token punctuation\">)</span>\nvisitors<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>pete<span class=\"token punctuation\">)</span>\nvisitors<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>mary<span class=\"token punctuation\">)</span>\nvisitors<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>john<span class=\"token punctuation\">)</span>\nvisitors<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>mary<span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>visitors<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 3</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> user <span class=\"token keyword\">of</span> visitors<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>ㅤ</p>\n<h3 id=\"set의-값에-반복-작업하기\" style=\"position:relative;\"><a href=\"#set%EC%9D%98-%EA%B0%92%EC%97%90-%EB%B0%98%EB%B3%B5-%EC%9E%91%EC%97%85%ED%95%98%EA%B8%B0\" aria-label=\"set의 값에 반복 작업하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Set의 값에 반복 작업하기</h3>\n<p><code class=\"language-text\">for...of</code> 나 <code class=\"language-text\">forEach</code> 를 사용하면 <code class=\"language-text\">set</code>의 값을 대상으로 반복 작업을 수행할 수 있다..</p>\n<p>예시 :</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> fruits <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'Orange'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Apple'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Banana'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> fruit <span class=\"token keyword\">of</span> fruits<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fruit<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nfruits<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">/*\nfruits.forEach((value, valueAgain, set) => {\n\talert(value);\n});\n*/</span></code></pre></div>\n<p><code class=\"language-text\">set</code>에도 <code class=\"language-text\">map</code>과 마찬가지로 반복 작업을 위한 메서드가 존재한다.</p>\n<ul>\n<li><code class=\"language-text\">set.keys()</code> / <code class=\"language-text\">set.values()</code> / <code class=\"language-text\">set.entries()</code> : <code class=\"language-text\">map</code>과 동일하다.</li>\n</ul>\n<h2 id=\"객체-objects\" style=\"position:relative;\"><a href=\"#%EA%B0%9D%EC%B2%B4-objects\" aria-label=\"객체 objects permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>객체 (Objects)</h2>\n<p>자료형 챕터에서 배웠던 여덟 가지 자료형 중 일곱 가지는 오직 하나의 데이터(문자열, 숫자 등)만 담을 수 있어 ‘원시형 (primitive type)‘이라 부른다. 그러나 객체형은 원시형과 달리 다양한 데이터를 담을 수 있습니다. 키로 구분된 데이터 집합이나 복잡한 개체(entity)를 저장할 수 있다. 객체는 자바스크립트 거의 모든 면에 녹아있는 개념으로 자바스크립트를 잘 다루려면 객체를 잘 이해해야한다.</p>\n<p>객체는 중괄호 <code class=\"language-text\">{...}</code> 을 이용해 만들 수 있고 중괄호 안에는 <code class=\"language-text\">키(key) : 값(value)</code> 쌍을 구성된 프로퍼티(property) 를 여러 개 넣을 수 있는데, <code class=\"language-text\">키</code>엔 문자형 <code class=\"language-text\">값</code>엔 모든 자료형이 허용된다. 프로퍼티 키는 <code class=\"language-text\">프로퍼티 이름</code>이라고도 부른다.</p>\n<p>빈 객체를 만드는 방법 두 가지</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>중괄호 <code class=\"language-text\">{...}</code> 을 이용해 객체를 선언하는 것을 객체 리터럴(object literal) 이라고 부르고 주로 이 방법을 사용합니다.</p>\n<p>ㅤ</p>\n<h3 id=\"리터럴literal-과-프로퍼티property\" style=\"position:relative;\"><a href=\"#%EB%A6%AC%ED%84%B0%EB%9F%B4literal-%EA%B3%BC-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0property\" aria-label=\"리터럴literal 과 프로퍼티property permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>리터럴(literal) 과 프로퍼티(property)</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'John'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 첫 번째 프로퍼티, 키: \"name\", 값: \"John\"</span>\n  age<span class=\"token operator\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 두 번째 프로퍼티, 키: \"age\", 값: 30</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>프로퍼티 값엔 모든 자료형이 올 수 있고, 언제든지 값을 추가하고 삭제 할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// add</span>\nuser<span class=\"token punctuation\">.</span>isAdmin <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n<span class=\"token comment\">// delete</span>\n<span class=\"token keyword\">delete</span> user<span class=\"token punctuation\">.</span>age</code></pre></div>\n<p>ㅤ</p>\n<h3 id=\"대괄호-표기법\" style=\"position:relative;\"><a href=\"#%EB%8C%80%EA%B4%84%ED%98%B8-%ED%91%9C%EA%B8%B0%EB%B2%95\" aria-label=\"대괄호 표기법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>대괄호 표기법</h3>\n<p>여러 단어를 조합해 프로퍼티 키를 만든 경우엔, 점 표기법을 사용해 프로퍼티 값을 읽을 수 없습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"User Name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">alert</span> <span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>User Name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 문법 에러</span></code></pre></div>\n<p>그럴 때를 대비하여 대괄호 표기법을 이용하여 값을 참조할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">user<span class=\"token punctuation\">[</span><span class=\"token string\">'User Name'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'Mike'</span></code></pre></div>\n<h4 id=\"계산된-프로퍼티\" style=\"position:relative;\"><a href=\"#%EA%B3%84%EC%82%B0%EB%90%9C-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0\" aria-label=\"계산된 프로퍼티 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>계산된 프로퍼티</h4>\n<p>객체를 만들 때 객체 리터럴 안의 프로퍼티 키가 대괄호로 둘러싸여 있는 경우, 이를 계산된 프로퍼티(computed property) 라고 부릅니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> fruit <span class=\"token operator\">=</span> <span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'어떤 과일을 구매하시겠습니까?'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'apple'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> bag <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>fruit<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 변수 fruit에서 프로퍼티 이름을 동적으로 받아 옵니다.</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>bag<span class=\"token punctuation\">.</span>apple<span class=\"token punctuation\">)</span> <span class=\"token comment\">// fruit에 \"apple\"이 할당되었다면, 5가 출력됩니다.</span></code></pre></div>\n<p>ㅤ</p>\n<h3 id=\"단축-프로퍼티\" style=\"position:relative;\"><a href=\"#%EB%8B%A8%EC%B6%95-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0\" aria-label=\"단축 프로퍼티 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>단축 프로퍼티</h3>\n<p>실무에서는 프로퍼티 값을 기존 변수에서 받아와 사용하는 경우가 종종 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">makeUser</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token operator\">:</span> name<span class=\"token punctuation\">,</span>\n    age<span class=\"token punctuation\">,</span> <span class=\"token comment\">// age: age</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token function\">makeUser</span><span class=\"token punctuation\">(</span><span class=\"token string\">'John'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span></code></pre></div>\n<p>ㅤ</p>\n<h3 id=\"code-classlanguage-textincode-연산자로-프로퍼티-존재-여부-확인하기\" style=\"position:relative;\"><a href=\"#code-classlanguage-textincode-%EC%97%B0%EC%82%B0%EC%9E%90%EB%A1%9C-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0-%EC%A1%B4%EC%9E%AC-%EC%97%AC%EB%B6%80-%ED%99%95%EC%9D%B8%ED%95%98%EA%B8%B0\" aria-label=\"code classlanguage textincode 연산자로 프로퍼티 존재 여부 확인하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">in</code> 연산자로 프로퍼티 존재 여부 확인하기</h3>\n<p>자바스크립트 객체의 중요한 특징 중 하나는 다른 언어와는 달리, 존재하지 않는 프로퍼티에 접근하려 해도 에러가 발생하지 않고 <code class=\"language-text\">undefined</code>를 반환한다는 점이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 고전적인 방법</span>\n<span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>name <span class=\"token operator\">==</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n\n<span class=\"token comment\">// in 연산자</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span> <span class=\"token keyword\">in</span> user<span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span></code></pre></div>\n<p>ㅤ</p>\n<h2 id=\"code-classlanguage-textfor--incode-반복문\" style=\"position:relative;\"><a href=\"#code-classlanguage-textfor--incode-%EB%B0%98%EB%B3%B5%EB%AC%B8\" aria-label=\"code classlanguage textfor  incode 반복문 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">for ... in</code> 반복문</h2>\n<p><code class=\"language-text\">for ... in</code> 반복문을 사용하면 객체의 모든 키를 순회할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>key <span class=\"token keyword\">in</span> object<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 각 프로퍼티 키(key)를 이용하여 본문(body)를 실행합니다.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'John'</span><span class=\"token punctuation\">,</span>\n  age<span class=\"token operator\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span>\n  isAdmin<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> key <span class=\"token keyword\">in</span> user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"객체-정렬-방식\" style=\"position:relative;\"><a href=\"#%EA%B0%9D%EC%B2%B4-%EC%A0%95%EB%A0%AC-%EB%B0%A9%EC%8B%9D\" aria-label=\"객체 정렬 방식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>객체 정렬 방식</h4>\n<p>객체와 객체 프로퍼티를 다루다 보면 “프로퍼티엔 순서가 있을까?”라는 의문이 생기기 마련인데, 반복문은 프로퍼티를 추가한 순서대로 실행될지 아니면 순서는 항상 동일할지 궁금해진다. 정답은 “객체는 특별한 방식으로 정렬” 된다는 것인데, 정수 프로퍼티(integer property)는 자동으로 정렬되고, 그 외의 프로퍼티는 객체에 추가한 순서 그대로 정렬됩니다.</p>\n<p>ㅤ</p>\n<p>ㅤ</p>\n<h2 id=\"참조에-의한-객체-복사\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EC%A1%B0%EC%97%90-%EC%9D%98%ED%95%9C-%EA%B0%9D%EC%B2%B4-%EB%B3%B5%EC%82%AC\" aria-label=\"참조에 의한 객체 복사 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참조에 의한 객체 복사</h2>\n<p>객체와 원시 타입의 근본적인 차이 중 하나는 객체 ‘참조에 의해 (by reference)’ 저장되고 복사된다는 것이다. 코드를 보고 넘어가자</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'John'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> admin <span class=\"token operator\">=</span> user <span class=\"token comment\">// admin에 user 복사 - admin에 user 참조값 저장</span>\n\nadmin<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'Pete'</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'Pete'가 출력된다.</span></code></pre></div>\n<p>객체는 원시값과 다른 동작 방식을 갖고 있는데, 변수엔 객체가 그대로 저장되는 것이 아니라, 객체가 저장되어 있는 ‘메모리 주소’인 객체에 대한 ‘참조 값’이 저장된다.</p>\n<h4 id=\"참조에-의한-비교\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EC%A1%B0%EC%97%90-%EC%9D%98%ED%95%9C-%EB%B9%84%EA%B5%90\" aria-label=\"참조에 의한 비교 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참조에 의한 비교</h4>\n<p>객체 비교 시 동등 연산자 <code class=\"language-text\">==</code>와 일치 연산자 <code class=\"language-text\">===</code>는 동일하게 동작한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> a\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> b<span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">===</span> b<span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> b<span class=\"token punctuation\">)</span> <span class=\"token comment\">// false - 메모리 참조값이 다르기 때문이다.</span></code></pre></div>\n<p>ㅤ</p>\n<h3 id=\"객체-복사-병합과-objectassign\" style=\"position:relative;\"><a href=\"#%EA%B0%9D%EC%B2%B4-%EB%B3%B5%EC%82%AC-%EB%B3%91%ED%95%A9%EA%B3%BC-objectassign\" aria-label=\"객체 복사 병합과 objectassign permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>객체 복사, 병합과 Object.assign</h3>\n<p>객체가 할당된 변수를 복사하면 동일한 객체에 대한 참조 값이 하나 더 만들어진다. 그렇다면 독립된 객체로 동일한 객체를 복사하고 싶다면 어떻게 해야 할까? 방법은 있지만 자바스크립는 객체 복제 내장 메서드를 지원하지 않기 때문에 조금 복잡하다. 그 이유는 실무에서도 객체를 복제해야 할 일은 거의 없기에 참조에 의한 복사로 해결 가능한 일이 대다수이다. 만약에, 복제가 필요한 상황이라면 새로운 객체를 만든 다음 기존 객체의 프로퍼티를 순회하여 복사하면 된다.</p>\n<h4 id=\"순회하는-방법\" style=\"position:relative;\"><a href=\"#%EC%88%9C%ED%9A%8C%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-label=\"순회하는 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>순회하는 방법</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'John'</span><span class=\"token punctuation\">,</span>\n  age<span class=\"token operator\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> clone <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// 새로운 빈 객체</span>\n\n<span class=\"token comment\">// 빈 객체에 user 프로퍼티 전부를 복사해 넣습니다.</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> key <span class=\"token keyword\">in</span> user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  clone<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> user<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 이제 clone은 완전히 독립적인 복제본이 되었습니다.</span>\nclone<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'Pete'</span> <span class=\"token comment\">// clone의 데이터를 변경합니다.</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 기존 객체에는 여전히 John이 있습니다.</span></code></pre></div>\n<h4 id=\"objectassign-을-사용하는-방법\" style=\"position:relative;\"><a href=\"#objectassign-%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-label=\"objectassign 을 사용하는 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Object.assign 을 사용하는 방법</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Object.assign(dest, [src1, src2, src3, ...]);</span>\ncloneObject <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> object1<span class=\"token punctuation\">,</span> object2<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">dest</code> 는 목표로 하는 객체</li>\n<li><code class=\"language-text\">src1, ..., srcN</code> 은 복사하고자 하는 객체</li>\n<li>객체 <code class=\"language-text\">src1, ..., srcN</code> 의 프로퍼티를 <code class=\"language-text\">dest</code>에 복사한다. <code class=\"language-text\">dest</code>를 제외한 인수(객체)의 프로퍼티 전부가 객체로 복사한다.</li>\n<li><code class=\"language-text\">dest</code> 반환</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'John'</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> permissions1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> canView<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> permissions2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> canEdit<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// permissions1과 permissions2의 프로퍼티를 user로 복사합니다.</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">,</span> permissions1<span class=\"token punctuation\">,</span> permissions2<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// now user = { name: \"John\", canView: true, canEdit: true }</span></code></pre></div>\n<p>ㅤ</p>\n<p>ㅤ</p>\n<h2 id=\"가바지-컬렉션\" style=\"position:relative;\"><a href=\"#%EA%B0%80%EB%B0%94%EC%A7%80-%EC%BB%AC%EB%A0%89%EC%85%98\" aria-label=\"가바지 컬렉션 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>가바지 컬렉션</h2>\n<p>자바스크립트는 눈에 보이지 않는 곳에서 메모리 관리를 수행한다. 우리가 만드는 모든 것들 원시값, 객체, 함수 등은 메모리를 차지하는데, 그렇다면 더는 쓸모 없어지게 된 것들은 어떻게 처리될까?</p>\n<p>ㅤ</p>\n<h3 id=\"가비지-컬렉션-기준\" style=\"position:relative;\"><a href=\"#%EA%B0%80%EB%B9%84%EC%A7%80-%EC%BB%AC%EB%A0%89%EC%85%98-%EA%B8%B0%EC%A4%80\" aria-label=\"가비지 컬렉션 기준 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>가비지 컬렉션 기준</h3>\n<p>자바스크립트는 도달 가능성(reachability) 라는 개념을 사용해 메모리 관리를 수행하는데, 도달 가능한 값이란 쉽게 말해 어떻게든 접근하거나 사용할 수 잇는 값을 의미한다. 그렇기에 도달 가능한 값은 메모리에서 삭제되지 않는다.</p>\n<ol>\n<li>\n<p>루트 (root)</p>\n<ul>\n<li>현재 함수의 지역 변수와 매개변수</li>\n<li>중첩 함수의 체인에 있는 함수에서 사용되는 변수와 매개변수</li>\n<li>전역 변수</li>\n<li>기타 등등</li>\n</ul>\n</li>\n<li>루트가 참조하는 값이나 체이닝으로 루트에서 참조할 수 있는 값</li>\n</ol>\n<p>이렇듯 자바스크립트 엔진 내에서는 가비지 컬렉터가 끊임없이 동작해 모든 객체를 모니터링하고, 도달할 수 없는 객체는 삭제한다.</p>\n<p>ㅤ</p>\n<h4 id=\"간단한-예시\" style=\"position:relative;\"><a href=\"#%EA%B0%84%EB%8B%A8%ED%95%9C-%EC%98%88%EC%8B%9C\" aria-label=\"간단한 예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>간단한 예시</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 객체 user 생성</span>\n<span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'John'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// user 덮어쓰기</span>\nuser <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n<span class=\"token comment\">// 이렇게 된다면, 더 이상 user.name은 참조할 수 없기 때문에</span>\n<span class=\"token comment\">// 도달할 수 없는 상태가 되고 John을 메모리에서 삭제한다.</span></code></pre></div>\n<p>ㅤ</p>\n<p>ㅤ</p>\n<h2 id=\"메서드와-this\" style=\"position:relative;\"><a href=\"#%EB%A9%94%EC%84%9C%EB%93%9C%EC%99%80-this\" aria-label=\"메서드와 this permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>메서드와 “this”</h2>\n<p>객체는 사용자(user), 주문(order) 등과 같이 실제 존재하는 객체를 표현하고 할 때 생성하는데 이 때 메서드란, 객체의 프로퍼티에 함수를 할당해 객체에게 행동할 수 있는 능력을 부여하는 것이다.</p>\n<p>ㅤ</p>\n<h3 id=\"메서드-만들기\" style=\"position:relative;\"><a href=\"#%EB%A9%94%EC%84%9C%EB%93%9C-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-label=\"메서드 만들기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>메서드 만들기</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'John'</span><span class=\"token punctuation\">,</span>\n  age<span class=\"token operator\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\nuser<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">sayHi</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'안녕하세요!'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nuser<span class=\"token punctuation\">.</span><span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 안녕하세요!</span></code></pre></div>\n<p>이런 방식으로 이전의 <code class=\"language-text\">user.isAdmin</code>이라는 값을 추가할 때처럼 함수를 할당해줄 수 있고, 사용할 때 역시 함수와 동일하게 <code class=\"language-text\">()</code>로 이용할 수 있다.</p>\n<h4 id=\"메서드-단축-구문\" style=\"position:relative;\"><a href=\"#%EB%A9%94%EC%84%9C%EB%93%9C-%EB%8B%A8%EC%B6%95-%EA%B5%AC%EB%AC%B8\" aria-label=\"메서드 단축 구문 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>메서드 단축 구문</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"안녕하세요!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>ㅤ</p>\n<h3 id=\"메서드와-this-1\" style=\"position:relative;\"><a href=\"#%EB%A9%94%EC%84%9C%EB%93%9C%EC%99%80-this-1\" aria-label=\"메서드와 this 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>메서드와 “this”</h3>\n<p>메서드는 객체에 저장된 정보에 접근할 수 있어야 제 역할을 할 수 있는데, 쉽게 말하면 객체에 아무리 메서드를 할당할 수 있더라도 저장된 정보에 접근할 수 없다면 결국에는 분리하여 함수를 만드는게 더 낫기 때문이다. 그렇기에 객체 내부의 메서드는 객체에 저장된 정보에 접근할 수 있고, 활용한다. (모든 메서드가 그렇다는 것은 아니다.)</p>\n<p>접근 방법은 간단하다. <code class=\"language-text\">this</code> 키워드를 이용하면 객체에 접근할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'John'</span><span class=\"token punctuation\">,</span>\n  age<span class=\"token operator\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">안녕하세요! </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> 입니다.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\nuser<span class=\"token punctuation\">.</span><span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>ㅤ</p>\n<h3 id=\"자유로운-this\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EC%9C%A0%EB%A1%9C%EC%9A%B4-this\" aria-label=\"자유로운 this permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자유로운 “this”</h3>\n<p>자바스크립트의 <code class=\"language-text\">this</code>는 다른 프로그래밍 언어의 <code class=\"language-text\">this</code>와 동작 방식이 다른데, 자바스크립트에서는 모든 함수에 <code class=\"language-text\">this</code>를 사용할 수 있기 때문이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'John'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> admin <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Admin'</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 별개의 객체에서 동일한 함수를 사용함</span>\nuser<span class=\"token punctuation\">.</span>f <span class=\"token operator\">=</span> sayHi\nadmin<span class=\"token punctuation\">.</span>f <span class=\"token operator\">=</span> sayHi\n\n<span class=\"token comment\">// this 값이 달라짐</span>\nuser<span class=\"token punctuation\">.</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// John  (this == user)</span>\nadmin<span class=\"token punctuation\">.</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Admin  (this == admin)</span>\n\n<span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 아무것도 나타나지 않음</span></code></pre></div>\n<p>이렇듯 어떤 함수에서는 <code class=\"language-text\">this</code>를 사용할 수 있고 만약 참조할 객체가 없다면 아무런 값도 리턴하지 않는다.</p>\n<p>ㅤ</p>\n<p>ㅤ</p>\n<h2 id=\"new-연산자와-생성자-함수\" style=\"position:relative;\"><a href=\"#new-%EC%97%B0%EC%82%B0%EC%9E%90%EC%99%80-%EC%83%9D%EC%84%B1%EC%9E%90-%ED%95%A8%EC%88%98\" aria-label=\"new 연산자와 생성자 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>“new” 연산자와 생성자 함수</h2>\n<p>객체 리터럴인 <code class=\"language-text\">{...}</code> 을 사용하면 객체를 쉽게 만들 수 있다. 그런데 개발을 하다 보면 유사한 객체를 여러 개 만들어야할 때가 생기곤 하는데, 복수의 사용자, 메뉴 내 다양한 아이템을 객체로 표현하려고 하는 경우가 그 예시이다. 이런 상황에서는 <code class=\"language-text\">&quot;new&quot;</code> 연산자와 생성자 함수를 사용하면 유사한 객체를 여러 개 쉽게 만들 수 있다.</p>\n<p>ㅤ</p>\n<h3 id=\"생성자-함수\" style=\"position:relative;\"><a href=\"#%EC%83%9D%EC%84%B1%EC%9E%90-%ED%95%A8%EC%88%98\" aria-label=\"생성자 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>생성자 함수</h3>\n<p>생성자 함수(constructor function)와 일반 함수에 기술적인 차이는 없으나, 생성자 함수는 아래 두 관례를 따른다.</p>\n<ol>\n<li>함수 이름의 첫 글자는 대문자로 시작한다.</li>\n<li><strong><u>반드시</u></strong> <code class=\"language-text\">new</code> 연산자를 붙여 실행한다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">User</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isAdmin <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Jack'</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Jack</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>isAdmin<span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span></code></pre></div>\n<p>동작 방식은 다음과 같다.</p>\n<ol>\n<li><u>빈 객체</u>를 만들어 <code class=\"language-text\">this</code>에 할당</li>\n<li>함수 본문을 실행하여, <code class=\"language-text\">this</code>에 새로운 프로퍼티를 추가하여 <code class=\"language-text\">this</code>를 수정</li>\n<li><code class=\"language-text\">this</code>를 반환 (<code class=\"language-text\">this</code> : 객체)</li>\n</ol>\n<p>주의) 모든 함수는 생성자 함수가 될 수 있어 <code class=\"language-text\">new</code>를 붙여 실행한다면 어떠한 함수라도 위에 언급된 알고리즘이 실행된다.</p>\n<blockquote>\n<p>ℹ️ new function() {…}</p>\n<p>재사용할 필요가 엉ㅂㅅ는 복잡한 객체를 만들어야 한다고 가정하자. 많은 양의 코드가 필요할 것이고, 이럴 때엔 아래와 같이 코드를 익명 생성자 함수를 감싸주는 방식을 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'John'</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isAdmin <span class=\"token operator\">=</span> <span class=\"token string\">'false'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">function()</code>는 익명 함수이기 때문에 어디에도 저장되지 않아, 다른 곳에서 동일한 함수를 작성하지 않는 한 재사용할 수 없다.</p>\n</blockquote>\n<p>ㅤ</p>\n<p>ㅤ</p>\n<h2 id=\"옵셔널-체이닝-\" style=\"position:relative;\"><a href=\"#%EC%98%B5%EC%85%94%EB%84%90-%EC%B2%B4%EC%9D%B4%EB%8B%9D-\" aria-label=\"옵셔널 체이닝  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>옵셔널 체이닝 ’?.’</h2>\n<blockquote>\n<p>⚠️ <strong>최근에 추가</strong>되어 구식 브라우저는 폴리필이 필요하다.</p>\n</blockquote>\n<p>옵셔널 체이닝 (optional chaining) <code class=\"language-text\">?.</code>을 사용하면 프로퍼티가 없는 중첩 객체에도 에러 없이 안전하게 접근할 수 있습니다.</p>\n<p>ㅤ</p>\n<h3 id=\"옵셔널-체이닝이-필요한-이유\" style=\"position:relative;\"><a href=\"#%EC%98%B5%EC%85%94%EB%84%90-%EC%B2%B4%EC%9D%B4%EB%8B%9D%EC%9D%B4-%ED%95%84%EC%9A%94%ED%95%9C-%EC%9D%B4%EC%9C%A0\" aria-label=\"옵셔널 체이닝이 필요한 이유 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>옵셔널 체이닝이 필요한 이유</h3>\n<p>옵셔널 체이닝이 등장하게 된 사례 예시, 사용자가 여러 명이 있는데, 그 중 몇 명은 주소 정보를 가지고 있지 않다고 가정한다. 이럴 때 <code class=\"language-text\">user.address.street</code>를 사용하여 주소에 접근하면 에러가 발생할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// 주소정보가 없는 사용자</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">.</span>street<span class=\"token punctuation\">)</span> <span class=\"token comment\">// TypeError: Cannot read property ...</span></code></pre></div>\n<p>또 다른 사레는 브라우저에서 동작하는 코드를 개발하는 도중에 발생할 수 있는 문제로 페이지에 있는 특정 요소에 담긴 정보에 접근하려는데, 요소가 페이지에 없는 경우이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// querySelector(...) 호출 결과가 null인 경우</span>\n<span class=\"token keyword\">let</span> html <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.my-element'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token comment\">// TypeError: ...</span></code></pre></div>\n<blockquote>\n<p>둘 다 TypeError 네.. 참조할 수 없을 때에는 TypeError가 나는구나!</p>\n</blockquote>\n<p>이런 상황에서 명세서에 <code class=\"language-text\">?.</code>이 추가되기 전엔 <code class=\"language-text\">&amp;&amp;</code> 연산자를 사용하곤 했습니다. 하지만 이 방법은 코드가 아주 길어진다는 문제가 생긴다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// 주소정보가 없는 사용자</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>user <span class=\"token operator\">&amp;&amp;</span> user<span class=\"token punctuation\">.</span>address <span class=\"token operator\">&amp;&amp;</span> user<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">.</span>street<span class=\"token punctuation\">)</span> <span class=\"token comment\">// undefined</span></code></pre></div>\n<p>ㅤ</p>\n<h3 id=\"옵셔널-체이닝의-등장\" style=\"position:relative;\"><a href=\"#%EC%98%B5%EC%85%94%EB%84%90-%EC%B2%B4%EC%9D%B4%EB%8B%9D%EC%9D%98-%EB%93%B1%EC%9E%A5\" aria-label=\"옵셔널 체이닝의 등장 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>옵셔널 체이닝의 등장</h3>\n<p><code class=\"language-text\">?.</code>은 <code class=\"language-text\">?.</code>“앞”의 평가 대상이 <code class=\"language-text\">undefined</code>나 <code class=\"language-text\">null</code> 이면 평가를 멈추고 <code class=\"language-text\">undefined</code>를 반환한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>user<span class=\"token operator\">?.</span>address<span class=\"token operator\">?.</span>street<span class=\"token punctuation\">)</span> <span class=\"token comment\">// undefined</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>user<span class=\"token operator\">?.</span>address<span class=\"token punctuation\">)</span> <span class=\"token comment\">// undefined</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>user<span class=\"token operator\">?.</span>address<span class=\"token punctuation\">.</span>street<span class=\"token punctuation\">)</span> <span class=\"token comment\">// undefined</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>user<span class=\"token operator\">?.</span>address<span class=\"token punctuation\">.</span>street<span class=\"token punctuation\">.</span>anything<span class=\"token punctuation\">)</span> <span class=\"token comment\">// undefined</span></code></pre></div>\n<blockquote>\n<p>⚠️ 옵셔널 체이닝을 남용하지 말자.</p>\n<p><code class=\"language-text\">?.</code> 는 존재하지 않아도 괜찮은 대상에만 사용해야하는데, 무차별적으로 사용하게 되면 있어야하는 대상을 찾지 못하는 경우가 생길 수 있다.</p>\n</blockquote>\n<p>ㅤ</p>\n<p>ㅤ</p>\n<h2 id=\"심볼형\" style=\"position:relative;\"><a href=\"#%EC%8B%AC%EB%B3%BC%ED%98%95\" aria-label=\"심볼형 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>심볼형</h2>\n<p>자바스크립트는 객체 프로퍼티 키로 오직 문자형과 심볼형만을 허용한다. 지금까지는 프로퍼티 키가 문자형인 경우에만 살펴보았는데, 심볼형 키를 사용할 때의 이점에 대해 살펴본다.</p>\n<h3 id=\"심볼\" style=\"position:relative;\"><a href=\"#%EC%8B%AC%EB%B3%BC\" aria-label=\"심볼 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>심볼</h3>\n<p>‘심볼(symbol)‘은 유일한 식별자(unique identifier)를 만들고 싶을 때 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> id <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 심볼 이름을 설정할 수 있다.</span></code></pre></div>\n<p>ㅤ</p>\n<p>ㅤ</p>\n<h2 id=\"객체를-원시형으로-변환하기\" style=\"position:relative;\"><a href=\"#%EA%B0%9D%EC%B2%B4%EB%A5%BC-%EC%9B%90%EC%8B%9C%ED%98%95%EC%9C%BC%EB%A1%9C-%EB%B3%80%ED%99%98%ED%95%98%EA%B8%B0\" aria-label=\"객체를 원시형으로 변환하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>객체를 원시형으로 변환하기</h2>\n<p><code class=\"language-text\">obj1 + obj2</code> 와 같이 객체끼리 더하는 연산을 하거나, 빼는 연산을 한다면 객체는 <u>자동 형 변환</u>이 일어난다. 객체는 원시값으로 변환되고, 그 후 의도한 연산이 수행된다.</p>\n<ol>\n<li>객체는 논리 평가 시 <code class=\"language-text\">true</code>를 반환합니다. 따라서 객체는 숫자나 문자형으로만 형변환이 일어난다.</li>\n<li>숫자형으로 형 변환은 객체끼리 수학 관련 연산을 적용할 때 일어나고, 만약 객체 <code class=\"language-text\">Date</code> 끼리 차감하면 두 날짜의 시간 차이가 반환한다.</li>\n<li>문자형으로의 형 변환은 대게 <code class=\"language-text\">alert(obj)</code> 와 같이 객체를 출력하력 할 때 일어난다.</li>\n</ol>\n<p>ㅤ</p>\n<h3 id=\"toprimitive\" style=\"position:relative;\"><a href=\"#toprimitive\" aria-label=\"toprimitive permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ToPrimitive</h3>\n<p>특수 객체 메서드를 사용하면 숫자형이나 문자형으로의 형 변환을 원하는 대로 조절할 수 있습니다. 객체 형 변환은 세 종류로 구분되는데, <code class=\"language-text\">hint</code>라 불리는 값이 구분 기준이 됩니다.</p>\n<h4 id=\"string\" style=\"position:relative;\"><a href=\"#string\" aria-label=\"string permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>String</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 객체를 출력</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 객체를 프로퍼티 키로 사용하고 있는 경우</span>\nanotherObj<span class=\"token punctuation\">[</span>obj<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">123</span></code></pre></div>\n<h4 id=\"number\" style=\"position:relative;\"><a href=\"#number\" aria-label=\"number permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>number</h4>\n<p>수학 연산을 적용하려 할 때 (객체-숫자형 변환), hint는 number가 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 명시적 형 변환</span>\n<span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// (이항 덧셈 연산을 제외한) 수학 연산</span>\n<span class=\"token keyword\">let</span> n <span class=\"token operator\">=</span> <span class=\"token operator\">+</span>obj <span class=\"token comment\">// 단항 덧셈 연산</span>\n<span class=\"token keyword\">let</span> delta <span class=\"token operator\">=</span> date1 <span class=\"token operator\">-</span> date2\n<span class=\"token comment\">// 크고 작음 비교하기</span>\n<span class=\"token keyword\">let</span> greater <span class=\"token operator\">=</span> user1 <span class=\"token operator\">></span> user2</code></pre></div>\n<h4 id=\"default\" style=\"position:relative;\"><a href=\"#default\" aria-label=\"default permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>default</h4>\n<p>연산자가 기대하는 자료형이 “확실치 않을 때” hint는 <code class=\"language-text\">default</code>가 됩니다. 아주 드물게 발생</p>\n<p>이항 덧셈 연산자 <code class=\"language-text\">+</code> 는 피연산자의 자료형에 따라 문자열을 합치는 연산을 할 수도 있고 숫자를 더해주는 연산을 할 수도 있는데, 그러다보니 <code class=\"language-text\">+</code> 인수가 객체일 때에는 <code class=\"language-text\">default</code>가 된다.</p>\n<p>동등 연산자 <code class=\"language-text\">==</code>를 사용해 객체-문자형, 객체-숫자형, 객체-심볼형끼리 비교할 때도, 객체를 어떤 자료형으로 바꿔야 할지 확신이 안 서므로 hint는 default가 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 이항 덧셈 연산은 hint로 `default`를 사용합니다.</span>\n<span class=\"token keyword\">let</span> total <span class=\"token operator\">=</span> obj1 <span class=\"token operator\">+</span> obj2<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// obj == number 연산은 hint로 `default`를 사용합니다.</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>user <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4 id=\"boolean\" style=\"position:relative;\"><a href=\"#boolean\" aria-label=\"boolean permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>boolean</h4>\n<p>boolean은 <code class=\"language-text\">hint</code>가 없다 그 이유는 모든 객체는 그저 <code class=\"language-text\">true</code> 이기 때문이다.</p>\n<p>ㅤ</p>\n<p>자바스크립트는 형 변환이 필요한 경우, 아래와 같은 알고리즘에 따라 메서드를 찾고 호출한다.</p>\n<ol>\n<li>객체에 <code class=\"language-text\">obj[Symbol.toPrimitive](hint)</code> 메서드가 있는지 찾고 있다면 메서드를 호출하는데, <code class=\"language-text\">Symbol.toPrimitive</code>는 시스템 심볼로, 심볼형 키로 사용된다.</li>\n<li>\n<p>1에 해당하지 않고, <code class=\"language-text\">hint</code>가 <code class=\"language-text\">string</code> 이라면,</p>\n<ul>\n<li><code class=\"language-text\">obj.toString()</code>이나 <code class=\"language-text\">obj.valueOf()</code>를 호출한다. (존재하는 메서드만 실행)</li>\n</ul>\n</li>\n<li>\n<p>1, 2에 해당하지 않고, <code class=\"language-text\">number</code>나 <code class=\"language-text\">default</code>라면,</p>\n<ul>\n<li><code class=\"language-text\">obj.valueOf()</code>나 <code class=\"language-text\">obj.toString()</code> 을 호출한다. (존재하는 메서드만 실행)</li>\n</ul>\n</li>\n</ol>\n<p>ㅤ</p>\n<p>ㅤ</p>\n<h2 id=\"objectskeys-values-entries\" style=\"position:relative;\"><a href=\"#objectskeys-values-entries\" aria-label=\"objectskeys values entries permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Objects.keys, values, entries</h2>\n<ul>\n<li><code class=\"language-text\">Objects.keys(obj)</code> : 키가 담긴 배열 반환</li>\n<li><code class=\"language-text\">Objects.values(obj)</code> : 값이 담긴 배열 반환</li>\n<li><code class=\"language-text\">Objects.entries(obj)</code> : <code class=\"language-text\">key, value</code> 쌍이 담긴 배열 반환</li>\n</ul>\n<p><code class=\"language-text\">Map, Set, Array</code> 에 적용되는 <code class=\"language-text\">keys(), values(), entries()</code> 와는 아래 같은 차이점이 존재</p>\n<table>\n<thead>\n<tr>\n<th>분류</th>\n<th>map (맵)</th>\n<th>objects (객체)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>호출 문법</td>\n<td><code class=\"language-text\">map.keys()</code></td>\n<td><code class=\"language-text\">Objects.keys(obj)</code></td>\n</tr>\n<tr>\n<td>반환 값</td>\n<td>iterable 객체</td>\n<td>Array</td>\n</tr>\n</tbody>\n</table>\n<p>예시 :</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'John'</span><span class=\"token punctuation\">,</span>\n  age<span class=\"token operator\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">Objects.keys(user) = [&quot;name&quot;, &quot;age&quot;]</code></li>\n<li><code class=\"language-text\">Objects.values(user) = [&quot;John&quot;, 30]</code></li>\n<li><code class=\"language-text\">Objects.entries(user) = [ [&quot;name&quot;, &quot;John&quot;], [&quot;age&quot;, 30] ]</code></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Objects.values 예시</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> value <span class=\"token keyword\">of</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token comment\">// John, 30</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>⚠️ Objects.keys, values, entries는 심볼형 프로퍼티를 무시한다.</p>\n</blockquote>\n<p>ㅤ</p>\n<h3 id=\"객체-변환하기\" style=\"position:relative;\"><a href=\"#%EA%B0%9D%EC%B2%B4-%EB%B3%80%ED%99%98%ED%95%98%EA%B8%B0\" aria-label=\"객체 변환하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>객체 변환하기</h3>\n<p>기존 객체에는 <code class=\"language-text\">map</code>, <code class=\"language-text\">filter</code> 같은 배열 전용 메서드를 사용할 수 없습니다. 하지만, <code class=\"language-text\">Objects.entries</code>와 <code class=\"language-text\">Objects.fromEntries</code> 를 순차적으로 적용하면 객체에도 배열 전용 메서드를 사용할 수 있다.</p>\n<ol>\n<li><code class=\"language-text\">Objects.entries(obj)</code> 를 사용해 객체의 키-쌍 요소를 갖는 배열을 얻는다.</li>\n<li>1에서 만든 배열에 <code class=\"language-text\">map</code> 등의 배열 전용 메서드를 적용한다.</li>\n<li>2에서 반환된 배열에 <code class=\"language-text\">Objects.fromEntries(array)</code>를 적용해 다시 객체로 되돌린다.</li>\n</ol>\n<p>예시 :</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> prices <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  banana<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  orange<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  meat<span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> doublePrices <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">fromEntries</span><span class=\"token punctuation\">(</span>\n  Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>prices<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> value <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>doublePrices<span class=\"token punctuation\">.</span>meat<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 8</span></code></pre></div>\n<h2 id=\"date-객체와-날짜\" style=\"position:relative;\"><a href=\"#date-%EA%B0%9D%EC%B2%B4%EC%99%80-%EB%82%A0%EC%A7%9C\" aria-label=\"date 객체와 날짜 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Date 객체와 날짜</h2>\n<p><code class=\"language-text\">Date</code> 객체를 활용하면 생성 및 수정 시간을 저장하거나 시간 측정 혹은 현재 날짜를 출력하는 용도 등에 활용할 수 있습니다.</p>\n<p>예시 :</p>\n<ul>\n<li><code class=\"language-text\">new Date() = 현재 날짜 및 시간</code></li>\n<li><code class=\"language-text\">new Date(0) = &quot;1970-01-01&quot;</code></li>\n<li><code class=\"language-text\">new Date(&quot;2020-01-01&quot;) = &quot;Wed Jan 01 2020 09:00:00 GMT+0900 (대한민국 표준시)&quot;</code></li>\n<li><code class=\"language-text\">new Date(year, month, date, hours, minutes, seconds, ms)</code></li>\n</ul>\n<p>ㅤ</p>\n<h3 id=\"날짜-구성요소-얻기\" style=\"position:relative;\"><a href=\"#%EB%82%A0%EC%A7%9C-%EA%B5%AC%EC%84%B1%EC%9A%94%EC%86%8C-%EC%96%BB%EA%B8%B0\" aria-label=\"날짜 구성요소 얻기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>날짜 구성요소 얻기</h3>\n<p><code class=\"language-text\">Date</code> 객체의 메서드를 사용하면 연, 월, 일 등의 값을 얻을 수 있다.</p>\n<p><strong>아래 메서드들은 모두 현지 시간 기준 날짜 구성요소를 반환</strong>하기 때문에 <code class=\"language-text\">getUTCFullYear()</code>과 같이 <code class=\"language-text\">UTC</code>를 붙일 경우 표준시 기준의 날짜 구성 요소를 반환한다.</p>\n<ul>\n<li><code class=\"language-text\">getFullYear()</code> : 연도(네 자릿수) 반환</li>\n<li><code class=\"language-text\">getMonth()</code></li>\n<li><code class=\"language-text\">getDate()</code> : 날짜 반환</li>\n<li><code class=\"language-text\">getHours(), getMinutes(), getSeconds(), getMilliseconds()</code></li>\n<li><code class=\"language-text\">getDay()</code> : 요일 반환</li>\n<li><code class=\"language-text\">getTime()</code> : 주어진 일시와 1970-01-01 00:00:00.00 사이의 간격(밀리초 단위)인 타임스탬프 반환</li>\n<li><code class=\"language-text\">getTimezoneOffset()</code> : 현지 시간과 표준 시간의 차이를 반환한다.</li>\n</ul>\n<blockquote>\n<p>⚠️ <code class=\"language-text\">getYear()</code> 말고 <code class=\"language-text\">getFullYear()</code> 를 사용하자.</p>\n<p>여러 자바스크립트 엔진에서는 더는 사용되지 않는(deprecated) 비표준 메서드 <code class=\"language-text\">getYear()</code> 를 구현하고 있다. 하지만, 이 메서드는 두 자릿수 연도를 반환하는 경우가 있기 때문에 절대 사용해서는 안된다. 만약 연도 정보를 얻고 싶다면, <code class=\"language-text\">getFullYear()</code> 를 사용하는 것을 추천한다.</p>\n</blockquote>\n<p>ㅤ</p>\n<h3 id=\"날짜-구성요소-설정하기\" style=\"position:relative;\"><a href=\"#%EB%82%A0%EC%A7%9C-%EA%B5%AC%EC%84%B1%EC%9A%94%EC%86%8C-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0\" aria-label=\"날짜 구성요소 설정하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>날짜 구성요소 설정하기</h3>\n<p>아래 메서드를 사용하면 날짜 구성요소를 설정할 수 있다.</p>\n<ul>\n<li><code class=\"language-text\">setFullYear(year, [month], [date])</code></li>\n<li><code class=\"language-text\">setMonth(month, [date])</code></li>\n<li><code class=\"language-text\">setDate(date)</code></li>\n<li><code class=\"language-text\">setHours(hour, [min], [sec], [ms])</code></li>\n<li><code class=\"language-text\">setMinutes(min, [sec], [ms])</code></li>\n<li><code class=\"language-text\">setSeconds(sec, [ms])</code></li>\n<li><code class=\"language-text\">setMilliseconds(ms)</code></li>\n<li><code class=\"language-text\">setTime(milliseconds)</code></li>\n</ul>\n<p><code class=\"language-text\">setTime()</code>을 제외한 모든 메서드는 <code class=\"language-text\">setUTCHours()</code> 같이 표준시에 따라 날짜 구성 요소를 설정해주는 메서드가 존재한다. <code class=\"language-text\">setHours</code>와 같은 메서더는 여러 개의 날짜 구성요소를 동시에 설정할 수 있는데, 메서드의 인수에 없는 구성요소는 변경되지 않는다.</p>\n<p>예시 :</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> today <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Fri Aug 21 2020 21:34:35 GMT+0900</span>\ntoday<span class=\"token punctuation\">.</span><span class=\"token function\">setHours</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>today<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Fri Aug 21 2020 00:34:35 GMT+0900</span>\n\ntoday<span class=\"token punctuation\">.</span><span class=\"token function\">setHours</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>today<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Fri Aug 21 2020 00:34:35 GMT+0900</span></code></pre></div>\n<p>ㅤ</p>\n<h3 id=\"자동-고침\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%8F%99-%EA%B3%A0%EC%B9%A8\" aria-label=\"자동 고침 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자동 고침</h3>\n<p><code class=\"language-text\">Date</code> 객체엔 자동 고침(autocorrection) 이라는 유용한 기능이 있어 만약 범위를 벗어나는 값을 설정하려고 하면 자동 고침 기능이 활성화되면서 자동으로 수정한다.</p>\n<p>예시 :</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token number\">2013</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2013년 1월 32일은 없습니다.</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2013년 2월 1일이 출력됩니다.</span></code></pre></div>\n<p>ㅤ</p>\n<h3 id=\"dateparse와-문자열\" style=\"position:relative;\"><a href=\"#dateparse%EC%99%80-%EB%AC%B8%EC%9E%90%EC%97%B4\" aria-label=\"dateparse와 문자열 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Date.parse와 문자열</h3>\n<p>메서드 <code class=\"language-text\">Date.parse(str)</code>를 사용하면 문자열에서 날짜를 읽어올 수 있다.\n(단, 문자열의 형식은 <code class=\"language-text\">YYYY-MM-DDTHH:mm:ss.sssZ</code> 와 같아야한다.)</p>\n<p>예시 :</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> ms <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2012-01-26T13:51:50.417-07:00'</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>ms<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1327611110417</span>\n<span class=\"token keyword\">let</span> date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>ms<span class=\"token punctuation\">)</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Fri Jan 27 2012 05:51:50 GMT+0900</span></code></pre></div>\n<h2 id=\"date-객체와-날짜-1\" style=\"position:relative;\"><a href=\"#date-%EA%B0%9D%EC%B2%B4%EC%99%80-%EB%82%A0%EC%A7%9C-1\" aria-label=\"date 객체와 날짜 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Date 객체와 날짜</h2>\n<p><code class=\"language-text\">Date</code> 객체를 활용하면 생성 및 수정 시간을 저장하거나 시간 측정 혹은 현재 날짜를 출력하는 용도 등에 활용할 수 있습니다.</p>\n<p>예시 :</p>\n<ul>\n<li><code class=\"language-text\">new Date() = 현재 날짜 및 시간</code></li>\n<li><code class=\"language-text\">new Date(0) = &quot;1970-01-01&quot;</code></li>\n<li><code class=\"language-text\">new Date(&quot;2020-01-01&quot;) = &quot;Wed Jan 01 2020 09:00:00 GMT+0900 (대한민국 표준시)&quot;</code></li>\n<li><code class=\"language-text\">new Date(year, month, date, hours, minutes, seconds, ms)</code></li>\n</ul>\n<p>ㅤ</p>\n<h3 id=\"날짜-구성요소-얻기-1\" style=\"position:relative;\"><a href=\"#%EB%82%A0%EC%A7%9C-%EA%B5%AC%EC%84%B1%EC%9A%94%EC%86%8C-%EC%96%BB%EA%B8%B0-1\" aria-label=\"날짜 구성요소 얻기 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>날짜 구성요소 얻기</h3>\n<p><code class=\"language-text\">Date</code> 객체의 메서드를 사용하면 연, 월, 일 등의 값을 얻을 수 있다.</p>\n<p><strong>아래 메서드들은 모두 현지 시간 기준 날짜 구성요소를 반환</strong>하기 때문에 <code class=\"language-text\">getUTCFullYear()</code>과 같이 <code class=\"language-text\">UTC</code>를 붙일 경우 표준시 기준의 날짜 구성 요소를 반환한다.</p>\n<ul>\n<li><code class=\"language-text\">getFullYear()</code> : 연도(네 자릿수) 반환</li>\n<li><code class=\"language-text\">getMonth()</code></li>\n<li><code class=\"language-text\">getDate()</code> : 날짜 반환</li>\n<li><code class=\"language-text\">getHours(), getMinutes(), getSeconds(), getMilliseconds()</code></li>\n<li><code class=\"language-text\">getDay()</code> : 요일 반환</li>\n<li><code class=\"language-text\">getTime()</code> : 주어진 일시와 1970-01-01 00:00:00.00 사이의 간격(밀리초 단위)인 타임스탬프 반환</li>\n<li><code class=\"language-text\">getTimezoneOffset()</code> : 현지 시간과 표준 시간의 차이를 반환한다.</li>\n</ul>\n<blockquote>\n<p>⚠️ <code class=\"language-text\">getYear()</code> 말고 <code class=\"language-text\">getFullYear()</code> 를 사용하자.</p>\n<p>여러 자바스크립트 엔진에서는 더는 사용되지 않는(deprecated) 비표준 메서드 <code class=\"language-text\">getYear()</code> 를 구현하고 있다. 하지만, 이 메서드는 두 자릿수 연도를 반환하는 경우가 있기 때문에 절대 사용해서는 안된다. 만약 연도 정보를 얻고 싶다면, <code class=\"language-text\">getFullYear()</code> 를 사용하는 것을 추천한다.</p>\n</blockquote>\n<p>ㅤ</p>\n<h3 id=\"날짜-구성요소-설정하기-1\" style=\"position:relative;\"><a href=\"#%EB%82%A0%EC%A7%9C-%EA%B5%AC%EC%84%B1%EC%9A%94%EC%86%8C-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0-1\" aria-label=\"날짜 구성요소 설정하기 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>날짜 구성요소 설정하기</h3>\n<p>아래 메서드를 사용하면 날짜 구성요소를 설정할 수 있다.</p>\n<ul>\n<li><code class=\"language-text\">setFullYear(year, [month], [date])</code></li>\n<li><code class=\"language-text\">setMonth(month, [date])</code></li>\n<li><code class=\"language-text\">setDate(date)</code></li>\n<li><code class=\"language-text\">setHours(hour, [min], [sec], [ms])</code></li>\n<li><code class=\"language-text\">setMinutes(min, [sec], [ms])</code></li>\n<li><code class=\"language-text\">setSeconds(sec, [ms])</code></li>\n<li><code class=\"language-text\">setMilliseconds(ms)</code></li>\n<li><code class=\"language-text\">setTime(milliseconds)</code></li>\n</ul>\n<p><code class=\"language-text\">setTime()</code>을 제외한 모든 메서드는 <code class=\"language-text\">setUTCHours()</code> 같이 표준시에 따라 날짜 구성 요소를 설정해주는 메서드가 존재한다. <code class=\"language-text\">setHours</code>와 같은 메서더는 여러 개의 날짜 구성요소를 동시에 설정할 수 있는데, 메서드의 인수에 없는 구성요소는 변경되지 않는다.</p>\n<p>예시 :</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> today <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Fri Aug 21 2020 21:34:35 GMT+0900</span>\ntoday<span class=\"token punctuation\">.</span><span class=\"token function\">setHours</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>today<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Fri Aug 21 2020 00:34:35 GMT+0900</span>\n\ntoday<span class=\"token punctuation\">.</span><span class=\"token function\">setHours</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>today<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Fri Aug 21 2020 00:34:35 GMT+0900</span></code></pre></div>\n<p>ㅤ</p>\n<h3 id=\"자동-고침-1\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%8F%99-%EA%B3%A0%EC%B9%A8-1\" aria-label=\"자동 고침 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자동 고침</h3>\n<p><code class=\"language-text\">Date</code> 객체엔 자동 고침(autocorrection) 이라는 유용한 기능이 있어 만약 범위를 벗어나는 값을 설정하려고 하면 자동 고침 기능이 활성화되면서 자동으로 수정한다.</p>\n<p>예시 :</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token number\">2013</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2013년 1월 32일은 없습니다.</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2013년 2월 1일이 출력됩니다.</span></code></pre></div>\n<p>ㅤ</p>\n<h3 id=\"dateparse와-문자열-1\" style=\"position:relative;\"><a href=\"#dateparse%EC%99%80-%EB%AC%B8%EC%9E%90%EC%97%B4-1\" aria-label=\"dateparse와 문자열 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Date.parse와 문자열</h3>\n<p>메서드 <code class=\"language-text\">Date.parse(str)</code>를 사용하면 문자열에서 날짜를 읽어올 수 있다.\n(단, 문자열의 형식은 <code class=\"language-text\">YYYY-MM-DDTHH:mm:ss.sssZ</code> 와 같아야한다.)</p>\n<p>예시 :</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> ms <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2012-01-26T13:51:50.417-07:00'</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>ms<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1327611110417</span>\n<span class=\"token keyword\">let</span> date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>ms<span class=\"token punctuation\">)</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Fri Jan 27 2012 05:51:50 GMT+0900</span></code></pre></div>\n<h2 id=\"json과-메서드\" style=\"position:relative;\"><a href=\"#json%EA%B3%BC-%EB%A9%94%EC%84%9C%EB%93%9C\" aria-label=\"json과 메서드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Json과 메서드</h2>\n<p>복잡한 객체를 다루고 있다고 가정할 때, 네트워크를 통해 객체를 어딘가에 보내거나 혹은 로깅 목적으로 객체를 출력해야 한다면 객체를 문자열로 전환해야할 필요가 있다. 그리고 이때 전환된 문자열엔 원하는 정보가 있는 객체 프로퍼티 모두가 포함되어야만 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span>\n    age<span class=\"token operator\">:</span> <span class=\"token number\">30</span>\n\n    <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">{name: \"$(this.name)\", age: $(this.age)}</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// {name: \"John\", age: 30}</span></code></pre></div>\n<p>그런데 개발을 하다보면 프로퍼티가 추가되거나 삭제, 수정될 수 있다. 그렇게 된다면 위에서 구현한 <code class=\"language-text\">toString</code>을 매번 수정해야 하는 번거롭고 고통스러운 작업이 될 것이다. 그렇다고 프로퍼티에 반복문을 돌리는 방법을 대안으로 사용할 수 있는데, 중첩 객체 등으로 인해 객체가 복잡한 경우 이를 문자열로 변경하는 건 매우 까다로운 작업이라 이 마저도 쉽지 않다. 다행히도 자바스크립트에는 해결할 수 있는 방법으로 이미 구현되어 있는 메서드를 활용하는 방법이다.</p>\n<p>ㅤ</p>\n<h3 id=\"jsonstringify\" style=\"position:relative;\"><a href=\"#jsonstringify\" aria-label=\"jsonstringify permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JSON.stringify</h3>\n<p><code class=\"language-text\">JSON (Javascript Object Notation)</code> 은 값이나 객체를 나타내주는 범용 포맷으로, RFC 4627 표준에 정의되어 있다. JSON은 본래 자바스크립트에서 사용할 목적으로 만들어진 포맷이지만 라이브러리를 사용하면 자바스크립트가 아닌 언어에서도 JSON을 충분히 다룰 수 있어서, JSON을 데이터 교환 목적으로 사용하는 경우가 많습니다. 특히 클라이언트 측 언어가 자바스크립트일 때를 말한다.</p>\n<p>자바스크립트 제공하는 JSON 관련 메서드는 아래와 같다.</p>\n<ul>\n<li><code class=\"language-text\">JSON.stringify</code> : <code class=\"language-text\">객체</code>를 <code class=\"language-text\">JSON</code>으로 바꿔준다.</li>\n<li><code class=\"language-text\">JSON.parse</code> : <code class=\"language-text\">JSON</code>을 <code class=\"language-text\">객체</code>로 바꿔준다.</li>\n</ul>\n<p>예시 :</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> student <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'John'</span><span class=\"token punctuation\">,</span>\n  age<span class=\"token operator\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span>\n  isAdmin<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  course<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'html'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'css'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'js'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  wife<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> json <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> json<span class=\"token punctuation\">)</span> <span class=\"token comment\">// string</span></code></pre></div>\n<p><code class=\"language-text\">JSON.stringify(student)</code>를 호출하자 <code class=\"language-text\">student</code>가 문자열로 바뀌었는데, 이렇게 변경된 문자열은 JSON으로 인코딩된(JSON-encoded), <u>직렬화 처리된(serialized)</u>, 문자열로 변환된(stringified), 결집된(marshalled) 객체라고 부른다. 객체는 이렇게 문자열로 변환된 후에야 비로소 네트워크를 통해 전송되거나 저장소에 저장할 수 있다.</p>\n<p>JSON으로 인코딩된 객체는 일반 객체와 다른 특징을 보인다.</p>\n<ul>\n<li>문자열은 큰따옴표(“)로 감싸야한다. JSON에서는 작은 따옴표(‘)나 백틱을 사용할 수 없다.</li>\n<li>객체 프로퍼티 이름을 큰 따옴표로 감싸야한다.</li>\n</ul>\n<p>적용 가능한 자료형은 다음과 같다.</p>\n<ul>\n<li>객체 <code class=\"language-text\">{...}</code></li>\n<li>배열 <code class=\"language-text\">[...]</code></li>\n<li>\n<p>원시형 :</p>\n<ul>\n<li>문자형</li>\n<li>숫자형</li>\n<li>불린형 값 <code class=\"language-text\">true</code> or <code class=\"language-text\">false</code></li>\n<li><code class=\"language-text\">null</code></li>\n</ul>\n</li>\n</ul>\n<p>예시 :</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"test\"</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [1,2,3]</span></code></pre></div>\n<p>JSON은 <u>데이터 교환을 목적</u>으로 만들어진 언어에 종속되지 않는 포맷으로 자바스크립트 특유의 객체 프로퍼티는 <code class=\"language-text\">JSON.stringify</code>가 처리할 수 없다.</p>\n<p><code class=\"language-text\">JSON.stringify</code> 호출 시 무시되는 프로퍼티는 다음과 같다.</p>\n<ul>\n<li>함수 프로퍼티 (메서드)</li>\n<li>심볼형 프로퍼티 (키가 심볼인 프로퍼티)</li>\n<li>값이 <code class=\"language-text\">undefined</code>인 프로퍼티</li>\n</ul>\n<p>예시 :</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token number\">123</span><span class=\"token punctuation\">,</span>\n  something<span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// {}</span></code></pre></div>\n<p>ㅤ</p>\n<h3 id=\"replacer로-원하는-프로퍼티만-직렬화하기\" style=\"position:relative;\"><a href=\"#replacer%EB%A1%9C-%EC%9B%90%ED%95%98%EB%8A%94-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0%EB%A7%8C-%EC%A7%81%EB%A0%AC%ED%99%94%ED%95%98%EA%B8%B0\" aria-label=\"replacer로 원하는 프로퍼티만 직렬화하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>replacer로 원하는 프로퍼티만 직렬화하기</h3>\n<p><code class=\"language-text\">JSON.stringify</code>의 전체 문법은 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> json <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> replacer<span class=\"token punctuation\">,</span> space<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">value</code> : 인코딩 하려는 값</li>\n<li><code class=\"language-text\">replacer</code> : JSON으로 인코딩 하길 원하는 프로퍼티가 담긴 배열 또는 함수 <code class=\"language-text\">function(key, value)</code></li>\n<li><code class=\"language-text\">space</code> : 서식 변경 목적으로 사용할 공백 문자 수</li>\n</ul>\n<p>예시 1 :</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> room <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  number<span class=\"token operator\">:</span> <span class=\"token number\">23</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> meetup <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  title<span class=\"token operator\">=</span><span class=\"token string\">\"Conference\"</span><span class=\"token punctuation\">,</span>\n  participants<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"John\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"Alice\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  place<span class=\"token operator\">:</span> room<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nroom<span class=\"token punctuation\">.</span>occupiedBy <span class=\"token operator\">=</span> meetup<span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>meetup<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'title'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'participants'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// {\"title\":\"Conference\",\"participants\":[{},{}]}</span></code></pre></div>\n<p>예시 2 :</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>\n  <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>meetup<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token function\">replacer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>key<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>value<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> key <span class=\"token operator\">==</span> <span class=\"token string\">'occupiedBy'</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">:</span> value\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">/* replacer 함수에서 처리하는 키:값 쌍 목록\n:             [object Object]\ntitle=       Conference\nparticipants: [object Object],[object Object]\n0:            [object Object]\nname:         John\n1:            [object Object]\nname:         Alice\nplace:        [object Object]\nnumber:       23\n*/</span></code></pre></div>\n<p>ㅤ</p>\n<h3 id=\"space로-가독성-높이기\" style=\"position:relative;\"><a href=\"#space%EB%A1%9C-%EA%B0%80%EB%8F%85%EC%84%B1-%EB%86%92%EC%9D%B4%EA%B8%B0\" aria-label=\"space로 가독성 높이기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>space로 가독성 높이기</h3>\n<p><code class=\"language-text\">JSON.stringify(value, replacer, space)</code>의 세 번째 인수 <code class=\"language-text\">space</code>는 가독성을 높이기 위해 중간에 삽입해 줄 공백 문자 수를 나타낸다.</p>\n<p>예시 : <code class=\"language-text\">space = 2</code></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'John'</span><span class=\"token punctuation\">,</span>\n  age<span class=\"token operator\">:</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span>\n  roles<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    isAdmin<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    isEditor<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">/* 공백 문자 두 개를 사용하여 들여쓰기함:\n{\n  \"name\": \"John\",\n  \"age\": 25,\n  \"roles\": {\n    \"isAdmin\": false,\n    \"isEditor\": true\n  }\n}\n*/</span></code></pre></div>\n<p>ㅤ</p>\n<h3 id=\"jsonparse\" style=\"position:relative;\"><a href=\"#jsonparse\" aria-label=\"jsonparse permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JSON.parse</h3>\n<p><code class=\"language-text\">JSON.parse</code>를 사용하면 <code class=\"language-text\">JSON</code>으로 인코딩된 객체를 다시 객체로 디코딩 할 수 있다.</p>\n<p>문법 :</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>reviver<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>예시 :</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> userData <span class=\"token operator\">=</span> '<span class=\"token punctuation\">{</span>\n\t<span class=\"token string\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"age\"</span><span class=\"token operator\">:</span> <span class=\"token number\">35</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"isAdmin\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"friends\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>'<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>userData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span> user<span class=\"token punctuation\">.</span>friends<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span></code></pre></div>\n<h2 id=\"변수의-유효범위와-클로저\" style=\"position:relative;\"><a href=\"#%EB%B3%80%EC%88%98%EC%9D%98-%EC%9C%A0%ED%9A%A8%EB%B2%94%EC%9C%84%EC%99%80-%ED%81%B4%EB%A1%9C%EC%A0%80\" aria-label=\"변수의 유효범위와 클로저 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>변수의 유효범위와 클로저</h2>\n<p>자바스크립트는 함수 지향 언어이다. 이런 특징은 개발자에게 많은 자유도를 주는데, 함수를 동적으로 생성할 수 있고, 생성한 함수를 다른 함수에 인수로 넘길 수 있으며, 생성된 곳이 아닌 곳에서 함수를 호출할 수도 있기 때문이다.</p>\n<blockquote>\n<p>ℹ️ 여기서부터는 <code class=\"language-text\">let</code>과 <code class=\"language-text\">const</code>로 선언한 변수만 다룬다.</p>\n<p>자바스크립트에서는 3개의 키워드를 사용해 변수를 선언할 수 있는데, 모던한 방식으로는 <code class=\"language-text\">let</code>, <code class=\"language-text\">const</code>가 있고, 과거의 잔재인 <code class=\"language-text\">var</code>도 있습니다.</p>\n</blockquote>\n<p>ㅤ</p>\n<h3 id=\"중첩-함수\" style=\"position:relative;\"><a href=\"#%EC%A4%91%EC%B2%A9-%ED%95%A8%EC%88%98\" aria-label=\"중첩 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>중첩 함수</h3>\n<p>함수 내부에서 선언한 함수는 <code class=\"language-text\">중첩(nested)</code> 함수라고 부릅니다. 자바스크립트에서는 중첩 함수를 손쉽게 만들 수 있는데, 아래와 같이 코드를 정돈하는데 사용할 수 있습니다.</p>\n<p>예시 :</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">sayHiBye</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">firstName<span class=\"token punctuation\">,</span> lastName</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">getFullName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> firstName <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> lastName\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">let</span> fullName <span class=\"token operator\">=</span> <span class=\"token function\">getFullName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello! '</span> <span class=\"token operator\">+</span> fullName<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Bye! '</span> <span class=\"token operator\">+</span> fullName<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 예시는 외부 변수에 접근해 이름 전체를 반환해주는 중첩 함수 <code class=\"language-text\">getFullName()</code>은 편의상 만든 함수이다. 이런 식으로 자바스크립트에서는 중첩 함수를 흔히 볼 수 있다.</p>\n<p>중첩 함수는 반환될 수 있다는 점에서 매우 흥미롭다. 새로운 객체의 프로퍼티 형태로나 중첩 함수 그 자체로 반환된다. 이렇게 반환된 함수는 어디서든 호출해 사용할 수 있다. 물론 외부 변수에 접근할 수도 있다.</p>\n<p>아래 함수 <code class=\"language-text\">makeCounter</code>는 숫자를 세주는 ‘카운터’ 함수로 호출될 때마다 다음 숫자를 반환환다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">makeCounter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> count<span class=\"token operator\">++</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> counter <span class=\"token operator\">=</span> <span class=\"token function\">makeCounter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2</span></code></pre></div>\n<p>ㅤ</p>\n<h3 id=\"렉시컬-환경\" style=\"position:relative;\"><a href=\"#%EB%A0%89%EC%8B%9C%EC%BB%AC-%ED%99%98%EA%B2%BD\" aria-label=\"렉시컬 환경 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>렉시컬 환경</h3>\n<blockquote>\n<p>⚠️ 매우 어려움 주의</p>\n</blockquote>\n<h4 id=\"단계-1-변수\" style=\"position:relative;\"><a href=\"#%EB%8B%A8%EA%B3%84-1-%EB%B3%80%EC%88%98\" aria-label=\"단계 1 변수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>단계 1. 변수</h4>\n<p>자바스크립트에선 실행 중인 함수, 코드 블록 <code class=\"language-text\">{...}</code>, 스크립트 전체는 <u>렉시컬 환경(Lexical Environment)</u>이라 불리는 <u>내부 숨김 연관 객체(internal hidden associated object)</u>를 갖는다.</p>\n<p>렉시컬 환경 객체는 두 부분으로 구성된다.</p>\n<ol>\n<li><strong>환경 레코드(Environment Record) :</strong> 모든 지역 변수를 프로퍼티로 저장하고 있는 객체로 <code class=\"language-text\">this</code> 값과 같은 기타 정보도 여기에 저장된다.</li>\n<li><strong>외부 렉시컬 환경(Outer Lexical Environment)에 대한 참조 :</strong> 외부 코드와 연관됨</li>\n</ol>\n<p><strong>“변수</strong>는 내부 특수 환경 객체인 <code class=\"language-text\">환경 레코드</code>의 프로퍼티일 뿐이다. <strong>“변수를 가져오거나 변경”</strong> 하는 것은 <strong>“환경 레코드의 프로퍼티를 가져오거나 변경”</strong>함을 의미한다.</p>\n<p>아래 두 줄짜리 코드엔 렉시컬 환경이 하나만 존재한다.</p>\n<img src=\"https://user-images.githubusercontent.com/52126612/91043386-726ff980-e64e-11ea-8e83-6ac7a7d29c3e.png\" alt=\"DAC375F3-A2F6-42B9-AAB4-3913ECE68E89\">\n<p>이렇게 스크립트 전체와 관련된 렉시컬 환경은 <strong>전역 레시컬(global Lexical Environment)</strong>라고 한다.</p>\n<p>위 그림에서 네모 상자는 변수가 저장되는 환경 레코드를 나타내고 붉은 화살표는 <strong>외부 참조(outer reference)</strong>를 나타낸다. 전역 레시컬 환경은 외부 참조를 갖지 않기 때문에 화살표가 <code class=\"language-text\">null</code>을 가리킨다.</p>\n<p>코드가 실행되고 실행 흐름이 이어져 나가면 렉시컬 환경은 변화한다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/52126612/91043379-700d9f80-e64e-11ea-8512-877d6afd913a.png\" alt=\"439F6EB8-7046-4C82-8C9A-B72CF6553604\"></p>\n<p>우측 네모 상자들은 코드가 한 줄, 한 줄 실행될 때마다 전역 렉시컬 환경이 어떻게 변화하는지 보여준다.</p>\n<ol>\n<li>\n<p>스크립트가 실행되면 스크립트 내 선언한 변수 전체가 렉시컬 환경에 올라간다. (pre-populated)</p>\n<ul>\n<li>이때 변수의 상태는 특수 내부 상태(special internal state)인 ‘uninitialized’가 되는데, 자바스크립트 엔진은 ‘uninitialized’ 상태의 변수를 인지하지만, <code class=\"language-text\">let</code>을 만나기 전까지 이 변수를 참조할 수 없다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">let phrase</code>는 아직 값을 할당하기 전이기 때문에 프로퍼티 값은 <code class=\"language-text\">undefined</code>이다.</li>\n<li><code class=\"language-text\">phrase</code>에 갑이 할당되었다.</li>\n<li><code class=\"language-text\">phrase</code>의 값이 변경되었다.</li>\n</ol>\n<p>요약 :</p>\n<ul>\n<li>변수는 특수 내부 객체인 환경 레코드의 프로퍼티이다. 환경 레코드는 현재 실행 중인 함수와 코드 블록, 스크립트와 연관되어 있다.</li>\n<li>변수를 변경하면 환경 레코드의 프로퍼티가 변경된다.</li>\n</ul>\n<blockquote>\n<p><strong>ℹ️ 렉시컬 환경은 명세서에만 존재한다.</strong></p>\n<p>‘렉시컬 환경’은 명세서에서 자바스크립트가 어떻게 동작하는지 설명하는 데 쓰이는 ‘이론상의’ 객체로 코드를 사용해 직접 렉시컬 환경을 얻거나 조작하는 것은 불가능하다.</p>\n<p>자바스크립트 엔진들은 명세서에 언급된 사항을 준수하면서 엔진 고유의 방법을 사용해 렉시컬 환경을 최적화하고, 사용하지 않는 변수를 버려 메모리를 절약하는 방법을 사용한다.</p>\n</blockquote>\n<p>ㅤ</p>\n<h4 id=\"단계-2-함수-선언문\" style=\"position:relative;\"><a href=\"#%EB%8B%A8%EA%B3%84-2-%ED%95%A8%EC%88%98-%EC%84%A0%EC%96%B8%EB%AC%B8\" aria-label=\"단계 2 함수 선언문 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>단계 2. 함수 선언문</h4>\n<p>함수는 변수와 마찬가지로 값이다. 다만, <strong>함수 선언문(function declaration)</strong>으로 선언한 함수는 일반 변수와 달리 바로 <strong>초기화</strong>된다는 점에서 차이가 있다.</p>\n<p>함수 선언문으로 선언한 함수는 렉시컬 환경이 만들어지는 즉시 사용할 수 있다. 변수는 <code class=\"language-text\">let</code>을 만나 선언 될 때까지 사용할 수 없지만 말이다. 또한 선언되기 전에도 함수를 사용할 수 있는 것은 바로 이 때문이다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/52126612/91043373-6d12af00-e64e-11ea-9d3e-5839a964999f.png\" alt=\"0D0431DA-CDED-479C-9793-B4FC6BD45B17\"></p>\n<p>이런 동작 방식은 함수 선언문으로 정의한 함수에만 적용된다 .<code class=\"language-text\">let say = function(name) ...</code> 과 같이 함수를 변수에 할당한 함수 표현식(function expression)은 해당하지 않는다.</p>\n<p>ㅤ</p>\n<h4 id=\"단계-3-내부와-외부-렉시컬-환경\" style=\"position:relative;\"><a href=\"#%EB%8B%A8%EA%B3%84-3-%EB%82%B4%EB%B6%80%EC%99%80-%EC%99%B8%EB%B6%80-%EB%A0%89%EC%8B%9C%EC%BB%AC-%ED%99%98%EA%B2%BD\" aria-label=\"단계 3 내부와 외부 렉시컬 환경 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>단계 3. 내부와 외부 렉시컬 환경</h4>\n<p>함수를 호출해 실행하면 새로운 렉시컬 환경이 자동으로 만들어진다. 이 렉시컬 환경엔 함수 호출 시 넘겨받은 매개변수와 함수의 지역 변수가 저장된다.</p>\n<p><code class=\"language-text\">say(&quot;John&quot;)</code>을 호출하면 아래와 같은 내부 변화가 일어난다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/52126612/91043383-71d76300-e64e-11ea-8d09-1226beac5dca.png\" alt=\"7424E589-9DFA-46FE-A297-6FAFCE90600B\"></p>\n<p>함수가 호출 중인 동안은 호출 중인 함수를 위한 내부 렉시컬 환경과 내부 렉시컬 환경이 가리키는 외부(전역) 렉시컬 환경 두 개를 갖게 된다.</p>\n<ul>\n<li>예시의 내부 렉시컬 환경은 현재 실행 중인 함수 <code class=\"language-text\">say</code>에 상응한다. 내부 렉시컬 환경엔 함수의 인자인 <code class=\"language-text\">name</code>으로부터 유래한 프로퍼티 하나만 있고, <code class=\"language-text\">say(&quot;John&quot;)</code>을 호출했기 때문에 <code class=\"language-text\">name</code>의 값은 <code class=\"language-text\">&quot;John&quot;</code>이 된다.</li>\n<li>예시의 외부 렉시컬 환경은 전역 렉시컬 환경으로 전역 렉시컬 환경은 <code class=\"language-text\">phrase</code>와 <code class=\"language-text\">say</code>를 프로퍼티로 갖는다.</li>\n</ul>\n<p>그리고 내부 렉시컬 환경은 <strong>외부</strong> 렉시컬 환경에 대한 참조를 갖는다.</p>\n<p><strong>코드에서 변수에 접근할 땐 먼저 내부 렉시컬 환경을 검색 범위로 잡습니다. 내부 렉시컬 환경에서 원하는 변수를 찾지 못하면 검색 범위를 내부 렉시컬 환경이 참조하는 외부 렉시컬 환경으로 확장하는데, 이러한 과정은 전역 렉시컬 환경으로 확장될 때까지 반복된다.</strong></p>\n<p>전역 렉시컬 환경에 도달할 때까지 변수를 찾지 못하면 엄격 모드에선 에러가 발생하고, 비 엄격 모드에선 정의되지 않는 변수에 값을 할당하려고 하면 에러가 발생하는 대신 새로운 전역 변수가 만들어지는데, 이는 하위 호환성을 위해 남아있는 기능이다.</p>\n<p>다시 정리하면 다음과 같다.</p>\n<ul>\n<li>함수 <code class=\"language-text\">say</code> 내부의 <code class=\"language-text\">alert</code>에서 변수 <code class=\"language-text\">name</code>에 접근할 땐, 먼저 내부 렉시컬 환경을 살펴, 내부 렉시컬 환경에서 변수 <code class=\"language-text\">name</code>을 찾는다.</li>\n<li><code class=\"language-text\">alert</code> 변수에서 <code class=\"language-text\">phrase</code>에 접근하려는데, 내부 렉시컬 환경에서 <code class=\"language-text\">phrase</code>가 없기 때문에 내부 렉시컬 환경에서 참조 중인 외부 렉시컬 환경으로 확장하여 <code class=\"language-text\">phrase</code>를 찾는다.</li>\n</ul>\n<p>ㅤ</p>\n<h4 id=\"단계-4-반환-함수\" style=\"position:relative;\"><a href=\"#%EB%8B%A8%EA%B3%84-4-%EB%B0%98%ED%99%98-%ED%95%A8%EC%88%98\" aria-label=\"단계 4 반환 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>단계 4. 반환 함수</h4>\n<p><code class=\"language-text\">makeCounter</code> 예시 :</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">makeCounter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> count<span class=\"token operator\">++</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>여기에서도 보면 다음과 같은 순서로 <code class=\"language-text\">count</code>를 찾는다.</p>\n<ul>\n<li><code class=\"language-text\">count</code>가 존재하는 <code class=\"language-text\">function()</code> 내부 렉시컬 환경에서 먼저 <code class=\"language-text\">count</code> 변수를 찾는다.</li>\n<li>만약 내부 렉시컬 환경인 <code class=\"language-text\">function()</code> 내부에 <code class=\"language-text\">count</code>가 없다면 <code class=\"language-text\">function()</code>이 참조하고 있는 외부 렉시컬 환경인 <code class=\"language-text\">makeCounter()</code> 함수 내의 렉시컬 환경에서 <code class=\"language-text\">count</code>를 찾고, 찾았다면 해당 <code class=\"language-text\">count</code> 변수를 참조하여 진행한다</li>\n</ul>\n<blockquote>\n<p><strong>ℹ️ 클로저(closure)</strong></p>\n<p>클로저는 외부 변수를 기억하고 이 외부 변수에 접근할 수 있는 함수를 의미한다. 몇몇 언어에선 클로저를 구현하는게 불가능하거나 특수한 방식으로 함수를 작성해야 클로저를 만들 수 있다. 하지만 자바스크립트에서는 모든 함수가 자연스럽게 클로저가 된다. 예외가 하나 있긴 하지만 대체로 가능하다.</p>\n<p>요점은 자바스크립트의 함수는 숨김 프로퍼티인 <code class=\"language-text\">[[Environment]]</code>를 이용해 자신이 어디서 만들어졌는지를 기억한다. 함수 내부의 코드는 <code class=\"language-text\">[[Environment]]</code>를 사용해 외부 변수에 접근한다.</p>\n<p>프론트엔드 개발자 채용 인터뷰에서 “클로저가 무엇입니까?”라는 질문을 받는다면, 클로저의 정의를 말하고 자바스크립트에서 왜 모든 함수가 클로저인지에 관해 설명하면 될 것 같다. 이때 <code class=\"language-text\">[[Environment]]</code> 프로퍼티와 렉시컬 환경이 어떤 방식으로 동작하는지에 대한 설명을 덧붙이면 좋다.</p>\n</blockquote>\n<p>ㅤ</p>\n<p>ㅤ</p>\n<h2 id=\"오래된-var\" style=\"position:relative;\"><a href=\"#%EC%98%A4%EB%9E%98%EB%90%9C-var\" aria-label=\"오래된 var permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>오래된 ‘var’</h2>\n<blockquote>\n<p><strong>ℹ️ 오래된 스크립트를 읽는 데 도움을 주는 내용</strong></p>\n</blockquote>\n<p>변수 선언 방법에는 세 가지가 있는데, 여기서 <code class=\"language-text\">var</code>로 선언한 변수는 <code class=\"language-text\">let</code>으로 선언한 변수와 유사하다. 대부분의 경우에는 <code class=\"language-text\">let</code>을 <code class=\"language-text\">var</code>로, <code class=\"language-text\">var</code>를 <code class=\"language-text\">let</code>으로 바꿔도 큰 문제 없이 동작한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> message <span class=\"token operator\">=</span> <span class=\"token string\">'안녕하세요.'</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span></code></pre></div>\n<p>하지만 <code class=\"language-text\">var</code>는 초기 자바스크립트 구현 방식 때문에 <code class=\"language-text\">let</code>과 <code class=\"language-text\">const</code>로 선언한 변수와는 다른 방식으로 동작한다. 근래엔 <code class=\"language-text\">var</code>를 쓰지 않아 흔치 않지만, 괴물 같은 존재이다. 그렇다면 <code class=\"language-text\">var</code>를 사용 중인 오래된 스크립트를 <code class=\"language-text\">let</code>으로 바꾸려면 어떻게 해야할까?</p>\n<p>ㅤ</p>\n<h3 id=\"code-classlanguage-textvarcode는-블록-스코프가-없다\" style=\"position:relative;\"><a href=\"#code-classlanguage-textvarcode%EB%8A%94-%EB%B8%94%EB%A1%9D-%EC%8A%A4%EC%BD%94%ED%94%84%EA%B0%80-%EC%97%86%EB%8B%A4\" aria-label=\"code classlanguage textvarcode는 블록 스코프가 없다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">var</code>는 블록 스코프가 없다.</h3>\n<p><code class=\"language-text\">var</code>로 선언한 변수의 스코프는 함수 스코프이거나 전역 스코프로 블록 기준으로 스코프가 생기지 않기 때문에 블록 밖에서 접근 가능하다.</p>\n<p>예시 :</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> test <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></code></pre></div>\n<p><code class=\"language-text\">var</code>는 코드 블록을 무시하기 때문에 <code class=\"language-text\">test</code>는 전역 변수가 된다. 전역 스코프에서 이 변수에 접근할 수 있다.</p>\n<p>반복문에서도 유사한 일이 일어나는데, <code class=\"language-text\">var</code>는 블록이나 루프 수준의 스코프를 형성하지 않기 때문이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 10</span></code></pre></div>\n<p>하지만 코드 블록이 함수 안에 있다면, <code class=\"language-text\">var</code>는 함수 레벨 변수가 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> phrase <span class=\"token operator\">=</span> <span class=\"token string\">'Hello'</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>phrase<span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"Hello\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>phrase<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Error: phrase is not defined</span></code></pre></div>\n<p>ㅤ</p>\n<h3 id=\"var-tolerates-redeclarations\" style=\"position:relative;\"><a href=\"#var-tolerates-redeclarations\" aria-label=\"var tolerates redeclarations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>“var” tolerates redeclarations</h3>\n<p><code class=\"language-text\">let</code>의 경우 동일한 변수명을 두 번 선언할 수 없다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> user\n<span class=\"token keyword\">let</span> user <span class=\"token comment\">// SyntaxError: 'user' has already been declared</span></code></pre></div>\n<p>하지만 <code class=\"language-text\">var</code>의 경우에는 동일한 변수명을 두 번 선언할 수 있고 값 역시 변경된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> user <span class=\"token operator\">=</span> <span class=\"token string\">'Pete'</span>\n<span class=\"token keyword\">var</span> user <span class=\"token operator\">=</span> <span class=\"token string\">'John'</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span> <span class=\"token comment\">// John</span></code></pre></div>\n<p>ㅤ</p>\n<h3 id=\"선언하기-전-사용할-수-있는-code-classlanguage-textvarcode\" style=\"position:relative;\"><a href=\"#%EC%84%A0%EC%96%B8%ED%95%98%EA%B8%B0-%EC%A0%84-%EC%82%AC%EC%9A%A9%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8A%94-code-classlanguage-textvarcode\" aria-label=\"선언하기 전 사용할 수 있는 code classlanguage textvarcode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>선언하기 전 사용할 수 있는 <code class=\"language-text\">var</code></h3>\n<p><code class=\"language-text\">var</code> 선언은 함수가 시작될 때 처리된다. 전역에서 선언한 변수라면 스크립트가 시작될 때 처리된다.</p>\n<p>함수 본문 내에서 <code class=\"language-text\">var</code>로 선언한 변수는 선언 위치와 상관없이 함수 본문이 시작되는 지점에서 정의된다. (단, 변수가 중첩 함수 내에서 정의되지 않아야 이 규칙이 적용된다.</p>\n<p>예시 : <code class=\"language-text\">1</code>과 <code class=\"language-text\">2</code>는 동일하게 작동한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 1</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  phrase <span class=\"token operator\">=</span> <span class=\"token string\">'Hello'</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>phrase<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">var</span> phrase\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 2</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> phrase\n  phrase <span class=\"token operator\">=</span> <span class=\"token string\">'Hello'</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>phrase<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이렇게 변수가 끌어올려 지는 현상을 <strong>‘호이스팅(hoisting)’</strong>이라 부른다. <code class=\"language-text\">var</code>로 선언한 모든 변수는 함수의 최상위로 ‘끌어 올려지기’ 때문이다.</p>\n<p>ㅤ</p>\n<p>ㅤ</p>\n<h2 id=\"전역-객체\" style=\"position:relative;\"><a href=\"#%EC%A0%84%EC%97%AD-%EA%B0%9D%EC%B2%B4\" aria-label=\"전역 객체 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>전역 객체</h2>\n<p>전역 객체를 사용하면 어디서나 사용 가능한 변수나 함수를 만들 수 있다. 전역 객체는 언어 자체나 호스트 환경에 기본 내장되어 있는 경우가 많은데, 브라우저 환경에선 전역 객체를 <code class=\"language-text\">window</code>, Node.js 환경에서는 <code class=\"language-text\">global</code>이라고 부른다. 각 호스트 환경마다 이름은 다르다.</p>\n<p>전역 객체 이름을 <code class=\"language-text\">globalThis</code>로 표준화하자는 내용이 최근에 자바스크립트 명세에 추가되었기 때문에 모든 호스트 환경이 이를 따라야한다. <code class=\"language-text\">chromium</code> 기반이 아닌 몇몇 브라우저는 아직 <code class=\"language-text\">globalThis</code>를 지원하진 않지만 이에 대한 폴리필(polyfill)을 쉽게 만들 수 있다.</p>\n<p>튜토리얼은 브라우저 환경에서 구동되기 때문에 <code class=\"language-text\">window</code> 라는 전역 객체를 사용하도록 한다. 만약 다른 호스트 환경에서 작업한다면, <code class=\"language-text\">globalThis</code>를 사용하면 된다.</p>\n<p>예시 :</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello'</span><span class=\"token punctuation\">)</span>\nwindow<span class=\"token punctuation\">.</span><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>브라우저에서 <code class=\"language-text\">let</code>이나 <code class=\"language-text\">const</code>가 아닌 <code class=\"language-text\">var</code>로 선언한 전역 함수나 전역 변수는 전역 객체의 프로퍼티가 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> gVar <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>gVar<span class=\"token punctuation\">)</span></code></pre></div>\n<p>하위 호환성 때문에 이런 방식으로 전역 객체를 사용해도 동작하지만, 추천하지 않는다. 모듈을 사용하는 모던 자바스크립트는 이런 방식을 지원하지 않는다.</p>\n<p><code class=\"language-text\">var</code> 대신 <code class=\"language-text\">let</code>을 사용하면 위 예시와 달리 전역 객체를 통해 변수에 접근할 수 없다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> gLet <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>gLet<span class=\"token punctuation\">)</span> <span class=\"token comment\">// undefined</span></code></pre></div>\n<p>중요한 변수라서 모든 곳에서 사용할 수 있게 하려면, 아래와 같이 전역 객체에 직접 프로퍼티를 추가해줘야한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">window<span class=\"token punctuation\">.</span>currentUser <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'John'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>currentUser<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>currentUser<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span></code></pre></div>\n<p>ㅤ</p>\n<p>ㅤ</p>\n<h2 id=\"객체로서의-함수와-기명-함수-표현식\" style=\"position:relative;\"><a href=\"#%EA%B0%9D%EC%B2%B4%EB%A1%9C%EC%84%9C%EC%9D%98-%ED%95%A8%EC%88%98%EC%99%80-%EA%B8%B0%EB%AA%85-%ED%95%A8%EC%88%98-%ED%91%9C%ED%98%84%EC%8B%9D\" aria-label=\"객체로서의 함수와 기명 함수 표현식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>객체로서의 함수와 기명 함수 표현식</h2>\n<p>자바스크립트에서 함수는 값으로 취급된다. 또한 모든 값은 자료형을 가지고 있는데, 그럼 함수의 자료형은 무엇일까? <strong>함수의 자료형은 객체</strong>로 함수는 호출 가능한(callable) ‘행동 객체’로 이해하면 쉽다. 자바스크립트에서 함수는 호출 할 수 있을 뿐만 아니라 객체처럼 함수에 프로퍼티를 추가, 제거하거나 참조를 통해 전달할 수도 있다.</p>\n<p>ㅤ</p>\n<h3 id=\"code-classlanguage-textnamecode-프로퍼티\" style=\"position:relative;\"><a href=\"#code-classlanguage-textnamecode-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0\" aria-label=\"code classlanguage textnamecode 프로퍼티 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">name</code> 프로퍼티</h3>\n<p>함수 객체엔 몇 가지 쓸만한 프로퍼티가 있는데, <code class=\"language-text\">name</code> 프로퍼티를 사용하면 함수 이름을 가져올 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hi!'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>sayHi<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token comment\">// sayHi</span></code></pre></div>\n<p>함수 객체에 이름을 할당해주는 로직은 아주 똑똑해서 익명 함수라도 자동으로 이름이 할당된다.</p>\n<p>이러한 이름을 명세서에서 정의되기를 ‘contextual name’이라고 부른다. 이름이 없는 함수의 이름을 지정할 땐 컨텍스트에서 이름을 가져온다. 객체 메서드의 이름도 <code class=\"language-text\">name</code> 프로퍼티를 이용해 가져올 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>sayHi<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span></code></pre></div>\n<p>하지만, 객체 메서드 이름은 함수처럼 <u>자동 할당</u>되지 않는다. 적절한 이름을 추론하는게 불가능한 상황이 있는데, 이런 경우에는 <code class=\"language-text\">name</code> 프로퍼티엔 빈 문자열이 저장된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token comment\">// &lt;빈 문자열></span></code></pre></div>\n<p>ㅤ</p>\n<h3 id=\"code-classlanguage-textlengthcode-프로퍼티\" style=\"position:relative;\"><a href=\"#code-classlanguage-textlengthcode-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0\" aria-label=\"code classlanguage textlengthcode 프로퍼티 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">length</code> 프로퍼티</h3>\n<p>내장 프로퍼티 <code class=\"language-text\">length</code>는 함수 매개변수의 개수를 반환한다. (단, 나머지 매개변수는 개수에 포함되지 않는다.)</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">f1</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">f2</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">many</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>more</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>f1<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>f2<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>many<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2</span></code></pre></div>\n<p><code class=\"language-text\">length</code> 프로퍼티는 다른 함수 안에서 동작하는 함수의 <a href=\"https://en.wikipedia.org/wiki/Type_introspection\">타입을 검사(type introspection)</a> 할 때도 종종 사용된다. 질문에 쓰일 <code class=\"language-text\">question</code>과 질문에 대한 답에 따라 호출할 임의의 수를 <code class=\"language-text\">handler</code> 함수를 함께 받는 함수 <code class=\"language-text\">ask</code>를 예시로 들면, 사용자가 답을 제출하면 <code class=\"language-text\">ask</code> 핸들러 함수를 호출한다. 이때 우리는 두 종류의 핸들러 함수를 <code class=\"language-text\">ask</code>에 전달할 수 있다.</p>\n<ul>\n<li>인수가 없는 함수로, 사용자가 OK를 클릭했을 때만 호출됨</li>\n<li>인수가 있는 함수로, 사용자가 OK를 클릭하든 Cancel을 클릭하든 호출됨</li>\n</ul>\n<p>그리고 <code class=\"language-text\">handler.length</code> 프로퍼티를 사용하면 상황에 맞는 <code class=\"language-text\">handler</code>를 호출할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">ask</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">question<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>handlers</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> isYes <span class=\"token operator\">=</span> <span class=\"token function\">confirm</span><span class=\"token punctuation\">(</span>question<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> handler <span class=\"token keyword\">of</span> handlers<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>handler<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isYes<span class=\"token punctuation\">)</span> <span class=\"token function\">handler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">handler</span><span class=\"token punctuation\">(</span>isYes<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 사용자가 OK를 클릭한 경우, 핸들러 두 개를 모두 호출함</span>\n<span class=\"token comment\">// 사용자가 Cancel을 클릭한 경우, 두 번째 핸들러만 호출함</span>\n<span class=\"token function\">ask</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">'질문 있으신가요?'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'OK를 선택하셨습니다.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>인수의 종류에 따라 인수를 다르게 처리하는 방식을 프로그래밍 언어에선 <a href=\"https://en.wikipedia.org/wiki/Polymorphism_(computer_science)\">다형성(polymorphism)</a> 이라 부른다.</p>\n<p>ㅤ</p>\n<h3 id=\"커스텀-프로퍼티\" style=\"position:relative;\"><a href=\"#%EC%BB%A4%EC%8A%A4%ED%85%80-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0\" aria-label=\"커스텀 프로퍼티 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>커스텀 프로퍼티</h3>\n<p>함수에 자체적으로 만든 프로퍼티를 추가할 수 있습니다.</p>\n<p>예시 :</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hi'</span><span class=\"token punctuation\">)</span>\n\n  sayHi<span class=\"token punctuation\">.</span>counter<span class=\"token operator\">++</span>\n<span class=\"token punctuation\">}</span>\nsayHi<span class=\"token punctuation\">.</span>counter <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token comment\">// 초기값 설정</span>\n\n<span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sayHi<span class=\"token punctuation\">.</span>counter<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 나중에 이런 식으로 동일 함수를 n번 실행 시 막는 방식에 사용될 수 있을 것 같다.</span></code></pre></div>\n<blockquote>\n<p><strong>⚠️ 프로퍼티는 변수가 아니다.</strong></p>\n<p><code class=\"language-text\">sayHi.counter = 0</code>과 같이 함수에 프로퍼티를 할당해도 함수 내 지역변수 <code class=\"language-text\">counter</code>가 만들어지지 않는다. <code class=\"language-text\">counter</code> 프로퍼티와 변수 <code class=\"language-text\">let counter</code>는 전혀 관계가 없다.</p>\n<p>프로퍼티를 저장하는 것처럼 함수를 객체와 같이 다룰 수 있지만, 이는 실행에 아무 영향을 끼치지 않는다. 변수는 함수 프로퍼티가 아니고 함수 프로퍼티는 변수가 아니기 때문에 둘 사이에는 공통점이 없다.</p>\n</blockquote>\n<p>클로저는 함수 프로퍼티로 대체할 수 있다. 앞서 살펴본 바 있는 <code class=\"language-text\">counter</code> 함수를 함수 프로퍼티를 사용해 바꿔보면 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">makeCounter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// let count = 0 대신 아래 메서드(프로퍼티)를 사용함</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> counter<span class=\"token punctuation\">.</span>count<span class=\"token operator\">++</span>\n  <span class=\"token punctuation\">}</span>\n\n  counter<span class=\"token punctuation\">.</span>count <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">return</span> counter\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> counter <span class=\"token operator\">=</span> <span class=\"token function\">makeCounter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token function\">counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token function\">counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span></code></pre></div>\n<p>함수 안에 <code class=\"language-text\">counter</code> 함수를 만들어 <code class=\"language-text\">count</code> 프로퍼티가 <code class=\"language-text\">makeCounter()</code> 함수 안에서 존재하도록 했다고 보인다. 그렇다면 이 방법이 클로저를 사용하는 것보다 나은 방법일까?</p>\n<p>두 방법의 차이점은 <code class=\"language-text\">count</code> 값이 외부 변수에 저장되어 있는 경우 드러난다. 클로저를 사용한 경우 외부 코드에서 <code class=\"language-text\">count</code>에 접근할 수 없어 오직 중첩함수 내에서만 <code class=\"language-text\">count</code> 값을 수정할 수 있다. 반면 함수 프로퍼티를 사용해 <code class=\"language-text\">count</code> 함수에 바인딩시킨 경우엔 다음 예시와 같이 외부에서 값을 수정할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">makeCounter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> counter<span class=\"token punctuation\">.</span>count<span class=\"token operator\">++</span>\n  <span class=\"token punctuation\">}</span>\n\n  counter<span class=\"token punctuation\">.</span>count <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">return</span> counter\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> counter <span class=\"token operator\">=</span> <span class=\"token function\">makeCounter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\ncounter<span class=\"token punctuation\">.</span>count <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token function\">counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 10</span></code></pre></div>\n<p>ㅤ</p>\n<p>ㅤ</p>\n<h2 id=\"code-classlanguage-textnew-functioncode-문법\" style=\"position:relative;\"><a href=\"#code-classlanguage-textnew-functioncode-%EB%AC%B8%EB%B2%95\" aria-label=\"code classlanguage textnew functioncode 문법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">new Function</code> 문법</h2>\n<p>함수 표현식과 함수 선언문 외 함수를 만드는 방법이 하나 더 있는데, 잘 사용되지 않는 방법이지만 대안이 없을 때 사용된다.</p>\n<h3 id=\"문법\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EB%B2%95\" aria-label=\"문법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문법</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> func <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Function</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">[</span>arg1<span class=\"token punctuation\">,</span> arg2<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">,</span> argN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> functionBody <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>예시 :</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> sum <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'return a + b'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> sayHi <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">(</span><span class=\"token string\">'alert(\"Hi!\")'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>ㅤ</p>\n<h3 id=\"클로저\" style=\"position:relative;\"><a href=\"#%ED%81%B4%EB%A1%9C%EC%A0%80\" aria-label=\"클로저 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클로저</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">getFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> <span class=\"token string\">'test'</span>\n  <span class=\"token keyword\">let</span> func <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">(</span><span class=\"token string\">'alert(value)'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">getFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ReferenceError: value is not defined</span></code></pre></div>\n<p>이런 식으로 <code class=\"language-text\">new Function</code>으로 함수를 만들면 함수가 참조하고 있는 외부 렉시컬 환경의 <code class=\"language-text\">value</code> 변수를 참조할 수 없다. 아래와 같이 일반적인 함수 할당으로 사용 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">getFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> <span class=\"token string\">'test'</span>\n  <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">func</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">getFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>ㅤ</p>\n<p>ㅤ</p>\n<h2 id=\"settimeout과-setinterval을-이용한-호출-스케줄링\" style=\"position:relative;\"><a href=\"#settimeout%EA%B3%BC-setinterval%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-%ED%98%B8%EC%B6%9C-%EC%8A%A4%EC%BC%80%EC%A4%84%EB%A7%81\" aria-label=\"settimeout과 setinterval을 이용한 호출 스케줄링 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>setTimeout과 setInterval을 이용한 호출 스케줄링</h2>\n<p>개발을 하다보면 일정 시간이 지난 후에 원하는 함수를 예약 실행(호출)할 수 있게 하고 싶은데, 이 때 이용하는 것이 ‘호출 스케줄링(scheduling a call)‘이다. 다음 두 가지 방법이 있다.</p>\n<ul>\n<li><code class=\"language-text\">setTimeout</code>을 이용해 일정 시간이 지난 후에 함수를 실행하는 방법</li>\n<li><code class=\"language-text\">setInterval</code>을 이용해 일정 시간 간격을 두고 함수를 실행하는 방법</li>\n</ul>\n<p>자바스크립트 명세서엔 <code class=\"language-text\">setTimeout</code>과 <code class=\"language-text\">setInterval</code>이 명시되어 있지 않지만 시중에 나와있는 모든 브라우저, Node.js를 포함한 자바스크립트 호스트 환경 대부분이 이와 유사한 메서드와 내부 스케줄러를 지원한다.</p>\n<p>ㅤ</p>\n<h3 id=\"settimeout\" style=\"position:relative;\"><a href=\"#settimeout\" aria-label=\"settimeout permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>setTimeout</h3>\n<p>문법 :</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> timerId <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>func<span class=\"token operator\">|</span>code<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>delay<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>arg1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>arg2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">func|code</code> : 실행하고자 하는 코드로, 함수 또는 문자열 형태이다. 대개는 이 자리에 함수가 들어가며, 하위 호환성을 위해 문자열도 받을 수 있게 해놓았지만, 추천하진 않는다.</li>\n<li><code class=\"language-text\">delay</code> : 실행 전 대기 시간으로, 단위는 밀리초(milisecond, 1000ms = 1s)로 기본값은 0이다.</li>\n<li><code class=\"language-text\">arg1, arg2, ...</code> : 함수에 전달할 인수들로 IE9 이하에선 지원하지 않는다.</li>\n</ul>\n<p>예시 :</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hi!'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>sayHi<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1초 뒤 실행</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">sayHi2</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">who<span class=\"token punctuation\">,</span> phrase</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hi! </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>who<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>phrase<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>sayHi2<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'John'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'GoodMorning!'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//</span>\n\n<span class=\"token comment\">// 익명 화살표 함수를 이용한 방법</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'안녕하세요.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h4 id=\"cleartimeout으로-스케줄링-취소\" style=\"position:relative;\"><a href=\"#cleartimeout%EC%9C%BC%EB%A1%9C-%EC%8A%A4%EC%BC%80%EC%A4%84%EB%A7%81-%EC%B7%A8%EC%86%8C\" aria-label=\"cleartimeout으로 스케줄링 취소 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>clearTimeout으로 스케줄링 취소</h4>\n<p><code class=\"language-text\">setTimeout</code>을 호출하면 ‘타이머 식별자(timer identifier)‘가 반환되는데, 스케줄링을 취소하고 싶을 땐 이 식별자(<code class=\"language-text\">timerId</code>)를 사용하면 된다.</p>\n<p>예시 :</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> timerId <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'안녕하세요.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>timerId<span class=\"token punctuation\">)</span></code></pre></div>\n<p>ㅤ</p>\n<h3 id=\"setinterval\" style=\"position:relative;\"><a href=\"#setinterval\" aria-label=\"setinterval permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>setInterval</h3>\n<p><code class=\"language-text\">setInterval</code> 메서드는 <code class=\"language-text\">setTimeout</code>과 동일한 문법을 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> timerId <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>func<span class=\"token operator\">|</span>code<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>delay<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>arg1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>arg2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>예시 :</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> timerId <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'tictoc'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">setTImeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>timerId<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'stop'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>ㅤ</p>\n<h3 id=\"중첩-settimeout\" style=\"position:relative;\"><a href=\"#%EC%A4%91%EC%B2%A9-settimeout\" aria-label=\"중첩 settimeout permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>중첩 setTimeout</h3>\n<p>무언가를 일정 간격을 두고 실행하는 방법에는 크게 2가지가 있는데, 하나는 <code class=\"language-text\">setInterval</code>을 이용하는 방법이고, 다른 하나는 아래 예시와 같이 중첩 <code class=\"language-text\">setTimeout</code>을 이용하는 방법이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> timerId <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">tick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'tick'</span><span class=\"token punctuation\">)</span>\n  timerId <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>tick<span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>ㅤ</p>\n<h3 id=\"대기시간이-0인-settimeout\" style=\"position:relative;\"><a href=\"#%EB%8C%80%EA%B8%B0%EC%8B%9C%EA%B0%84%EC%9D%B4-0%EC%9D%B8-settimeout\" aria-label=\"대기시간이 0인 settimeout permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>대기시간이 0인 setTimeout</h3>\n<p><code class=\"language-text\">setTimeout(func, 0)</code> 혹은 <code class=\"language-text\">setTimeout(func)</code>를 사용하면 <code class=\"language-text\">setTimeout</code>의 대기 시간을 0으로 설정할 수 있다. 이렇게 대기 시간을 <code class=\"language-text\">0</code>으로 설정하면 <code class=\"language-text\">func</code>를 ‘가능한 한’ 빨리 실행할 수 있다. 다만, 현재 스케줄링인 스크립트의 처리가 종료된 이후에 스케줄링 함수가 실행된다.</p>\n<p>이런 특징을 이용해 현재 스크립트의 실행이 종료된 ‘직후에’ 원하는 함수가 실행될 수 있게 할 수 있다.</p>\n<p>예시 :</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'World'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>ㅤ</p>\n<p>ㅤ</p>\n<h2 id=\"callapply와-데코레이터-포워딩\" style=\"position:relative;\"><a href=\"#callapply%EC%99%80-%EB%8D%B0%EC%BD%94%EB%A0%88%EC%9D%B4%ED%84%B0-%ED%8F%AC%EC%9B%8C%EB%94%A9\" aria-label=\"callapply와 데코레이터 포워딩 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>call/apply와 데코레이터, 포워딩</h2>\n<p>자바스크립트는 함수를 다룰 때 탁월한 유연성을 제공한다. 함수는 이곳저곳 전달될 수 있고, 객체로도 사용될 수 있다. 이번 챕터에선 함수 간에 호출을 어떻게 <code class=\"language-text\">포워딩(forwarding)</code> 하는지, 함수를 어떻게 <code class=\"language-text\">데코레이팅(decorating)</code> 하는지 살펴본다.</p>\n<p>ㅤ</p>\n<h3 id=\"코드-변경-없이-캐싱-기능-추가하기\" style=\"position:relative;\"><a href=\"#%EC%BD%94%EB%93%9C-%EB%B3%80%EA%B2%BD-%EC%97%86%EC%9D%B4-%EC%BA%90%EC%8B%B1-%EA%B8%B0%EB%8A%A5-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0\" aria-label=\"코드 변경 없이 캐싱 기능 추가하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코드 변경 없이 캐싱 기능 추가하기</h3>\n<p>CPU를 많이 잡아먹지만 결과는 안정적인 함수 <code class=\"language-text\">slow(x)</code>가 있다고 가정할 때, 결과가 안정적이라는 말은 <code class=\"language-text\">x</code>가 같으면 호출 결과도 같다는 것을 의미한다. 그리고 만약 <code class=\"language-text\">slow(x)</code>가 자주 호출된다면, 결과를 어딘가에 저장(캐싱)해 재연산에 걸리는 시간을 줄이고 싶을 것이다.</p>\n<p>아래 예시는 <code class=\"language-text\">slow()</code> 안에 캐싱 관련 코드를 추가하는 대신, 래퍼 함수를 만들어 캐싱 기능을 추가할 것이고, 이런 식으로 래퍼 함수를 만들면 여러 가지 이점이 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">slow</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">slow(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>x<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)을/를 호출</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> x\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">cachingDecorator</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">func</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> cache <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cache<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> cache<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n    cache<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> result\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nslow <span class=\"token operator\">=</span> <span class=\"token function\">cachingDecorator</span><span class=\"token punctuation\">(</span>slow<span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token function\">slow</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// slow(1)이 저장되었습니다.</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'다시 호출: '</span> <span class=\"token operator\">+</span> <span class=\"token function\">slow</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 동일한 결과</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token function\">slow</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// slow(2)가 저장되었습니다.</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'다시 호출: '</span> <span class=\"token operator\">+</span> <span class=\"token function\">slow</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 윗줄과 동일한 결과</span></code></pre></div>\n<p><code class=\"language-text\">cachingDecorator</code> 같이 인수로 받은 함수의 행동을 변경시켜주는 함수를 데코레이터(decorator)라 부른다. 모든 함수를 대상으로 <code class=\"language-text\">cachingDecorator</code>를 호출 할 수 있는데, 이 때 반환되는 것은 캐싱 래퍼이다. 함수에 <code class=\"language-text\">cachingDecorator</code>를 적용하기만 하면 캐싱이 가능한 함수를 원하는 만큼 구현할 수 있기 때문에 데코레이터 함수는 아주 유용하게 사용된다.</p>\n<p>캐싱 관련 코드를 함수 코드와 분리할 수 있기 때문에 함수의 코드가 간결해진다는 장점도 있다.</p>\n<p>ㅤ</p>\n<h3 id=\"code-classlanguage-textfunccallcode을-이용해-컨텍스트-지정하기\" style=\"position:relative;\"><a href=\"#code-classlanguage-textfunccallcode%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%B4-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8-%EC%A7%80%EC%A0%95%ED%95%98%EA%B8%B0\" aria-label=\"code classlanguage textfunccallcode을 이용해 컨텍스트 지정하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">func.call</code>을 이용해 컨텍스트 지정하기</h3>\n<p>위에서 구현한 캐싱 데코레이터는 객체 메서드에 사용하기엔 적합하지 않다. 객체 메서드 <code class=\"language-text\">worker.slow()</code>는 데코레이터 적용 후 제대로 동작하지 않는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// worker.slow에 캐싱 기능을 추가해봅시다.</span>\n<span class=\"token keyword\">let</span> worker <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">someMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function\">slow</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// CPU 집약적인 작업이라 가정</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">slow(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>x<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)을/를 호출함</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> x <span class=\"token operator\">*</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">someMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// (*)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 이전과 동일한 코드</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">cachingDecorator</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">func</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> cache <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cache<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> cache<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token comment\">// (**)</span>\n    cache<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> result\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>worker<span class=\"token punctuation\">.</span><span class=\"token function\">slow</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 기존 메서드는 잘 동작합니다.</span>\n\nworker<span class=\"token punctuation\">.</span>slow <span class=\"token operator\">=</span> <span class=\"token function\">cachingDecorator</span><span class=\"token punctuation\">(</span>worker<span class=\"token punctuation\">.</span>slow<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 캐싱 데코레이터 적용</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>worker<span class=\"token punctuation\">.</span><span class=\"token function\">slow</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Error: Cannot read property 'someMethod' of undefined</span></code></pre></div>\n<p><code class=\"language-text\">(*)</code>으로 표시한 줄에 <code class=\"language-text\">this.someMethod</code> 접근에 실패했기 때문에 에러가 발생했는데, 원인은 <code class=\"language-text\">(**)</code> 표시한 줄에 래퍼가 기존 함수 <code class=\"language-text\">func(x)</code>를 호출하면 <code class=\"language-text\">this</code>가 <code class=\"language-text\">undefined</code>가 되기 때문이다. 말 그대로 <code class=\"language-text\">this.someMethod()</code>에서 <code class=\"language-text\">this</code>가 사라지게 된다.</p>\n<p>아래 코드는 비슷한 현상을 나타낸다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> func <span class=\"token operator\">=</span> worker<span class=\"token punctuation\">.</span>slow\n<span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>래퍼가 기존 메서드 호출 결과를 전달하려 했지만, <code class=\"language-text\">this</code>의 컨텍스트가 사라지면서 <code class=\"language-text\">this.someMethod</code>를 더 이상 실행할 수 없게 되었다. 이를 해결하기 위해 먼저, <code class=\"language-text\">this</code>를 명시적으로 고정해 함수를 호출할 수 있게 해주는 특별한 내장 함수 메서드 <a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Function/call\">func.call(context, …args)</a>에 대해 알아보자.</p>\n<p>문법 :</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">func</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> arg1<span class=\"token punctuation\">,</span> arg2<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>메서드를 호출하면 메서드의 첫 번째 인수가 <code class=\"language-text\">this</code>, 이어지는 인수가 <code class=\"language-text\">func</code>의 인수가 된 후 <code class=\"language-text\">func</code>를 호출한다. (음 이게 무슨 소리지..)</p>\n<p>예시 :</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">func</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'John'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token function\">sayHi</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span> <span class=\"token comment\">// this = \"John\"</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">phrase</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>phrase<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'John'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token function\">say</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">,</span> <span class=\"token string\">'Hello!'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>그럼 캐싱을 다시 해보면 아래 코드처럼 변경하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// worker.slow에 캐싱 기능을 추가해봅시다.</span>\n<span class=\"token keyword\">let</span> worker <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">someMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function\">slow</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">slow(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>x<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)을/를 호출함</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> x <span class=\"token operator\">*</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">someMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">cachingDecorator</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">func</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> cache <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cache<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> cache<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token function\">func</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span> <span class=\"token comment\">// (*) 수정</span>\n    cache<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> result\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nworker<span class=\"token punctuation\">.</span>slow <span class=\"token operator\">=</span> <span class=\"token function\">cachingDecorator</span><span class=\"token punctuation\">(</span>worker<span class=\"token punctuation\">.</span>slow<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 캐싱 데코레이터 적용</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>worker<span class=\"token punctuation\">.</span><span class=\"token function\">slow</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ol>\n<li>데코레이터 적용한 후에 <code class=\"language-text\">worker.slow</code>는 래퍼 <code class=\"language-text\">function (x) {...}</code>가 된다.</li>\n<li><code class=\"language-text\">worker.slow(2)</code>를 실행하면 래퍼는 <code class=\"language-text\">2</code>를 인수로 받고, <code class=\"language-text\">this=worker</code>가 된다.</li>\n<li>결과가 캐시되지 않은 상황이라면, <code class=\"language-text\">func.call(this, x)</code>에서 현재 <code class=\"language-text\">this=(worker)</code>와 인수(<code class=\"language-text\">2</code>)를 원본 메서드에 전달한다.</li>\n</ol>\n<p>ㅤ</p>\n<h3 id=\"여러-인수-전달하기\" style=\"position:relative;\"><a href=\"#%EC%97%AC%EB%9F%AC-%EC%9D%B8%EC%88%98-%EC%A0%84%EB%8B%AC%ED%95%98%EA%B8%B0\" aria-label=\"여러 인수 전달하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>여러 인수 전달하기</h3>\n<p><code class=\"language-text\">cachingDecorator</code>를 다채롭게 해보면, 현재 구조상 하나의 변수만 받을 수 있는데, 만약 복수 인수를 가진 메서드가 있다면 어떻게 해야할까?</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> worker <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">slow</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">min<span class=\"token punctuation\">,</span> max</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> min <span class=\"token operator\">+</span> max\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\nworker<span class=\"token punctuation\">.</span>slow <span class=\"token operator\">=</span> <span class=\"token function\">cachingDecorator</span><span class=\"token punctuation\">(</span>worker<span class=\"token punctuation\">.</span>slow<span class=\"token punctuation\">)</span></code></pre></div>\n<p>지금까지는 인수 <code class=\"language-text\">x</code> 하나뿐이었기 때문에, <code class=\"language-text\">cache.set(x, result)</code>로 결과를 저장하고 <code class=\"language-text\">cache.get(x)</code>로 저장된 결과를 불러오기만 하면 되었는데, 이제부터는 <code class=\"language-text\">(min, max)</code>와 같이 인수가 여러 개이고, 이 인수들을 넘겨 호출된 결과를 기억해야한다. 반면에 네이티브 맵은 단일 키만 받는다.</p>\n<p>해결 방법은 여러 가지다.</p>\n<ol>\n<li>복수 키를 지원하는 맵과 유사한 자료 구조 구현하기 (서드 파티 라이브러리 등을 이용해도 됨)</li>\n<li>중첩 맵을 사용하기. <code class=\"language-text\">(max, result)</code> 쌍 저장은 <code class=\"language-text\">cache.set(min)</code>으로 <code class=\"language-text\">result</code>는 <code class=\"language-text\">cache.get(min).get(max)</code>을 사용해 얻는다. 하지만 키가 많아질 수록 복잡해진다.</li>\n<li>두 값을 하나로 합치기. <code class=\"language-text\">맵</code>의 키로 <code class=\"language-text\">&quot;min, max&quot;</code>와 같이 하나로 사용하여 키로 이용. 또는 여러 값을 하나로 합치는 해싱 함수를 구현해 이용</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> worker <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">slow</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">min<span class=\"token punctuation\">,</span> max</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">slow(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>min<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">,</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>max<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)을/를 호출함</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> min <span class=\"token operator\">+</span> max\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">cachingDecorator</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">func<span class=\"token punctuation\">,</span> hash</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> cache <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> key <span class=\"token operator\">=</span> <span class=\"token function\">hash</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span> <span class=\"token comment\">// (*)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cache<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> cache<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token function\">func</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>arguments<span class=\"token punctuation\">)</span> <span class=\"token comment\">// (**)</span>\n\n    cache<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> result\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">hash</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">','</span> <span class=\"token operator\">+</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\nworker<span class=\"token punctuation\">.</span>slow <span class=\"token operator\">=</span> <span class=\"token function\">cachingDecorator</span><span class=\"token punctuation\">(</span>worker<span class=\"token punctuation\">.</span>slow<span class=\"token punctuation\">,</span> hash<span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>worker<span class=\"token punctuation\">.</span><span class=\"token function\">slow</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 제대로 동작합니다.</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'다시 호출: '</span> <span class=\"token operator\">+</span> worker<span class=\"token punctuation\">.</span><span class=\"token function\">slow</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 동일한 결과 출력(캐시된 결과)</span></code></pre></div>\n<p>ㅤ</p>\n<h3 id=\"funcapply\" style=\"position:relative;\"><a href=\"#funcapply\" aria-label=\"funcapply permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>func.apply</h3>\n<p>위 같이 여러 인수를 사용할 때에는 <code class=\"language-text\">func.call</code> 대신에 <code class=\"language-text\">func.apply</code>를 사용해도 된다.</p>\n<p>문법 :</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">func</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">apply</code>는 <code class=\"language-text\">func</code>의 <code class=\"language-text\">this</code>를 <code class=\"language-text\">context</code>로 고정해주고, 유사 배열 객체인 <code class=\"language-text\">args</code>를 인수로 사용할 수 있게 해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">func</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> args1<span class=\"token punctuation\">,</span> args2<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">func</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>arg1<span class=\"token punctuation\">,</span> arg2<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>약간의 차이가 있다.</p>\n<ul>\n<li>전개 문법 <code class=\"language-text\">...</code>은 이터러블 <code class=\"language-text\">args</code>를 분해하여 <code class=\"language-text\">call</code>에 전달할 수 있게 해준다.</li>\n<li><code class=\"language-text\">apply</code>는 오직 유사 배열 형태의 <code class=\"language-text\">args</code>만 받는다.</li>\n</ul>\n<p>이 차이만 빼면 두 메서드는 완전히 동일하게 동작하는데, 인수가 이터러블 형태라면 <code class=\"language-text\">call</code>을 유사 배열 형태라면 <code class=\"language-text\">apply</code>를 사용하면 된다.</p>\n<p>배열같이 이터러블이면서 유사 배열인 객체엔 둘 다를 사용할 수 있는데, 대부분의 자바스크립트 엔진은 내부에서 <code class=\"language-text\">apply</code>를 최적화하기 때문에 <code class=\"language-text\">apply</code>를 사용하는 게 좀 더 빠르긴 하다.</p>\n<p>이렇게 컨텍스트와 함께 인수 전체를 다른 함수에 전달하는 것을 콜 포워딩이라 한다.</p>\n<p>간단한 형태의 콜 포워딩은 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">wrapper</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">func</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"클래스와-기본-문법\" style=\"position:relative;\"><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4%EC%99%80-%EA%B8%B0%EB%B3%B8-%EB%AC%B8%EB%B2%95\" aria-label=\"클래스와 기본 문법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클래스와 기본 문법</h2>\n<blockquote>\n<p>클래스는 객체 지향 프로그래밍에서 특정 객체를 생성하기 위해 변수와 메소드를 정의하는 일종의 틀로, 객체를 정의하기 위한 상태(멤버 변수)와 메서드(함수)로 구성된다. - 위키백과</p>\n</blockquote>\n<p>실무에서는 사용자나 물건 같이 동일한 종류의 객체를 여러 개 생성해야 하는 경우가 잦은데, 이럴 때 <code class=\"language-text\">new</code> 연산자와 생성자 함수에서 배운 <code class=\"language-text\">new function</code>을 사용할 수 있다. 여기에 모던 자바스크립트에는 <code class=\"language-text\">클래스(class)</code> 라는 문법을 사용하면 객체 지향 프로그래밍에서 사용되는 다양한 기능을 자바스크립트에서 사용 가능하다.</p>\n<h3 id=\"기본-문법\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EB%B3%B8-%EB%AC%B8%EB%B2%95\" aria-label=\"기본 문법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기본 문법</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyClass</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 여러 메서드를 정의할 수 있음</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span>\n    <span class=\"token function\">method1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span>\n    <span class=\"token function\">method2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span>\n    <span class=\"token function\">method3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이렇게 클래스를 정의하고, <code class=\"language-text\">new MyClass()</code>를 호출하면 내부에서 정의한 메서드가 들어 있는 객체가 생성된다. 객체의 기본 상태를 설정해주는 생성자 메서드 <code class=\"language-text\">constructor()</code>는 <code class=\"language-text\">new</code>에 의해 자동으로 호출되므로, 특별한 절차 없이 객체를 초기화 할 수 있다.</p>\n<p>예시 :</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello! </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token string\">'John'</span><span class=\"token punctuation\">)</span>\nuser<span class=\"token punctuation\">.</span><span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>ㅤ</p>\n<h3 id=\"클래스-표현식\" style=\"position:relative;\"><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4-%ED%91%9C%ED%98%84%EC%8B%9D\" aria-label=\"클래스 표현식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클래스 표현식</h3>\n<p>함수처럼 클래스도 다른 표현식 내부에서 정의, 전달, 반환, 할당할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> User <span class=\"token operator\">=</span> <span class=\"token keyword\">class</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>또한 <u>필요에 따라</u> 클래스는 동적으로 생성하는 것도 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">makeClass</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">phrase</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">class</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>phrase<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> User <span class=\"token operator\">=</span> <span class=\"token function\">makeClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>ㅤ</p>\n<h3 id=\"getter와-setter\" style=\"position:relative;\"><a href=\"#getter%EC%99%80-setter\" aria-label=\"getter와 setter permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>getter와 setter</h3>\n<p>리터럴을 사용해 만든 객체처럼 클래스도 <code class=\"language-text\">getter</code>와 <code class=\"language-text\">setter</code>, 계산된 프로퍼티(computed property)를 포함할 수 있다.</p>\n<p>예시 :</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">get</span> <span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_name\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">set</span> <span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'이름이 너무 짧습니다.'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_name <span class=\"token operator\">=</span> value\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token string\">'John'</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\nuser <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>이러한 방법으로 클래스 선언시 <code class=\"language-text\">User.prototype</code>에 <code class=\"language-text\">getter</code>와 <code class=\"language-text\">setter</code>가 만들어지므로 <code class=\"language-text\">get, set</code>을 사용할 수 있다.</p>\n<p>ㅤ</p>\n<h3 id=\"계산된-메서드-이름-\" style=\"position:relative;\"><a href=\"#%EA%B3%84%EC%82%B0%EB%90%9C-%EB%A9%94%EC%84%9C%EB%93%9C-%EC%9D%B4%EB%A6%84-\" aria-label=\"계산된 메서드 이름  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>계산된 메서드 이름 […]</h3>\n<p>대괄호 <code class=\"language-text\">[...]</code> 를 이용해 계산된 메서드 이름 (computed method name)을 만드는 예시를 보자.</p>\n<p>예시 :</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">'say'</span> <span class=\"token operator\">+</span> <span class=\"token string\">'Hi'</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>ㅤ</p>\n<h3 id=\"클래스-필드\" style=\"position:relative;\"><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4-%ED%95%84%EB%93%9C\" aria-label=\"클래스 필드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클래스 필드</h3>\n<blockquote>\n<p><strong>⚠️ 구식 브라우저에선 폴리필이 필요할 수 있다.</strong></p>\n<p>클래스 필드는 근래에 더해진 기능이다.</p>\n</blockquote>\n<p>지금까지 살펴본 예시는 메서드가 하나만 있었는데, <code class=\"language-text\">클래스 필드(class field)</code> 라는 문법을 사용하면 어떤 종류의 프로퍼티도 클래스에 추가할 수 있다.</p>\n<p>예시 :</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n  name <span class=\"token operator\">=</span> <span class=\"token string\">'John'</span>\n  <span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">!</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>ㅤ</p>\n<h3 id=\"과제--클래스로-다시-작성하기\" style=\"position:relative;\"><a href=\"#%EA%B3%BC%EC%A0%9C--%ED%81%B4%EB%9E%98%EC%8A%A4%EB%A1%9C-%EB%8B%A4%EC%8B%9C-%EC%9E%91%EC%84%B1%ED%95%98%EA%B8%B0\" aria-label=\"과제  클래스로 다시 작성하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>과제 : 클래스로 다시 작성하기</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// before</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Clock</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> template <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> timer<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">let</span> hours <span class=\"token operator\">=</span> date<span class=\"token punctuation\">.</span><span class=\"token function\">getHours</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hours <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> hours <span class=\"token operator\">=</span> <span class=\"token string\">'0'</span> <span class=\"token operator\">+</span> hours<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">let</span> mins <span class=\"token operator\">=</span> date<span class=\"token punctuation\">.</span><span class=\"token function\">getMinutes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mins <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> mins <span class=\"token operator\">=</span> <span class=\"token string\">'0'</span> <span class=\"token operator\">+</span> mins<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">let</span> secs <span class=\"token operator\">=</span> date<span class=\"token punctuation\">.</span><span class=\"token function\">getSeconds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>secs <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> secs <span class=\"token operator\">=</span> <span class=\"token string\">'0'</span> <span class=\"token operator\">+</span> secs<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">let</span> output <span class=\"token operator\">=</span> template\n        <span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'h'</span><span class=\"token punctuation\">,</span> hours<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'m'</span><span class=\"token punctuation\">,</span> mins<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'s'</span><span class=\"token punctuation\">,</span> secs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">stop</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">start</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        timer <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span>render<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> clock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Clock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>template<span class=\"token operator\">:</span> <span class=\"token string\">'hⓂs'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nclock<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// after</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Clock</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">template</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>template <span class=\"token operator\">=</span> template\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">let</span> hours <span class=\"token operator\">=</span> date<span class=\"token punctuation\">.</span><span class=\"token function\">getHours</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hours <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> hours <span class=\"token operator\">=</span> <span class=\"token string\">'0'</span> <span class=\"token operator\">+</span> hours\n\n    <span class=\"token keyword\">let</span> mins <span class=\"token operator\">=</span> date<span class=\"token punctuation\">.</span><span class=\"token function\">getMinutes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mins <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> mins <span class=\"token operator\">=</span> <span class=\"token string\">'0'</span> <span class=\"token operator\">+</span> mins\n\n    <span class=\"token keyword\">let</span> secs <span class=\"token operator\">=</span> date<span class=\"token punctuation\">.</span><span class=\"token function\">getSeconds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>secs <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> secs <span class=\"token operator\">=</span> <span class=\"token string\">'0'</span> <span class=\"token operator\">+</span> secs\n\n    <span class=\"token keyword\">let</span> output <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>hours<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>mins<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>secs<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>timer<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>timer <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>render<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> clock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Clock</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hⓂs'</span><span class=\"token punctuation\">)</span>\nclock<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>ㅤ</p>\n<p>ㅤ</p>\n<h2 id=\"클래스-상속\" style=\"position:relative;\"><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%83%81%EC%86%8D\" aria-label=\"클래스 상속 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클래스 상속</h2>\n<p>클래스 상속을 사용하면 클래스를 다른 클래스로 확장할 수 있다. 기존에 존재하던 기능을 토대로 새로운 기능을 만들 수 있다.</p>\n<h3 id=\"code-classlanguage-textextendscode-키워드\" style=\"position:relative;\"><a href=\"#code-classlanguage-textextendscode-%ED%82%A4%EC%9B%8C%EB%93%9C\" aria-label=\"code classlanguage textextendscode 키워드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">extends</code> 키워드</h3>\n<p>예시 : <code class=\"language-text\">Animal</code> 클래스</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>speed <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">speed</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>speed <span class=\"token operator\">=</span> speed\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> 은(는) 속도 </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>speed<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">로 달립니다.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>speed <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> 이(가) 멈췄습니다.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> animal <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">(</span><span class=\"token string\">'동물'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>또 다른 클래스인 <code class=\"language-text\">Rabbit</code>을 만들어보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Rabbit</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">hide</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>speed <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token comment\">// 내가 추가해봄, 숨었다면 속도가 0가 될 것 같아서</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> 이(가) 숨었습니다!</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> rabbit <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Rabbit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'산토끼'</span><span class=\"token punctuation\">)</span>\nrabbit<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\nrabbit<span class=\"token punctuation\">.</span><span class=\"token function\">hide</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>이런 식으로 <code class=\"language-text\">Rabbit</code>이라는 클래스는 <code class=\"language-text\">Animal</code> 클래스를 상속받아 <code class=\"language-text\">Animal</code> 클래스에 정의했던 메서드에 접근할 수 있다. 다만 반대로 <code class=\"language-text\">Animal</code>에서는 <code class=\"language-text\">Rabbit</code>에서 정의한 메서드는 <code class=\"language-text\">hide()</code>는 사용할 수 없다.</p>\n<blockquote>\n<p><strong>ℹ️ <code class=\"language-text\">extends</code> 뒤에 표현식이 올 수도 있습니다.</strong></p>\n<p>클래스 문법은 <code class=\"language-text\">extends</code> 뒤에 표현식이 와도 처리해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">phrase</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">class</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>phrase<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">f</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n</blockquote>\n<p>ㅤ</p>\n<h3 id=\"메서드-오버라이딩\" style=\"position:relative;\"><a href=\"#%EB%A9%94%EC%84%9C%EB%93%9C-%EC%98%A4%EB%B2%84%EB%9D%BC%EC%9D%B4%EB%94%A9\" aria-label=\"메서드 오버라이딩 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>메서드 오버라이딩</h3>\n<p>특별한 사항이 없다면, <code class=\"language-text\">class Rabbit</code>은 <code class=\"language-text\">class Animal</code>에 있는 메서드를 ‘그대로’ 상속받는다. 그런데 <code class=\"language-text\">Rabbit</code>에서 <code class=\"language-text\">stop()</code> 등의 메서드를 자체적으로 정의하면, 상속받은 메서드가 아닌 자체 메서드가 사용된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Rabbit</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>개발을 하다보면 부모 메서드 전체를 교체하지 않고, 부모 메서드를 토대로 일부 기능만 변경하고 싶을 때가 생긴다. 혹은 부모 메서드의 기능을 확장하고 싶을 때도 있다. 이럴 때 커스텀 메서드를 만들어 작업하게 되는데, 커스텀 메서드를 만들었다 치더라도 이 과정 전/후에는 부모 메서드를 호출하고 싶을 때가 있다. (딜레마 같다)</p>\n<p>이럴 때 사용할 수 있는 키워드로 <code class=\"language-text\">super</code>가 있다.</p>\n<ul>\n<li><code class=\"language-text\">super.methods(...)</code> 는 부모 클래스에 정의된 메서드를 호출한다.</li>\n<li><code class=\"language-text\">super(...)</code>는 부모 생성자를 호출하는데, 자식 생성자 내부에서만 사용할 수 있다.</li>\n</ul>\n<p>이런 특징을 이용해 토끼가 멈추면, 자동으로 숨도록 하는 코드를 만들어보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>speed <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">speed</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>speed <span class=\"token operator\">=</span> speed\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> 은(는) 속도 </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>speed<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">로 달립니다.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>speed <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> 이(가) 멈췄습니다.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Rabbit</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">hide</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>speed <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token comment\">// 내가 추가해봄, 숨었다면 속도가 0가 될 것 같아서</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> 이(가) 숨었습니다!</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">hide</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> rabbit <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Rabbit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'흰 토끼'</span><span class=\"token punctuation\">)</span>\n\nrabbit<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\nrabbit<span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<blockquote>\n<p>ℹ️ <strong>화살표 함수엔 <code class=\"language-text\">super</code>가 없다.</strong></p>\n<p><a href=\"https://ko.javascript.info/arrow-functions\">화살표 함수 다시 살펴보기</a>에서 살펴본 바와 같이, 화살표 함수는 <code class=\"language-text\">super</code>를 지원하지 않습니다.</p>\n<p><code class=\"language-text\">super</code>에 접근하면 아래 예시와 같이 <code class=\"language-text\">super</code>를 외부 함수에서 가져옵니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Rabbit</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1초 후에 부모 stop을 호출합니다.</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>화살표 함수의 <code class=\"language-text\">super</code>는 <code class=\"language-text\">stop()</code>의 <code class=\"language-text\">super</code>와 같아서 위 예시는 의도한 대로 동작합니다. 그렇지만 <code class=\"language-text\">setTimeout</code>안에서 ‘일반’ 함수를 사용했다면 에러가 발생했을 겁니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Unexpected super</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></code></pre></div>\n</blockquote>\n<p>ㅤ</p>\n<h3 id=\"생성자-오버라이딩\" style=\"position:relative;\"><a href=\"#%EC%83%9D%EC%84%B1%EC%9E%90-%EC%98%A4%EB%B2%84%EB%9D%BC%EC%9D%B4%EB%94%A9\" aria-label=\"생성자 오버라이딩 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>생성자 오버라이딩</h3>\n<p>생성자 오버라디잉은 메서드 오버라이딩과 달리 좀 더 까다로운데, 예시를 살펴보면 <code class=\"language-text\">Rabbit</code> 자체에는 <code class=\"language-text\">constructor</code>가 없다는 것을 볼 수 있다. 명세서에 따르면 클래스가 다른 클래스를 상속받고 <code class=\"language-text\">constructor</code>가 없는 경우에는 아래처럼 ‘비어있는’ <code class=\"language-text\">constructor</code>가 만들어진다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Rabbit</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>보이듯이 생성자는 기본적으로 부모 <code class=\"language-text\">constructor</code>를 호출하고, 이때 부모 <code class=\"language-text\">constructor</code>에도 인수를 모두 전달한다. 클래스 자체 생성자가 없는 경우엔 이런 일이 모두 자동으로 일어난다.</p>\n<p>예시 : <code class=\"language-text\">Rabbit</code>에 커스텀 생성자 추가</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>speed <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Rabbit</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> earLength</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>speed <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>earLength <span class=\"token operator\">=</span> earLength\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 동작하지 않습니다!</span>\n<span class=\"token keyword\">let</span> rabbit <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Rabbit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'흰 토끼'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 에러 메세지</span>\nReferenceError <span class=\"token operator\">:</span> Must call <span class=\"token keyword\">super</span> constructor <span class=\"token keyword\">in</span> derived <span class=\"token keyword\">class</span> <span class=\"token class-name\">before</span> accessing <span class=\"token string\">'this'</span> or returning <span class=\"token keyword\">from</span> derived constructor</code></pre></div>\n<p>예시처럼 커스텀 생성자를 생성하면 위와 같은 에러 메세지가 나타나는데, 해석하면 다음과 같다.</p>\n<ul>\n<li>상속 클래스의 생성자에선 반도시 <code class=\"language-text\">super(...)</code>를 호출해야하는데, <code class=\"language-text\">super(...)</code>를 호출하지 않아 에러가 발생했고, <code class=\"language-text\">super(...)</code>는 <code class=\"language-text\">this</code>를 사용하기 전에 반드시 호출해야한다.</li>\n</ul>\n<p>그렇다면 왜 <code class=\"language-text\">super(...)</code>를 호출해야하는 걸까? 자바스크립트는 ‘상속 클래스의 생성자 함수(derived constructor)‘와 그렇지 않은 생성자 함수를 구분한다. 상속 클래스의 생성자 함수엔 특수 내부 프로퍼티인 <code class=\"language-text\">[[ConstructorKind]]: &quot;derived&quot;</code> 가 이름표처럼 붙는다.</p>\n<p>일반 클래스의 생성자 함수와 상속 클래스의 생성자 함수 간 차이는 <code class=\"language-text\">new</code>와 함께 드러난다.</p>\n<ul>\n<li>일반 클래스가 <code class=\"language-text\">new</code>와 함께 실행되면, 빈 개겣가 만들어지고 <code class=\"language-text\">this</code>에 이 객체를 할당한다.</li>\n<li>반면, 상속 클래스의 생성자 함수가 실행되면, 일반 클래스에서 일어난 일이 일어나지 않고 상속 클래스의 생성자 함수는 빈 객체를 만들고 <code class=\"language-text\">this</code>에 이 객체를 할당하는 일을 부모 클래스의 생성자가 처리해주길 기대한다.</li>\n</ul>\n<p>이런 차이로 인해 상속 클래스의 생성자에선 <code class=\"language-text\">super</code>를 호출하여 부모 생성자를 먼저 실행해주어야한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>speed <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Rabbit</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> earLength</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token comment\">// super를 먼저 호출하여 부모 클래스를 먼저 생성</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>earLength <span class=\"token operator\">=</span> earLength\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 이제 에러 없이 동작합니다.</span>\n<span class=\"token keyword\">let</span> rabbit <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Rabbit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'흰 토끼'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>rabbit<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 흰 토끼</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>rabbit<span class=\"token punctuation\">.</span>earLength<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 10</span></code></pre></div>\n<p>ㅤ</p>\n<p>ㅤ</p>\n<h2 id=\"정적-메서드와-정적-프로퍼티\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EC%A0%81-%EB%A9%94%EC%84%9C%EB%93%9C%EC%99%80-%EC%A0%95%EC%A0%81-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0\" aria-label=\"정적 메서드와 정적 프로퍼티 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정적 메서드와 정적 프로퍼티</h2>\n<p><code class=\"language-text\">&quot;prototype&quot;</code>이 아닌 클래스 함수 자체에 메서드를 설정할 수도 있습니다. 이런 메서드를 정적(static) 메서드라고 부르는데, 정적 메서드는 아래와 같이 클래스 안에 <code class=\"language-text\">static</code> 키둬를 붙여 만들 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> <span class=\"token function\">staticMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">==</span> User<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\nUser<span class=\"token punctuation\">.</span><span class=\"token function\">staticMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></code></pre></div>\n<p>정적 메서드는 메서드를 프로퍼티 형태로 직접 할당하는 것과 동일한 일을 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\nUser<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">staticMethod</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">==</span> User<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\nUser<span class=\"token punctuation\">.</span><span class=\"token function\">staticMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></code></pre></div>\n<p><code class=\"language-text\">User.staticMethod()</code>가 호출될 때 <code class=\"language-text\">this</code>의 값을 클래스 생성자인 <code class=\"language-text\">User</code> 자체가 된다. 정적 메서드는 어떤 특정한 객체가 아닌 클래스에 속한 함수를 구현하고자 할 때 주로 사용된다.</p>\n<p>예시 : 객체 <code class=\"language-text\">Article</code>이 여러 개 있고, 이들을 비교해줄 함수가 필요하다고 가정할 때, 가장 먼저 아래와 같이 <code class=\"language-text\">Article.compare</code>을 추가하는 방법이 떠오를 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Article</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">title<span class=\"token punctuation\">,</span> date</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> title\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>date <span class=\"token operator\">=</span> date\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">static</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">articleA<span class=\"token punctuation\">,</span> articleB</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> articleA<span class=\"token punctuation\">.</span>date <span class=\"token operator\">-</span> articleB<span class=\"token punctuation\">.</span>date\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 사용법</span>\n<span class=\"token keyword\">let</span> articles <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">Article</span><span class=\"token punctuation\">(</span><span class=\"token string\">'HTML'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token number\">2019</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">Article</span><span class=\"token punctuation\">(</span><span class=\"token string\">'CSS'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token number\">2019</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">Article</span><span class=\"token punctuation\">(</span><span class=\"token string\">'JavaScript'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token number\">2019</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span>\n\narticles<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>Article<span class=\"token punctuation\">.</span>compare<span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>articles<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">)</span> <span class=\"token comment\">// CSS</span></code></pre></div>\n<p>여기서 <code class=\"language-text\">Article.compare</code>는 article(글)을 비교해주는 수단으로, 글 전체를 ‘위에서’ 바라보며 비교를 수행한다. <code class=\"language-text\">Article.compare</code>이 글 하나의 메서드가 아닌 클래스의 메서드여야 하는 이유가 여기에 있다.</p>\n<p>다음 예시는 “팩토리” 메서드를 구현한 코드로 다양한 방법을 사용해 조건에 맞는 <code class=\"language-text\">article</code> 인스턴스를 만들어야한다고 가정하자</p>\n<ol>\n<li>매개변수(<code class=\"language-text\">title, date 등</code>)를 이용해 관련 정보가 담긴 <code class=\"language-text\">article</code> 생성</li>\n<li>오늘 날짜를 기반으로 비어있는 <code class=\"language-text\">article</code> 생성</li>\n<li>기타 등등</li>\n</ol>\n<p>첫 번째 방법은 생성자를 사용해 구현할 수 있다. 두 번째 방법은 클래스에 정적 메서드를 만들어 구현할 수 있다.</p>\n<p>예시 : <code class=\"language-text\">Article.createTodays()</code></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Article</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">title<span class=\"token punctuation\">,</span> date</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> title\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>date <span class=\"token operator\">=</span> date\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">static</span> <span class=\"token function\">createTodays</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// this는 Article입니다.</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">this</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Today's digest\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> article <span class=\"token operator\">=</span> Article<span class=\"token punctuation\">.</span><span class=\"token function\">createTodays</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>article<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Today's digest</span></code></pre></div>\n<p>위 같은 방식으로 <code class=\"language-text\">Today&#39;s digest</code>라는 글이 필요할 때마다 <code class=\"language-text\">Article.createTodays()</code>를 호출하면 된다. 여기서도 마찬가지로 <code class=\"language-text\">Article.createTodays()</code>는 <code class=\"language-text\">article</code> 메서드가 아닌 전체 클래스의 메서드이다. 정적 메서드는 아래 예시와 같이 항목 검색, 저장, 삭제 등을 수행해주는 데이터베이스 관련 클래스에도 사용된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">Article<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token number\">12345</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>ㅤ</p>\n<h3 id=\"정적-프로퍼티\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EC%A0%81-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0\" aria-label=\"정적 프로퍼티 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정적 프로퍼티</h3>\n<blockquote>\n<p>⚠️ <strong>최근에 추가</strong>되어 Chrome에서만 동작 할 수 있습니다.</p>\n</blockquote>\n<p>아래와 같이 일반 클래스 프로퍼티와 유사하게 생겼는데, 앞에 <code class=\"language-text\">static</code>이 붙는다는 점만 다르다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Article</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> publisher <span class=\"token operator\">=</span> <span class=\"token string\">'Ilya Kantor'</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>ㅤ</p>\n<h3 id=\"정적-프로퍼티와-메서드-상속\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EC%A0%81-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0%EC%99%80-%EB%A9%94%EC%84%9C%EB%93%9C-%EC%83%81%EC%86%8D\" aria-label=\"정적 프로퍼티와 메서드 상속 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정적 프로퍼티와 메서드 상속</h3>\n<blockquote>\n<p>코드만 보고 넘어가자.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> planet <span class=\"token operator\">=</span> <span class=\"token string\">'지구'</span>\n\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> speed</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>speed <span class=\"token operator\">=</span> speed\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">speed <span class=\"token operator\">=</span> <span class=\"token number\">0</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>speed <span class=\"token operator\">+=</span> speed\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">가 속도 </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>speed<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">로 달립니다.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">static</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">animalA<span class=\"token punctuation\">,</span> animalB</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> animalA<span class=\"token punctuation\">.</span>speed <span class=\"token operator\">-</span> animalB<span class=\"token punctuation\">.</span>speed\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Animal을 상속받음</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Rabbit</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">hide</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">가 숨었습니다!</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> rabbits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Rabbit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'흰 토끼'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Rabbit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'검은 토끼'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\nrabbits<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>Rabbit<span class=\"token punctuation\">.</span>compare<span class=\"token punctuation\">)</span>\n\nrabbits<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 검은 토끼가 속도 5로 달립니다.</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>Rabbit<span class=\"token punctuation\">.</span>planet<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 지구</span></code></pre></div>\n<p>ㅤ</p>\n<p>ㅤ</p>\n<h2 id=\"private-protected-프로퍼티와-메서드\" style=\"position:relative;\"><a href=\"#private-protected-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0%EC%99%80-%EB%A9%94%EC%84%9C%EB%93%9C\" aria-label=\"private protected 프로퍼티와 메서드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>private, protected 프로퍼티와 메서드</h2>\n<p>객체 지향 프로그래밍에서 가장 중요한 원리 중 하나는 ‘내부 인터페이스와 외부 인터페이스를 구분 짓는 것’이다. 단순히 문자열을 출력하는 것이 아닌 복잡한 어플리케이션을 구현하려면, 내부 인터페이스와 외부 인터페이스를 구분하는 방법을 “반드시” 알아야한다.</p>\n<p>ㅤ</p>\n<h3 id=\"내부-인터페이스와-외부-인터페이스\" style=\"position:relative;\"><a href=\"#%EB%82%B4%EB%B6%80-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EC%99%80-%EC%99%B8%EB%B6%80-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4\" aria-label=\"내부 인터페이스와 외부 인터페이스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>내부 인터페이스와 외부 인터페이스</h3>\n<p>객체 지향 프로그래밍에서 프로퍼티와 메서드는 두 그룹으로 분류된다.</p>\n<ul>\n<li>내부 인터페이스 (internal interface) : 동일한 클래스 내의 다른 메서드에선 접근할 수 있지만, 클래스 밖에서 접근할 수 없는 프로퍼티와 메서드</li>\n<li>외부 인터페이스 (external interface) : 클래스 밖에서도 접근 가능한 프로퍼티와 메서드</li>\n</ul>\n<p>자바스크립트에는 아래와 같은 두 가지 타입의 객체 필드 (프로퍼티와 메서드)가 있습니다.</p>\n<ul>\n<li>public : 어디서든지 접근할 수 있으며 외부 인터페이스를 구성한다. 현재까지 다룬 모든 메서드와 프로퍼티는 public이다.</li>\n<li>private : 클래스 내부에서만 접근할 수 있으며 내부 인터페이스를 구성할 때 쓰인다.</li>\n</ul>\n<p>자바스크립트 이외의 다수 언어에서 클래스 자신과 자손 클래스에서만 접근을 허용하는 ‘protected’ 필드를 지원한다. protected 필드는 private와 비슷하지만, 자손 클래스에서도 접근이 가능하다는 점이 다르다. protected 필드도 내부 인터페이스를 만들 때 유용하다. 자손 클래스의 필드에 접근해야 하는 경우가 많기 때문에, protected 필드는 private 필드보다 조금 더 광범위하게 사용합니다.</p>\n<p>ㅤ</p>\n<h3 id=\"프로퍼티-보호하기\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0-%EB%B3%B4%ED%98%B8%ED%95%98%EA%B8%B0\" aria-label=\"프로퍼티 보호하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로퍼티 보호하기</h3>\n<p>예시 : 커피 머신 클래스</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CoffeeMachine</span> <span class=\"token punctuation\">{</span>\n  waterAmount <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">power</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>power <span class=\"token operator\">=</span> power\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">전력량이 </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>power<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">인 커피머신을 만듭니다.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> coffeeMachine <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CoffeeMachine</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\nconffeeMachine<span class=\"token punctuation\">.</span>waterAmount <span class=\"token operator\">=</span> <span class=\"token number\">200</span></code></pre></div>\n<p>현재 <code class=\"language-text\">waterAmount</code>와 <code class=\"language-text\">power</code>는 public으로 손쉽게 누구나 변경하기 쉬운 상태이다. 그렇다면 <code class=\"language-text\">waterAmount</code>를 protected로 바꿔서 <code class=\"language-text\">waterAmount</code>를 통제하며 0 미만의 값으로는 설정하지 못하도록 설정한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CoffeeMachine</span> <span class=\"token punctuation\">{</span>\n  _waterAmount <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token comment\">// waterAmount property to changed protected</span>\n\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">power</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>power <span class=\"token operator\">=</span> power\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">전력량이 </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>power<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">인 커피머신을 만듭니다.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">get</span> <span class=\"token function\">waterAmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_waterAmount\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">set</span> <span class=\"token function\">waterAmount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'물의 양은 음수가 될 수 없습니다.'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_waterAmount <span class=\"token operator\">=</span> value\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>ㅤ</p>\n<h3 id=\"읽기-전용-프로퍼티\" style=\"position:relative;\"><a href=\"#%EC%9D%BD%EA%B8%B0-%EC%A0%84%EC%9A%A9-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0\" aria-label=\"읽기 전용 프로퍼티 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>읽기 전용 프로퍼티</h3>\n<p><code class=\"language-text\">power</code> 프로퍼티를 읽기만 가능하도록 만들어보자. 프로퍼티를 생성할 때에만 값을 할당할 수 있고, 그 이후에는 값을 절대로 수정하지 말아야 하는 경우가 있는데, 이럴 때 읽기 전용 프로퍼티를 활용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CoffeeMachine</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">power</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_power <span class=\"token operator\">=</span> power\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">get</span> <span class=\"token function\">power</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_power\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> coffeeMachine <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CoffeeMachine</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\ncoffeeMachine<span class=\"token punctuation\">.</span>power <span class=\"token operator\">=</span> <span class=\"token number\">25</span> <span class=\"token comment\">// Error (setter 없음)</span></code></pre></div>\n<p>ㅤ</p>\n<h3 id=\"private-프로퍼티\" style=\"position:relative;\"><a href=\"#private-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0\" aria-label=\"private 프로퍼티 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>private 프로퍼티</h3>\n<blockquote>\n<p><strong>⚠️ 최근에 추가됨</strong></p>\n<p>스펙에 추가된지 얼마 안 된 문법으로 지원하지 않거나 부분적으로만 지원하는 엔진을 사용한다면 폴리필을 구현해야 합니다. private 프로퍼티와 메서드는 제안(proposal) 목록에 등재된 문법으로, 명세서에 등재되기 직전 상태이다.</p>\n</blockquote>\n<p>private 프로퍼티와 메서드는 <code class=\"language-text\">#</code> 으로 시작한다. <code class=\"language-text\">#</code>이 붙으면 클래스 안에서만 접근할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CoffeeMachine</span> <span class=\"token punctuation\">{</span>\n  #waterLimit <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">#checkWater</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"물의 양은 음수가 될 수 없습니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#waterLimit<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"물이 용량을 초과합니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> coffeeMachine <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CoffeeMachine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 클래스 외부에서 private에 접근할 수 없음</span>\ncoffeeMachine<span class=\"token punctuation\">.</span><span class=\"token function\">#checkWater</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\ncoffeeMachine<span class=\"token punctuation\">.</span>#waterLimit <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CoffeeMachine</span> <span class=\"token punctuation\">{</span>\n  #waterLimit <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span>\n  #waterAmount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">get</span> <span class=\"token function\">waterAmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#waterAmount<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">set</span> <span class=\"token function\">waterAmount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"물의 양은 음수가 될 수 없습니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#waterAmount <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> machine <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CoffeeMachine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmachine<span class=\"token punctuation\">.</span>waterAmount <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>machine<span class=\"token punctuation\">.</span>waterAmount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 100, 만약 getter가 없다면 Error!</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>machine<span class=\"token punctuation\">.</span>#waterAmount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error!</span></code></pre></div>\n<blockquote>\n<p>⚠️ <strong>private 필드는 this[name]으로 접근하거나 사용할 수 없습니다.</strong></p>\n<p>private 필드는 특별합니다.</p>\n<p>알다시피, 보통은 <code class=\"language-text\">this[name]</code>을 사용해 필드에 접근할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n  <span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> fieldName <span class=\"token operator\">=</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span>fieldName<span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>하지만 private 필드는 <code class=\"language-text\">this[name]</code>으로 접근할 수 없습니다. 이런 문법적 제약은 필드의 보안을 강화하기 위해 만들어졌습니다.</p>\n</blockquote>\n<p>ㅤ</p>\n<p>ㅤ</p>\n<h2 id=\"내장-클래스-확장하기\" style=\"position:relative;\"><a href=\"#%EB%82%B4%EC%9E%A5-%ED%81%B4%EB%9E%98%EC%8A%A4-%ED%99%95%EC%9E%A5%ED%95%98%EA%B8%B0\" aria-label=\"내장 클래스 확장하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>내장 클래스 확장하기</h2>\n<p>배열, 맵 같은 내장 클래스도 확장 가능합니다. 아래 예시는 <code class=\"language-text\">Array</code>를 상속받아 만들어진 클래스입니다.</p>\n<p>예시 :</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">PowerArray</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Array</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PowerArray</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span></code></pre></div>\n<p>ㅤ</p>\n<p>ㅤ</p>\n<h2 id=\"code-classlanguage-textinstanceofcode로-클래스-확인하기\" style=\"position:relative;\"><a href=\"#code-classlanguage-textinstanceofcode%EB%A1%9C-%ED%81%B4%EB%9E%98%EC%8A%A4-%ED%99%95%EC%9D%B8%ED%95%98%EA%B8%B0\" aria-label=\"code classlanguage textinstanceofcode로 클래스 확인하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">instanceof</code>로 클래스 확인하기</h2>\n<p><code class=\"language-text\">instanceof</code> 연산자를 사용하면 객체가 특정 클래스에 속하는지 아닌지를 확인할 수 있고 , 상속 관계도 확인해준다. 확인 기능은 다양한 곳에서 쓰이는데, 여기에서는 <code class=\"language-text\">instanceof</code>를 사용해 인수 타입에 따라 이를 다르게 처리하는 다형적인 함수를 만드는데 사용한다.</p>\n<p>ㅤ</p>\n<h3 id=\"instanceof-연산자\" style=\"position:relative;\"><a href=\"#instanceof-%EC%97%B0%EC%82%B0%EC%9E%90\" aria-label=\"instanceof 연산자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>instanceof 연산자</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">obj <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Class</span></code></pre></div>\n<p><code class=\"language-text\">obj</code>가 <code class=\"language-text\">Class</code>에 속하거나 <code class=\"language-text\">Class</code>에 속하거나 <code class=\"language-text\">Class</code>를 상속받는 클래스에 속하면 <code class=\"language-text\">true</code>가 반환된다.</p>\n<p>예시 :</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Rabbit</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> rabbit <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Rabbit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// rabbit이 클래스 Rabbit의 객체인가?</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>rabbit <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Rabbit</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></code></pre></div>\n<p>위 예시에서 <code class=\"language-text\">arr</code>는 클래스 <code class=\"language-text\">Object</code>에도 속한다. <code class=\"language-text\">Array</code>는 프로토타입 기반으로 <code class=\"language-text\">Object</code>를 상속 받는다.</p>\n<p><code class=\"language-text\">instanceof</code> 연산자는 보통 프로토타입 체인을 거슬러 올라가며 인스턴스 여부나 상속 여부를 확인한다. 그런데 정적 메서드 <code class=\"language-text\">Symbol.hasInstance</code>를 사용하면 직접 확인 로직을 설정할 수도 있다.</p>\n<p><code class=\"language-text\">obj instanceof Class</code>는 대략 아래와 같은 알고리즘으로 동작한다.</p>\n<ol>\n<li>\n<p>클래스에 정적 메서드 <code class=\"language-text\">Symbol.hasInstance</code>가 구현되어 있으면, <code class=\"language-text\">obj instanceof Class</code> 문이 실행될 때, <code class=\"language-text\">Class[Symbol.hasInstance](obj)</code>가 호출된다. 호출 결과는 <code class=\"language-text\">true</code>나 <code class=\"language-text\">false</code>이어야 한다. 이런 규칙을 기반으로 <code class=\"language-text\">instanceof</code>의 동작을 커스터마이징 할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// canEat 프로퍼티가 있으면 animal이라고 판단할 수 있도록</span>\n<span class=\"token comment\">// instanceof의 로직을 직접 설정</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">static</span> <span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>hasInstance<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>canEat<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> canEat<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li>\n<p>그런데, 대부분의 클래스엔 <code class=\"language-text\">Symbol.hasInstance</code>가 구현되어 있지 않다. 이럴 때엔 일반적인 로직이 사용된다. <code class=\"language-text\">obj instanceof Class</code>는 <code class=\"language-text\">Class.prototype</code>이 <code class=\"language-text\">obj</code> 프로토타입 체인 상의 프로토타입 중 하나와 일치하는지 확인한다. 차례 차례 비교를 진행한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">obj<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">===</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span>prototype<span class=\"token operator\">?</span>\nobj<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">===</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span>prototype<span class=\"token operator\">?</span>\nobj<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">===</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span>prototype<span class=\"token operator\">?</span>\n<span class=\"token operator\">...</span>\n<span class=\"token comment\">// 이 중 하나라도 true라면 true를 반환합니다.</span>\n<span class=\"token comment\">// 그렇지 않고 체인의 끝에 도달하면 false를 반환합니다.</span></code></pre></div>\n<p>위 예시에서 <code class=\"language-text\">rabbit.__proto__ === Rabbit.prototype</code> 이 <code class=\"language-text\">true</code>이기 때문에 <code class=\"language-text\">instanceof</code>는 <code class=\"language-text\">true</code>를 반환한다. 상속받은 클래스를 사용하는 경우에 두 번째 단계에서 일치 여부가 확인된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Rabbit</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> rabbit <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Rabbit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>rabbit <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n\n<span class=\"token comment\">// rabbit.__proto__ === Rabbit.prototype // false</span>\n<span class=\"token comment\">// rabbit.__proto__.__proto__ === Animal.prototype // true</span></code></pre></div>\n</li>\n</ol>\n<p>ㅤ</p>\n<p>ㅤ</p>\n<h2 id=\"믹스인-mixin\" style=\"position:relative;\"><a href=\"#%EB%AF%B9%EC%8A%A4%EC%9D%B8-mixin\" aria-label=\"믹스인 mixin permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>믹스인 (mixin)</h2>\n<blockquote>\n<p>ℹ️ <strong>믹스인 (mixin)</strong> 은 다른 클래스를 상속 받을 필요 없이 이들 클래스에 구현되어 있는 메서드를 담고 있는 클래스라 정의한다. 다시 말해 특정 행동을 실행해주는 메서드를 제공하는데 단독으로 쓰이지 않고 다른 클래스에 행동을 더해주는 용도로 사용된다. - Wikipedia</p>\n</blockquote>\n<p>자바스크립트는 단일상속만을 허용하는 언어입니다. 객체엔 단 하나의 <code class=\"language-text\">[[Prototype]]</code>만 있을 수 있고, 클래스는 클래스 하나만 상속받을 수 있습니다. 그런데 가끔 이런 제약이 한계처럼 느껴질 때가 있는데, 예를 들어 클래스 <code class=\"language-text\">StreetSweeper</code>와 클래스 <code class=\"language-text\">Bicycle</code>이 있는데, 이 둘을 섞어 <code class=\"language-text\">StreetSweepingBicycle</code>을 만들고 싶다고 하자. 또는 클래스 <code class=\"language-text\">User</code>와 이벤트를 생성해주는 코드가 담긴 클래스 <code class=\"language-text\">EventEmitter</code>가 있는데, <code class=\"language-text\">EventEmitter</code>의 기능을 <code class=\"language-text\">User</code>에 추가해 사용자가 이벤트를 열 수 있게 해주고 싶다고 생각해보자.</p>\n<p>이럴 때 <strong><u>믹스인</u></strong>이라 불리는 개념을 사용하면 도움이된다.</p>\n<p>ㅤ</p>\n<h3 id=\"믹스인-예시\" style=\"position:relative;\"><a href=\"#%EB%AF%B9%EC%8A%A4%EC%9D%B8-%EC%98%88%EC%8B%9C\" aria-label=\"믹스인 예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>믹스인 예시</h3>\n<p>자바스크립트에서 믹스인을 구현할 수 있는 가장 쉬운 방법은 유용한 메서드 여러 개가 담긴 객체를 하나 만드느느 것이다. 이렇게 하면 다수의 메서드를 원하는 클래스의 프로토타입에 쉽게 병합할 수 있다.</p>\n<p>예시 : <code class=\"language-text\">sayHiMixin</code>을 이용해 <code class=\"language-text\">User</code>에게 ‘언어 능력’을 부여</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// mixin</span>\n<span class=\"token keyword\">let</span> sayHiMixin <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">sayBye</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Bye </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 메서드 복사</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">,</span> sayHiMixin<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Dude'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Hello Dude!</span></code></pre></div>\n<p>상속 없이 메서드만 복사하는 방식으로 믹스인을 활용하면, <code class=\"language-text\">User</code>가 아래 예시처럼 다른 클래스를 상속받는 동시에 믹스인에 구현된 추가 메서드도 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">}</span>\nObjects<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">,</span> sayHiMixin<span class=\"token punctuation\">)</span></code></pre></div>\n<p>물론 믹스인 안에서 믹스인 상속을 사용하는 것도 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> sayMixin <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">phrase</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>phrase<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> sayHiMixin <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  __proto__<span class=\"token operator\">:</span> sayMixin<span class=\"token punctuation\">,</span>\n  <span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">sayBye</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Bye, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">,</span> sayHiMixin<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Dude'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>ㅤ</p>\n<h3 id=\"이벤트-믹스인\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EB%AF%B9%EC%8A%A4%EC%9D%B8\" aria-label=\"이벤트 믹스인 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이벤트 믹스인</h3>\n<p>실제로 사용할 수 있는 믹스인을 만들어보자. 상당수 브라우저 객체는 이벤트 생성이라는 중요한 기능을 가지고 있다. 이벤트는 정보를 필요로 하는 곳에 ‘정보를 널리 알리는 (broadcast)’ 훌륭한 수단이다. 아래 예시에서는 클래스나 객체에 이벤트 관련 함수를 쉽게 추가할 수 있도록 해주는 믹스인을 만들어 보겠습니다.</p>\n<ul>\n<li>믹스인은 뭔가 중요한 일이 발생했을 때 ‘이벤트를 생성하는 메서드’, <code class=\"language-text\">.trigger(name, [...data])</code> 를 제공한다. 인수 <code class=\"language-text\">name</code>은 이벤트 이름이고, 뒤따르는 선택 인수는 이벤트 데이터 정보를 담습니다.</li>\n<li>메서드 <code class=\"language-text\">.on(name, handler)</code>은 <code class=\"language-text\">name</code>에 해당하는 이벤트에 리스터로 <code class=\"language-text\">handler</code> 함수를 추가하고 <code class=\"language-text\">.on()</code>은 이벤트(<code class=\"language-text\">name</code>)가 트리거 될 때 호출되고 <code class=\"language-text\">.trigger</code> 호출에서 인수를 얻습니다. (?!?)</li>\n<li>메서드 <code class=\"language-text\">.off(name, handler)</code>는 <code class=\"language-text\">handler</code> 리스너를 제거한다.</li>\n</ul>\n<p>믹스인을 추가하면, 사용자가 로그인할 때 객체 <code class=\"language-text\">user</code>가 <code class=\"language-text\">&quot;login&quot;</code> 이라는 이벤트를 생성할 수 있게 된다. 또 다른 객체 <code class=\"language-text\">calendar</code>는 <code class=\"language-text\">user</code>가 생성한 이벤트인 <code class=\"language-text\">&quot;login&quot;</code>을 듣고 사용자에 맞는 달력을 보여줄 수도 있다.</p>\n<p>메뉴의 항목을 선택했을 때 객체 <code class=\"language-text\">menu</code>가 <code class=\"language-text\">&quot;select&quot;</code>라는 이벤트를 생성하고, 다른 객체는 <code class=\"language-text\">&quot;select&quot;</code>에 반응하는 이벤트 핸들러를 할당할 수도 있을 것이다. 이벤트 믹스인은 이러한 용도로 활용 가능하다.</p>\n<blockquote>\n<p>📌 분명 설명만 듣기로는 굉장히 유용한 기능으로 보인다. 나중에 한번 더 봐서라도 이해할 수 있도록 해보자.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> eventMixin <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/*\n   * 이벤트 구독\n   * 사용패턴 : menu.on('select', function(item) {...})\n   */</span>\n  <span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">eventName<span class=\"token punctuation\">,</span> handler</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_eventHandlers<span class=\"token punctuation\">)</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_eventHandlers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_eventHandlers<span class=\"token punctuation\">[</span>eventName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_eventHandlers<span class=\"token punctuation\">[</span>eventName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_eventHandlers<span class=\"token punctuation\">[</span>eventName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>handler<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">/*\n   * 이벤트 구독 취소\n   * 사용패턴 : menu.off('select', handler)\n   */</span>\n  <span class=\"token function\">off</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">eventName<span class=\"token punctuation\">,</span> handler</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> handlers <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_eventHandlers<span class=\"token operator\">?.</span><span class=\"token punctuation\">[</span>eventName<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>handlers<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> handlers<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>handlers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> handler<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        handlers<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">--</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">/*\n   * 주어진 이름과 데이터를 기반으로 이벤트 생성\n   * 사용패턴 : this.trigger('select', data1, data2);\n   */</span>\n  <span class=\"token function\">trigger</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">eventName<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_eventHandlers<span class=\"token operator\">?.</span><span class=\"token punctuation\">[</span>eventName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_eventHandlers<span class=\"token punctuation\">[</span>eventName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">handler</span> <span class=\"token operator\">=></span> <span class=\"token function\">handler</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">.on(eventName, handler)</code> : <code class=\"language-text\">eventName</code>에 해당하는 이벤트가 발생하면 실행시킬 함수 <code class=\"language-text\">handler</code>를 할당한다. 한 이벤트에 대응하는 핸들러가 여러 개 있을 때, 프로퍼티 <code class=\"language-text\">_eventHandlers</code>는 핸들러가 담긴 배열을 저장한다. 여기서는 핸들러가 추가만 된다.</li>\n<li><code class=\"language-text\">.off(eventName, handler)</code> : 핸들러 리스트에서 <code class=\"language-text\">handler</code>를 제거한다.</li>\n<li><code class=\"language-text\">.trigger(eventName, ...args)</code> : 이벤트를 생성한다. <code class=\"language-text\">_eventHandlers[eventName]</code>에 있는 모든 핸들러가 <code class=\"language-text\">...args</code>와 함께 호출된다.</li>\n</ul>\n<p>사용법 :</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Menu</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">choose</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">trigger</span><span class=\"token punctuation\">(</span><span class=\"token string\">'select'</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Menu</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">,</span> eventMixin<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">let</span> menu <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Menu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nmenu<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'select'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">value</span> <span class=\"token operator\">=></span> <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">선택된 값: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>value<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nmenu<span class=\"token punctuation\">.</span><span class=\"token function\">choose</span><span class=\"token punctuation\">(</span><span class=\"token string\">'123'</span><span class=\"token punctuation\">)</span></code></pre></div>","frontmatter":{"title":"Modern Javascript Tutorials","date":"July 12, 2020"}}},"pageContext":{"slug":"/Javascript/modern-javascript-tutorials/","previous":{"fields":{"slug":"/Python/python-developer-questions/"},"frontmatter":{"title":"Python Developer Questions","category":"Python","draft":false}},"next":{"fields":{"slug":"/Django/django-튜토리얼/"},"frontmatter":{"title":"Django 튜토리얼","category":"Django","draft":false}}}},"staticQueryHashes":["2486386679","3128451518"]}