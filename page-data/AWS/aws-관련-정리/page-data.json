{"componentChunkName":"component---src-templates-blog-post-js","path":"/AWS/aws-관련-정리/","result":{"data":{"site":{"siteMetadata":{"title":"mustnot","author":"[mustnot]","siteUrl":"https://mustnot.github.io","comment":{"disqusShortName":"mustnot","utterances":"mustnot/mustnot.github.io"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"c5122b45-8d81-5ab1-880d-9ec573f9b3d3","excerpt":"IAM (Identity and Access Management) AWS Identity and Access Management(IAM)는 AWS 리소스에 대한 액세스를 안전하게 제어할 수 있는 웹 서비스로, IAM을 사용하여 리소스를 사용하도록 인증(로그인) 및 권한 부여(권한 있음)된 대상을 제어합니다. - AWS IAM 사용 설명서 누구나 접속 가능한 온라인 서비스에서는 접근 관리가 무엇보다 중요한데, AWS에서는 IAM…","html":"<h2 id=\"iam-identity-and-access-management\" style=\"position:relative;\"><a href=\"#iam-identity-and-access-management\" aria-label=\"iam identity and access management permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>IAM (Identity and Access Management)</h2>\n<blockquote>\n<p>AWS Identity and Access Management(IAM)는 AWS 리소스에 대한 액세스를 안전하게 제어할 수 있는 웹 서비스로, IAM을 사용하여 리소스를 사용하도록 인증(로그인) 및 권한 부여(권한 있음)된 대상을 제어합니다. - AWS IAM 사용 설명서</p>\n</blockquote>\n<p>누구나 접속 가능한 온라인 서비스에서는 접근 관리가 무엇보다 중요한데, AWS에서는 IAM을 이용하여 사용자의 권한을 제어할 수 있다. 이 때의 사용자는 클라이언트를 말하는 것이 아닌 서버를 관리하는 엔지니어가 주된 사용자로 보면 좋을 것 같다. (클라이언트가 직접 서버를 제어하는 경우는 없으니 ?) 접근 관리의 중요성은 말로 몇 번을 말해도 부족할 정도로 중요하다는 것만 알고 있으면 된다. (원래 경험해보기 전까지는 중요하다고 해도 중요한지 모르는 경우가 허다하다. (나 포함))</p>\n<p>나는 IAM을 이해하면서 카드키를 많이 연상했다. 카드키도 어떻게 살펴보면 각 방마다 설정된 보안 설정으로 인해 접근할 수 있는 사람이 구분되어 있는 것이 IAM과 비슷하다고 생각되었다. 좀 더 단순하게 생각하면 각 기능들이 방이라고 생각하면 그 방에 접근할 수 있는 권한을 가지는 사람을 구분하고 그에 맞는 카드키를 전달해주는 것이 중요하기 때문이다. (모든 사람에게 모든 방에 접근할 수 있는 권한을 주었다고 생각해보자.. 내가 회장실에 들어갈 수 있다면..? ㅎㅎ)</p>\n<blockquote>\n<p>내가 IAM을 조금이라도 알아보려고 하는 이유는 전날 Zappa를 이용해서 Lambda에 Flask App을 배포하는 공부를 하다보니, AWS IAM을 이용해서 유저를 생성하고, 생성된 유저를 이용해 <code class=\"language-text\">awscli</code>을 구성하는걸 보고 그럼 IAM을 조금이라도 공부해야겠구나 생각해서 공부하게 되었다.</p>\n</blockquote>\n<p><img src=\"https://user-images.githubusercontent.com/52126612/85944612-0c7b3480-b973-11ea-8967-450794238136.jpg\" alt=\"F8DA4730-4D2C-4781-8BBC-4210B64CAAB1\"></p>\n<p>위 이미지는 AWS 로그인 시 선택하는 사용자 선택란이다. 루트 사용자와 IAM 사용자를 구분하여 접속이 가능하도록 설계되어 있다. 그럼 AWS에서 IAM 사용자는 어떻게 생성되고 어떤 과정을 거치는지 간단하게 알아보자. AWS의 IAM(Identity and Access Management)를 서비스에서 찾아 들어가면, 좌측 사이드바에 대시보드, 액세스 관리, 보고서 엑세스 등이 있는데, 여기서 엑세스 관리를 살펴보면, 그룹, 사용자, 역할, 정책, 자격 증명 공급자, 계정 설정 6개로 구성되어 있다. 간단하게 살펴보는게 목적이니 만큼 나는 여기서 그룹(Group), 사용자(User), 역할(Role), 정책(Policy)에만 집중해서 보았다. (다른 것까지…)</p>\n<p><img src=\"https://user-images.githubusercontent.com/52126612/85944609-0b4a0780-b973-11ea-8acd-ee7097a448a9.jpg\" alt=\"9DFAA173-7582-4C33-9C23-489EFB66C382\"></p>\n<p>각 기능들의 역할을 생각해보자! 우선 그룹(Group)부터 생각해보면 각 사용자(User)에게 권한(Role)을 일일이 설정해주기는 생각보다 까다롭고 번거롭다. (사실 번거로운 이유가 가장 큰 이유 같다.) 무엇보다 가장 번거로운건 대기업(?) 아무튼 큰 개발 집단일 수록 관리 인력이 굉장히 많을텐데, 이 많은 인원들에게 개인마다 권한을 부여하고 관리하기는 정말로 까다로운 일이다. 그래서 그룹이라는 기능이 생긴게 아닌가 싶다. 사실 Windows와 Linux를 조금이라도 사용해본 사용자라면, 그룹이 무엇인지 대조해서 이해하기가 쉽다고 생각되는데, Windows에서는 Administrator 계정이 있고, (대개 첫 생성되는 유저 계정이 Administrator와 동일한 권한을 가진다.) 생성되는 유저마다 특정 디스크 혹은 폴더에 읽기/쓰기 권한이 분리되어 있어 프로그램을 설치하거나 삭제하는 요청들이 제한되는데 이것과 동일하다고 보면 되고, Linux에서는 Ubuntu를 예시를 들면 (다른 OS도 동일하겠지만 Ubuntu만 써본 나로선..) sudo 계정을 가진 root 계정과 그에 각 그룹에 생성된 user들이 있어, 각 user마다 실행할 수 있는 권한이 다른 것과 유사하다. 실제로 ubuntu 폴더를 보면 사용자와 그룹이 나누어져있다.</p>\n<p>각 기능마다 설정할 수 있는 것들이 무엇이 있나 보자.</p>\n<h3 id=\"그룹-group\" style=\"position:relative;\"><a href=\"#%EA%B7%B8%EB%A3%B9-group\" aria-label=\"그룹 group permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>그룹 (Group)</h3>\n<p>그룹을 선택해서 들어가면 먼저 그룹 리스트를 볼 수 있는데 (나는 아직 아무것도 한게 없으니 이미지를 예시로 못 들겠다.) 아무튼 그 위에는 <strong>새로운 그룹 생성</strong>과 <strong>그룹 작업</strong>이 있다. 여기서 새로운 그룹 생성을 선택하여 눌러보면, 매우 심플하게 3단계로 되어 있고, 각 단계는 그룹 이름, 정책 연결, 검토가 있다. (검토 빼면 사실 2단계만 있는 것 같지만 검토도 중요하니.)</p>\n<p>그룹 이름을 간단하게 정하고 다음 단계인 정책 연결 단계로 오면 정말로 엄청난 정책들이 <strong>영어로!</strong> 나열되어 있다. 하나씩 설명할 수가 없다. 가장 최상단에 있는 정책만 살펴보면, <strong>AdministratorAccess</strong>로 관리자 접근으로 root 계정과 거의 동일한 권한을 갖는 정책이 아닐까 생각된다.</p>\n<h3 id=\"사용자-user\" style=\"position:relative;\"><a href=\"#%EC%82%AC%EC%9A%A9%EC%9E%90-user\" aria-label=\"사용자 user permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>사용자 (User)</h3>\n<p>사용자는 어제 생성해봐서 생략하고 싶지만 이것도 그룹과 마찬가지로 정말로 단순하다. <strong>사용자 추가</strong>를 들어가서 이름을 설정한 후에 액세스 유형을 선택하면 되는데, 유형은 두 가지로 <strong>프로그래밍 방식 액세스</strong>와 <strong>AWS Management Console 액세스</strong> 두 가지로 구분되어 있다. (말그대로 기능을 제공하는 것 같다.) 선택한 후에 다음으로 넘어가면 <strong>권한 설정</strong>이 진행된다.</p>\n<p>권한 설정에서는 <strong>그룹에 사용자 추가</strong>, <strong>기존 사용자에서 권한 복사</strong>, <strong>기존 정책 직접 연결</strong> 세 가지 중 하나를 선택하여 과정을 진행할 수 있고, 이 때 느낀 점은 정말로 AWS는 사용자 편의를 위한 구조가 잘 짜여있구나!라고 생각했다. (나만 그런가?) 아무튼 세 가지 중 하나를 선택하여 진행하면 가장 마지막에는 액세스 방식에 따른 키를 제공한다.</p>\n<h3 id=\"역할-role\" style=\"position:relative;\"><a href=\"#%EC%97%AD%ED%95%A0-role\" aria-label=\"역할 role permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>역할 (Role)</h3>\n<p>AWS에서는 IAM 역할이란? 신뢰하는 개체에 권한을 부여하는 안전한 방법입니다. 여기서 개체란 IAM 사용자, 실행중인 애플리케이션 코드, AWS 서비스, 디렉토리의 사용자이다. 이 때 IAM 역할은 권한을 부여하는 더욱 안전한 방법으로 짧은 기간 동안 유효한 키를 발행합니다. 라고 설명하고 있다. 역할 생성을 선택하면 아래와 같이 개체를 선택할 수 있는 항목들을 보여주고, 아래에 서비스 선택하고 그에 맞는 권한 정책들을 연결해준다. (영어 싫어..)</p>\n<p><img src=\"https://user-images.githubusercontent.com/52126612/85944608-0ab17100-b973-11ea-8944-31e0c6e96d8e.jpg\" alt=\"5C4EC323-6701-4252-89D3-4DA4E5A200DF\"></p>\n<h3 id=\"정책-policy\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EC%B1%85-policy\" aria-label=\"정책 policy permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정책 (Policy)</h3>\n<p>정책은 정말로 많아서 하나씩 해보는게 가장 좋기도 하겠지만 무엇보다 영어만 잘한다면 바로 이해할 수 있을 것 같다. 아래 이미지는 내 계정으로 들어간 정책 리스트인데, 아무것도 생성하지 않은 상태임에도 불구하고 가장 기본적인 정책이 685개이다. (어마무시하다) 간단하게 살펴보면, AlexaForBusiness 부터 보면, FullAccess부터 DeviceSetup, GateWayExecution 등으로 작게 구분되어 있는 걸 볼 수 있는데 예상컨데, FullAccess > DeviceSetup = GateWayExecution 으로 권한이 작게 분리된 것 같다. (실제로 Alexa를 써본 적이 없어서 설명할 수가 없는데 나중에 써본다면 추가로 작성해봐야겠다.)</p>\n<p><img src=\"https://user-images.githubusercontent.com/52126612/85944606-06855380-b973-11ea-9951-2baaa307d8f7.jpg\" alt=\"4A4AB356-9DCF-4E6D-8C7D-1271A2ED4E86\"></p>\n<h2 id=\"comment\" style=\"position:relative;\"><a href=\"#comment\" aria-label=\"comment permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Comment</h2>\n<p>아주 간단하게 살펴보았는데 IAM이라는 단어를 계속 읽다보니 IAM이라는 약자 굉장히 잘 지은 것 같다고 생각되었다. 지금까지 AWS 기능 내 몇가지 서비스들에 대한 약자를 생각해보았을 때 IAM처럼 직관적인 이름은 없는 것 같다. (AWS에서 지은 이름은 아니지만) 왜 그렇게 생각했냐면 마치 누군가 초인종을 누르고 I’m ~ 라고 내가 누구인지 소개하는 것 같다. 그 소개를 듣고 문을 열어줄지 아니면 계속 닫고 있을지는 듣는 사람이 결정하는 것처럼 말이다.</p>\n<p>내가 그 동안 서버를 몇 개 받고 그 안에 <code class=\"language-text\">python</code>이라던지 <code class=\"language-text\">nginx</code> <code class=\"language-text\">uWSGI</code> <code class=\"language-text\">docker</code> 등을 구성해보면서 사실 권한이라는 걸 크게 생각해본 적이 없었다. 가장 큰 이유로는 클라이언트의 접근만 신경쓴다던지, IP 접근을 막는 방화벽만 신경 썼는데 이번을 통해서 내 자신을 반성하게 되었고 회사에서 AWS 내에 서버를 구성할 일이 있다면 사용자(User)를 구분한다던지 각 권한을 잘 구성하여 그룹(Group)을 만들어본다던지 해보면 재밌을 것 같다.</p>\n<br>\n<h2 id=\"ec2\" style=\"position:relative;\"><a href=\"#ec2\" aria-label=\"ec2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>EC2</h2>\n<p>ㅤ\n<strong>EC2 기본 개념</strong>\nEC2(Elastic Compute Cloud)는 AWS에서 가장 기본적으로 쓰이는 인프라 중 하나로 인터넷에 연결된 가상 서버를 제공해준다. EC2를 사용하는 이유는 <u>효율성</u>과 <u>비용 절감</u>에 있다. EC2는 클릭 몇 번으로 서버를 생성할 수 있기 때문에 실제 서버를 구축하는 것보다 간편하고 효율적이며, 사용한 만큼만 요금을 지불하면 되므로 비용도 절감할 수 있다.\nㅤ</p>\n<ul>\n<li>시작 (Start) : 운영체제가 부팅되고 사용할 수 있는 상태로 시작하는 순간부터 사용 요금이 과금되며 <u>1분을 사용하더라도 1시간 요금으로 책정된다.</u></li>\n<li>정지 (Stop) : 인스턴스 정지로 운영체제를 종료해 시스템이 정지한 상태로 <u>사용 요금이 과금되지 않는다.</u></li>\n<li>삭제 (Terminate) : 인스턴스 삭제로 삭제된 뒤에 목록에서 완전히 사라지려면 시간이 소요된다.</li>\n<li>재부팅 (Reboot) : 운영체제를 종료한 뒤 다시 시작한다.</li>\n<li>Root 장치 : 운영체제가 설치되는 스토리지로 Root 장치로는 EBS와 인스턴스 스토리지를 사용할 수 있다.</li>\n<li>Kernel ID : 인스턴스가 사용하고 있는 Linux 커널이다. Linux 반가상화는 외부에서 Linux 커널을 지정해줘야한다.</li>\n</ul>\n<blockquote>\n<p>ℹ️ 운영체제에 따른 가상화 형태</p>\n<ul>\n<li>Windows : OS 커널을 수정할 수 없기에 하드웨어 가상화(HVM), 전가상화(Full Virtualization)로 실행된다.</li>\n<li>Linux : 반대로 OS 커널을 수정할 수 있어 반가상화(Paravirtualization)로 실행된다. (때에 따라 전가상화 선택)</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>ℹ️ EC2 SLA</p>\n<p>SLA(Service Level Agreement)는 월 99.95%로 한 달에 약 0.36시간까지 장애가 발생할 수 있어, EC2를 사용하여 서비스를 구축할 때에는 항상 장애가 발생할 수 있다는 가정하에 설계해야한다.</p>\n</blockquote>\n<p>ㅤ</p>\n<h2 id=\"ec2-인스턴스-유형\" style=\"position:relative;\"><a href=\"#ec2-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%EC%9C%A0%ED%98%95\" aria-label=\"ec2 인스턴스 유형 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>EC2 인스턴스 유형</h2>\n<p>EC2에서 생성한 가상 서버를 인스턴스라고 한다. 서버 각각을 객체로 본다고 할 수 있는데 마찬가지로 PC와 서버에는 어떤 부품이 사용되었고 성능이 어떤지 알려주는 <u>사양</u>이 있다. EC2의 인스턴스 유형이 여러 가지 사양으로 나뉘어져 있는데, 그 이유는 <u>비용 절감</u>과 <u>효율성</u> 때문이다.</p>\n<p>인스턴스 유형은 m3.medium과 같이 인스턴스 패밀리인 m에 세대(Generation)를 뜻하는 숫자가 붙고, 점 뒤에는 전체적인 사양 규모를 뜻하는 단어가 붙는다.</p>\n<p><strong>인스턴스 패밀리</strong></p>\n<ul>\n<li>범용 : M1과 M3로 시작하는 인스턴스 유형으로 vCPU, 메모리, 네트워크, 저장 공간 등이 평균 사양으로 제공된다.</li>\n<li>컴퓨팅 최적화 : C로 시작하는 인스턴스 유형으로 다른 인스턴스 패밀리에 비해 <u>메모리 대비 vCPU 비율이 높다.</u></li>\n<li>GPU 인스턴스 : G로 시작하는 인스턴스 유형으로 고성능의 NVIDIA GPU가 장착되어 있어 CUDA, OpenCL 등을 실행할 때 사용된다.</li>\n<li>메모리 최적화 : M2와 CR1으로 시작하는 인스턴스 유형으로 다른 인스턴스 패밀리에 비해 <u>메모리 용량이 훨씬 크다.</u></li>\n<li>스토리지 최적화 : H와 I로 시작하는 인스턴스 유형으로 다른 인스턴스 패밀리보다 <u>스토리지 용량이 훨씬 크거나 초고속 I/O를 제공</u>한다.</li>\n<li>마이크로 인스턴스 : 가격이 가장 싼 인스턴스로 낮은 vCPU 성능과 적은 메모리를 제공한다. 프리티어에서는 해당 인스턴스 유형을 무료로 사용할 수 있다.</li>\n</ul>\n<blockquote>\n<p>ℹ️ vCPU</p>\n<p>EC2는 가상서버로 EC2 서버는 가상화 소프트웨어(또는 하드웨어 가상화)를 통해 실행되어 가상화 소프트웨어를 통해 제공되는 CPU를 vCPU라고 한다.</p>\n</blockquote>\n<p>ㅤ</p>\n<h2 id=\"ec2-인스턴스-구매-옵션\" style=\"position:relative;\"><a href=\"#ec2-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%EA%B5%AC%EB%A7%A4-%EC%98%B5%EC%85%98\" aria-label=\"ec2 인스턴스 구매 옵션 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>EC2 인스턴스 구매 옵션</h2>\n<p>EC2 인스턴스 유형이 여러 가지 사양으로 나눠진 것과 같이 구매 옵션도 여러 가지가 구성되어 있다. 장기간 예약을 하거나 수요가 적은 시간에 인스턴스를 사용하는 방식으로 비용을 절감할 수 있다.</p>\n<p>구매 및 과금 방식에 따라 크게 3가지로 구분된다.</p>\n<ul>\n<li>\n<p>온 디맨드 인스턴스 (On Demand Instance) : 필요할 때 바로 생성해서 사용할 수 있는 방식으로 과금은 1시간 단위로 이루어지며 1분을 사용했더라도 1시간으로 책정된다. (가장 비싼 요금 방식)</p>\n<ul>\n<li>공유 인스턴스 (Shared tenancy) : 하나의 물리적인 서버에 여러 개의 EC2 인스턴스가 실행된다. 다른 인스턴스가 서버 자원을 많이 소모한다면 현재 인스턴스의 성능에 영향이 있을 수 있다.</li>\n<li>전용 인스턴스 (Dedicated tenancy) : 하나의 물리적인 서버에 하나의 EC2 인스턴스가 실행되며 공유 인스턴스보다 비용이 비싸다.</li>\n</ul>\n</li>\n<li>\n<p>스팟 인스턴스 (Spot Instance) : 경매 방식의 인스턴스로 인스턴스의 스펙을 설정하고 원하는 가격을 입력하여 입찰하면 수요와 공급에 따라 가격이 결정되고 높게 입찰한 사람한테 인스턴스가 할당된다. 해당 스펙의 인스턴스를 다른 사람이 더 높은 가격으로 입찰했다면 내가 가지고 있는 인스턴스는 종료되는데, 다음과 같은 상황에 적합하다.</p>\n<ul>\n<li>클러스터링으로 이루어지는 분석 작업</li>\n<li>이미지 변환, 비디오 렌더링</li>\n<li>웹 크롤링</li>\n<li>각종 테스트</li>\n<li>기타 불시에 중단되어도 상관없는 업무</li>\n</ul>\n</li>\n<li>\n<p>예약 인스턴스 (Reserved Instance) : 일정한 예약금을 선불로 내면 인스턴스를 1년 또는 3년 동안 예약할 수 있으며 시간당 요금이 대폭 할인된다. 온 디맨드 인스턴스와 마찬가지로 공유, 전용 인스턴스로 나뉜다.</p>\n<ul>\n<li>Light 사용률 예약 인스턴스 : 모든 예약 인스턴스 중에서 선결제 금액이 가장 저렴하여 사용 시간이 많지 않을 때 유용하다. 즉 하루 종일 사용하지 않고, 1년 중 몇 달만 사용하는 개발 및 테스트와 단기 프로젝트에 적합하다.</li>\n<li>Medium 사용률 예약 인스턴스 : Light보다 선결제 금액은 비싸지만 시간당 요금이 저렴하다. 해당 인스턴스는 거의 항상 실행하지만 사용량에 약간의 변화가 있을 때 유용하다.</li>\n<li>Heavy 사용률 예약 인스턴스 : Medium보다 선결제 금액은 비싸지만 시간당 요금이 가장 저렴하다. 24시간 상시 가동되어야 하는 출시된 제품에 유용하다.</li>\n</ul>\n</li>\n</ul>\n<p>ㅤ</p>\n<h2 id=\"가상-스토리지를-제공하는-ebs\" style=\"position:relative;\"><a href=\"#%EA%B0%80%EC%83%81-%EC%8A%A4%ED%86%A0%EB%A6%AC%EC%A7%80%EB%A5%BC-%EC%A0%9C%EA%B3%B5%ED%95%98%EB%8A%94-ebs\" aria-label=\"가상 스토리지를 제공하는 ebs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>가상 스토리지를 제공하는 EBS</h2>\n<p>EBS(Elastic Block Store)는 EC2 인스턴스에 장착하여 사용할 수 있는 가상 저장 장치로 EBS는 EC2 인스턴스에서 제공하는 기본 용량보다 더 사용해야 할 때, 운영체제를 중단시키지 않고 용량을 자유롭게 늘리고 싶을 때, 영구적인 데이터 보관이 필요할 때, RAID 등 고급 기능이 필요할 때 사용된다.</p>\n<p>EBS는 EC2에 설치된 OS에서 그냥 일반적인 하드디스크나 SSD처럼 인식된다. 원하는 크기로 만들 수 있고, 성능(IOPS) 또한, 원하는 수치로 설정할 수 있다. 그리고 사용자가 삭제하기 전까지는 데이터가 안전하게 유지된다.</p>\n<p><strong>EBS 기본 개념</strong></p>\n<ul>\n<li>볼륨 (Volume) : EBS의 가장 기본적인 형태로 OS에서 바로 사용 가능한 형태</li>\n<li>이미지 (Image) : AMI(Amazon Machine Image)를 줄여 부르는 말로 OS가 설치된 형태로 해당 AMI로 EC2 인스턴스를 생성한다.</li>\n<li>스냅샷 (Snapshot) : EBS 볼륨의 특정 시점을 그대로 복사해 저장한 파일을 뜻하며, 이 스냅샷을 이용하여 EBS 볼륨과 AMI를 생성할 수 있다.</li>\n<li>IOPS (Input/Output Opeation Per Second) : 저장 장치의 성능 측정 단위로 최소 100 IOPS에서 4,000 IOPS까지 설정할 수 있다.</li>\n</ul>\n<p>EC2 인스턴스를 생성할 때 기본적으로 OS가 설치된 EBS 볼륨이 함께 생성된다.</p>\n<p>ㅤ</p>\n<h3 id=\"ebs-볼륨-생성하기\" style=\"position:relative;\"><a href=\"#ebs-%EB%B3%BC%EB%A5%A8-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0\" aria-label=\"ebs 볼륨 생성하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>EBS 볼륨 생성하기</h3>\n<ol>\n<li>EC2 왼쪽 메뉴에서 Elastic Block Store -> 볼륨 (Volumes) 선택</li>\n<li>\n<p>볼륨 생성 (Create Volume)</p>\n<ul>\n<li>볼륨 유형(Type) : EBS 볼륨 형태 (📌 gp : General Purpose)</li>\n<li>크기 (Size) : EBS 볼륨 크기</li>\n<li>IOPS : gp로 선택한 경우 IOPS를 설정할 수 없다. Type을 Provisioned IOPS로 선택해야 설정할 수 있다.</li>\n<li>가용 영역 (Availability Zone) : 볼륨이 생성될 가용 영역으로 EC2 인스턴스가 생성된 가용 영역과 같은 곳에 위치해야 EC2 인스턴스에서 사용할 수 있다.</li>\n<li>스냅샷 ID : 생성해 놓은 EBS 스냅샷이 있다면 여기서 선택 가능하다.</li>\n<li>암호화 (Encryption) : 볼륨 암호화 옵션</li>\n</ul>\n</li>\n<li>볼륨 연결 (Attach Volume)</li>\n<li>\n<p>볼륨 포맷하기 : <code class=\"language-text\">sudo mkfs -t ext4 /dev/sdf</code></p>\n<ul>\n<li>Ubuntu 20.04 의 경우 <code class=\"language-text\">/dev/xvdf ~ /dev/xvdp</code> 이다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">sudo</span> <span class=\"token function\">mkfs</span> -t ext4 /dev/xvdf\n<span class=\"token function\">mke2fs</span> <span class=\"token number\">1.45</span>.5 <span class=\"token punctuation\">(</span>07-Jan-2020<span class=\"token punctuation\">)</span>\nCreating filesystem with <span class=\"token number\">2621440</span> 4k blocks and <span class=\"token number\">655360</span> inodes\nFilesystem UUID: e753bbf9-894e-4fcc-b068-52379a1ae28e\nSuperblock backups stored on blocks:\n\t<span class=\"token number\">32768</span>, <span class=\"token number\">98304</span>, <span class=\"token number\">163840</span>, <span class=\"token number\">229376</span>, <span class=\"token number\">294912</span>, <span class=\"token number\">819200</span>, <span class=\"token number\">884736</span>, <span class=\"token number\">1605632</span>\n\nAllocating group tables: <span class=\"token keyword\">done</span>\nWriting inode tables: <span class=\"token keyword\">done</span>\nCreating journal <span class=\"token punctuation\">(</span><span class=\"token number\">16384</span> blocks<span class=\"token punctuation\">)</span>: <span class=\"token keyword\">done</span>\nWriting superblocks and filesystem accounting information: <span class=\"token keyword\">done</span></code></pre></div>\n</li>\n<li>볼륨 마운트하기 : <code class=\"language-text\">sudo mount /dev/sdf /mnt</code></li>\n<li>볼륨 언마운트하기 : <code class=\"language-text\">sudo umount /mnt</code></li>\n</ol>\n<br>\n<h1 id=\"s3-storage\" style=\"position:relative;\"><a href=\"#s3-storage\" aria-label=\"s3 storage permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>S3 Storage</h1>\n<p>S3(Simple Storage Service)는 인터넷 스토리지 서비스로 용량에 관계없이 파일을 저장할 수 있고 웹(HTTP 프로토콜)에서 파일에 접근할 수 있다.</p>\n<p>S3를 사용하는 이유는 <u>성능</u>과 <u>비용</u>에 있는데, 대용량 파일 저장을 EC2와 EBS를 통해 구축한다면 상당히 많은 비용이 들고, 노력이 요구된다 하지만 S3는 저장 용량이 무한대이고 파일 저장에 최적화되어 있기 때문에 용량을 추가하거나 성능을 높이는 작업을 하지 않아도 된다. 비용 역시 EC2와 EBS로 구축하는 것보다 저렴하다.</p>\n<p>또한 EC2와 EBS로 정적 웹 서비스(HTML과 Javascript로만 구성된 웹사이트)를 구축한다면 일일이 EC2와 EBS를 생성해 높은 요금을 낼 필요 없이 S3에서 정적 웹 서비스(정적 웹 호스팅)을 사용할 수 있다. S3 자체가 수천 대 이상의 매우 성능이 좋은 웹 서버로 구성되어 있어서 EC2와 EBS로 구축했을 때처럼 <u>자동 횡적 확장(Auto Scaling)</u>이나 <u>부하 분산(Load Balancing)</u>에 신경 쓰지 않아도 된다.</p>\n<p>S3는 웹하드 서비스와 달리 별도의 클라이언트를 설치할 필요 없이 파일 업로드/다운로드를 모두 HTTP 프로토콜로 처리한다.</p>\n<p>S3의 기본 개념</p>\n<ul>\n<li>\n<p>객체 (Object) : S3에 데이터가 저장되는 최소 단위로 파일과 메타데이터로 구성된다.</p>\n<ul>\n<li>기본적으로 키(Key)가 객체의 이름이며 값(Value)이 객체의 데이터이다.</li>\n<li>객체 하나의 크기는 1바이트부터 5테라바이트(TB)까지이다.</li>\n<li>메타 데이터는 HTTP Content-Type 형식(MIME)으로 파일의 확장자에 따라 자동으로 설정되어 임의로 설정할 수도 있다. 키-값 형식이며 S3 전용 메타데이터 및 사용자 정의 메타데이터도 저장된다.</li>\n</ul>\n</li>\n<li>\n<p>버킷 (Bucket) : S3에서 생성할 수 있는 최상위 폴더(디렉토리)이다. 버킷은 리전별로 생성해야하며 버킷의 이름은 모든 S3 리전 중에서 유일해야한다. <u>계정별로 100개까지 생성 가능하다.</u></p>\n<ul>\n<li>버킷 안에 객체가 저장된다.</li>\n<li>폴더(디렉터리) 생성이 가능하다.</li>\n<li>저장 가능한 객체의 개수는 무제한이다. 용량 역시 무제한이다.</li>\n<li>접속 제어 및 권한 관리가 가능하다.</li>\n</ul>\n</li>\n<li>내구성과 가용성 : 1년 기준으로 99.999999999% 내구성, 99.99% 가용성을 가지고 있다. 내구성은 데이터가 유실되지 않는 것을 뜻하며 가용성은 언제나 정상적으로 사용 가능한 상태를 말한다.</li>\n<li>요금 : 저장 용량과 데이터 전송량, HTTP 요청(Request) 개수로 책정된다.</li>\n</ul>\n<br>\n<p>S3에는 내구성이 다른 두 가지 스토리지 옵션이 있다.</p>\n<ul>\n<li>표준 스토리지(Standard Storage) : 일반적인 스토리지 옵션, 99.999999999% 내구성을 가지고 있지만 AWS 내부적으로도 이런 높은 내구성을 유지하려면 그만큼 비용이 많이 들게 되고 요금도 높아진다. 유실되면 안되는 중요한 데이터 저장에 권장</li>\n<li>낮은 중복 스토리지 (RRS, Reduced Redundancy Storage) : 표준 스토리지보다는 낮은 99.99% 내구성을 가지고 있다. 이름 그대로 데이터를 복제한 사본의 수를 줄여 비용을 낮추었기 때문에 요금이 저렴하다. 표준 스토리지 대비 약 20% 가량 저렴하다.</li>\n</ul>","frontmatter":{"title":"AWS 관련 정리","date":"September 27, 2020"}}},"pageContext":{"slug":"/AWS/aws-관련-정리/","previous":{"fields":{"slug":"/Django/django-튜토리얼/"},"frontmatter":{"title":"Django 튜토리얼","category":"Django","draft":false}},"next":{"fields":{"slug":"/Django/django-rest-framework-시작하기/"},"frontmatter":{"title":"Django REST Framework 시작하기","category":"Django","draft":false}}}},"staticQueryHashes":["2486386679","3128451518"]}