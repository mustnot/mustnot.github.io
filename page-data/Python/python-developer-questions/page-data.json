{"componentChunkName":"component---src-templates-blog-post-js","path":"/Python/python-developer-questions/","result":{"data":{"site":{"siteMetadata":{"title":"mustnot","author":"[mustnot]","siteUrl":"https://mustnot.github.io","comment":{"disqusShortName":"mustnot","utterances":"mustnot/mustnot.github.io"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"806c4d6d-3f20-51c8-ba96-09947e004f89","excerpt":"파이썬 개발한지 거의 2년이 다 되어가는데, 늘 사용하던 것들도 왜 사용하는지 어떤 이유로 이런 코드가 더 유용한지에 대해 정확히 모를 때가 있어서 리마인드 겸 정리하기 위해 “Hire the Top 3% of Freelance Python Developers” 라는 글을 읽고 내용 정리와 내 생각을 적어보았다. Q : Why use function decorators? Give an example. 파이썬 데코레이터(Decorator…","html":"<blockquote>\n<p>파이썬 개발한지 거의 2년이 다 되어가는데, 늘 사용하던 것들도 왜 사용하는지 어떤 이유로 이런 코드가 더 유용한지에 대해 정확히 모를 때가 있어서 리마인드 겸 정리하기 위해 “Hire the Top 3% of Freelance Python Developers” 라는 글을 읽고 내용 정리와 내 생각을 적어보았다.</p>\n</blockquote>\n<h2 id=\"q--why-use-function-decorators-give-an-example\" style=\"position:relative;\"><a href=\"#q--why-use-function-decorators-give-an-example\" aria-label=\"q  why use function decorators give an example permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q : Why use function decorators? Give an example.</h2>\n<p>파이썬 데코레이터(Decorator)는 본질적으로 함수 또는 클래스 정의를 수정하거나 확장하는데 사용되는 호출 가능한 파이썬 객체로, 데코레이터를 사용하는 이유 중 하나는 정의된 하나의 데코레이터가 여러 함수(또는 클래스)에 적용될 수 있다는 점이다. 가장 대표적인 예시로 Flask는 데코레이터를 이용해 웹 애플리케이션에 새 엔드 포인트를 추가하는 데 사용하며 기본적인 방법인 함수를 만들고 엔드 포인트를 매핑하는 번거로운 작업을 데코레이터 하나로 충족시켜준다. (Flask 개발자로서 이건 정말 편하다고 느낀다. Django 였다면, 하나하나 엔드포인트를 지정해줘야했을텐데 !) 데코레이터는 위 예시 외에도 클래스 또는 함수에 동기화, 형식 적용, 로깅 또는 사전 / 사후 조건 추가가 가능하다.</p>\n<p>내가 직접 만들어보고 잘 사용하고 있는 데코레이터는 일부 리턴 폼을 아름답게 내가 원하는 형식으로 변경시켜주는 데코레이터와 데이터베이스에서 데이터를 가져올 때 얼마나 시간이 걸리는지에 대해 계산해주는 데코레이터를 자주 사용한다. 물론 이외에도 Flask에서 여러 데코레이터를 사용하고 있다.</p>\n<p>ㅤ</p>\n<h2 id=\"q--what-are-lambda-expressions\" style=\"position:relative;\"><a href=\"#q--what-are-lambda-expressions\" aria-label=\"q  what are lambda expressions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q : What are lambda expressions?</h2>\n<p>Lambda 표현식은 한 줄로 일종에 이름이 정의되지 않는 함수를 만드는 간단한 기법이다. 어떻게 보면 AWS에 있는 Lambda와 동일한건가라고 생각할 수도 있는데 내 생각이지만 거의 동일한 기능을 제공한다. 다만 AWS Lambda는 이름이 정의되지 않는 것이 아닌 서버가 정의되지 않은 함수라고 생각하면 더 좋을 것 같다고 생각한다. (그저 내 생각이다)</p>\n<p><strong>인라인 함수</strong>라는 특성으로 기존 공식 함수 선언보다 더 읽기 쉽고 간결한 코드가 생성된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> x <span class=\"token operator\">+</span> y</code></pre></div>\n<p>하지만 단점도 존재하는데, 인라인 함수라는 특성 상 여러 곳에서 참조가 불가능하다는 단점이 있다. 무슨 말이냐면, A 라는 함수 내에서 인라인으로 lambda 함수를 이용했다면 B 라는 함수 내에서는 A에서 사용한 lambda 함수는 사용할 수가 없다. 그래서 인라인 함수라는 점에서 적용 범위에 있어서는 매우 제한적이다.</p>\n<p>ㅤ</p>\n<h2 id=\"q--consider-the-two-approaches-below-for-initializing-an-array-and-the-arrays-that-will-result-how-will-the-resulting-arrays-differ-and-why-should-you-use-one-initialization-approach-vs-the-other\" style=\"position:relative;\"><a href=\"#q--consider-the-two-approaches-below-for-initializing-an-array-and-the-arrays-that-will-result-how-will-the-resulting-arrays-differ-and-why-should-you-use-one-initialization-approach-vs-the-other\" aria-label=\"q  consider the two approaches below for initializing an array and the arrays that will result how will the resulting arrays differ and why should you use one initialization approach vs the other permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q : Consider the two approaches below for initializing an array and the arrays that will result. How will the resulting arrays differ and why should you use one initialization approach vs. the other?</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">></span> x <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">3</span>\n<span class=\"token operator\">></span> x\n<span class=\"token operator\">></span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">></span> y <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">></span> y\n<span class=\"token operator\">></span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p><code class=\"language-text\">x, y</code> 리스트만 보면 둘 다 동일하게 <code class=\"language-text\">[1, 2, 3, 4]</code> 3개를 원소로 갖고 있는데, 3개의 차이점은 <code class=\"language-text\">x</code>의 경우에는 <code class=\"language-text\">[1, 2, 3, 4]</code> 라는 동일한 객체를 3번 반복한 것으로 3개의 원소 모두 동일한 객체를 바라보고 있고, <code class=\"language-text\">y</code>의 경우에는 3개의 원소를 각각 새로 생성하여 리스트 안에 포함시켰기 때문에 3개의 객체는 모두 다른 객체로 볼 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">></span> x<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">99</span>\n<span class=\"token operator\">></span> x\n<span class=\"token operator\">></span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">99</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">99</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">99</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">></span> y<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">99</span>\n<span class=\"token operator\">></span> y\n<span class=\"token operator\">></span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">99</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>리스트의 원소의 값 중 하나를 99로 변경한 결과인데, <code class=\"language-text\">x, y</code>의 결과가 다른 것을 볼 수 있다 .이처럼 <code class=\"language-text\">x</code>의 경우에는 모두 동일한 객체이기 때문에 하나의 객체가 변경되면 동일한 다른 객체 역시도 변경되는 현상이 있다. 그 반대로 <code class=\"language-text\">y</code>의 경우에는 각기 다른 객체이기 때문에 첫번 째 리스트의 원소만 변경되었다.</p>\n<p>ㅤ</p>\n<h2 id=\"q--what-will-be-printed-out-by-the-second-append-statement-below\" style=\"position:relative;\"><a href=\"#q--what-will-be-printed-out-by-the-second-append-statement-below\" aria-label=\"q  what will be printed out by the second append statement below permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q : What will be printed out by the second append() statement below?</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token builtin\">list</span><span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token builtin\">list</span>\n\n<span class=\"token operator\">></span> append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">></span> append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">></span> append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n??</code></pre></div>\n<p>두 번째 <code class=\"language-text\">append()</code>의 결과는 처음 <code class=\"language-text\">append()</code>의 결과와 아무래도 똑같다고 생각했다. (나도 그랬다) 하지만 결과는 <code class=\"language-text\">[0, 1]</code>로 나온다. 왜 그럴까라고 물어보면 나는 몰랐다. 나는 저렇게 초기화를 시켜본 적도 없거니와 저렇게 써본적도 없어서이다. 원인은 함수 인수의 기본값이 표현식일 경우에 생기는 문제인데, 몇 번 시도해보니 표현식이 아니여도 동일한 현상은 나타난다. (아래 예시 코드)</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">default_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token operator\">=</span>default_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token builtin\">list</span><span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token builtin\">list</span></code></pre></div>\n<p>그럼 현상에 대한 정확한 원인은 무엇이냐면 <strong>함수는 호출 될 때마다 표현식을 단 한 번만 계산한다</strong>는 점인데, 일단 리스트 인수가 빈 배열로 초기화되면, 인수가 지정되지 않은 이후에 호출되는 경우에는 원래 초기화되었던 동일한 배열을 계속 사용하기 때문에 이러한 예상할 수 없는 동작이 발생하게 된다. 아래는 결과이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">></span> append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">></span> append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">></span> append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">></span> append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span></code></pre></div>","frontmatter":{"title":"Python Developer Questions","date":"June 21, 2020"}}},"pageContext":{"slug":"/Python/python-developer-questions/","previous":{"fields":{"slug":"/Python/python-unittest,-pytest-연습/"},"frontmatter":{"title":"Python Unittest, Pytest 연습","category":"Python","draft":false}},"next":{"fields":{"slug":"/Javascript/modern-javascript-tutorials/"},"frontmatter":{"title":"Modern Javascript Tutorials","category":"Javascript","draft":false}}}},"staticQueryHashes":["2486386679","3128451518"]}