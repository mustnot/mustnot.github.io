{"componentChunkName":"component---src-templates-blog-post-js","path":"/Python/python-unittest,-pytest-연습/","result":{"data":{"site":{"siteMetadata":{"title":"mustnot","author":"[mustnot]","siteUrl":"https://mustnot.github.io","comment":{"disqusShortName":"mustnot","utterances":"mustnot/mustnot.github.io"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"ccbdec5b-bfb3-50fd-9c5e-06e071226465","excerpt":"Test 실제로 테스트 코드를 많이 짜본 경험이 없다. 업무를 하면서도 테스트가 중요하다는 것을 인지함에도 불구하고 시간이 없다는 핑계로 넘겨 많은 시행착오 끝에 완성된 코드가 대다수라는 점이 가끔은 부끄럽기도 했고, 어느 순간부터 테스트 코드를 작성해야겠다고 생각하고 작성하고 있는데 다시 한번 정리해야겠다고 생각되어서 정리한다. 우선 테스트란, 말 그대로 테스트이다. 코드가 있다면 Input에 대해 내가 원하는 Output…","html":"<h1 id=\"test\" style=\"position:relative;\"><a href=\"#test\" aria-label=\"test permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Test</h1>\n<blockquote>\n<p>실제로 테스트 코드를 많이 짜본 경험이 없다. 업무를 하면서도 테스트가 중요하다는 것을 인지함에도 불구하고 시간이 없다는 핑계로 넘겨 많은 시행착오 끝에 완성된 코드가 대다수라는 점이 가끔은 부끄럽기도 했고, 어느 순간부터 테스트 코드를 작성해야겠다고 생각하고 작성하고 있는데 다시 한번 정리해야겠다고 생각되어서 정리한다.</p>\n</blockquote>\n<p>우선 테스트란, 말 그대로 테스트이다. 코드가 있다면 Input에 대해 내가 원하는 Output이 정확하게 일치하는지를 확인하는 것일 수도 있고 어떠한 과정이 있다면, 코드에 그런 과정이 순차적으로 이어지고 특정 상황에서 문제가 발생하지 않은지 테스트하는 것을 말한다. 단순하게 설명하면 이러한데, 생각해보면 그리 단순한 문제는 아니다.</p>\n<p>실제로 코드를 작성하다보면 굉장히 많은 시행착오를 겪는데, 예를 들어 사용자가 이메일을 등록하는 기능이 있다고 예를 들면, 옛날 같았으면 단순히 이메일 포맷만 맞다면 더이상 검사하지 않고 넘어갔을 것이다. 하지만, 이제는 이메일이라는게 단순히 고객이 등록할 수 있는 정보 중에 하나였다면, 이제는 계정으로도 사용되고 이메일이 서비스의 가장 중요한 일부분이 될 수 있어 많은 검증 로직이 필요하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> re\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">validate_email</span><span class=\"token punctuation\">(</span>email<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    expression <span class=\"token operator\">=</span> <span class=\"token triple-quoted-string string\">r'''^(?:(?:[\\w`~!#$%^&amp;*\\-=+;:{}'|,?\\/]+(?:(?:\\.(?:\"(?:\\\\?[\\w`~!#$%^&amp;*\\-=+;:{}'|,?\\/\\.()&lt;>\\[\\] @]|\\\\\"|\\\\\\\\)*\"|[\\w`~!#$%^&amp;*\\-=+;:{}'|,?\\/]+))*\\.[\\w`~!#$%^&amp;*\\-=+;:{}'|,?\\/]+)?)|(?:\"(?:\\\\?[\\w`~!#$%^&amp;*\\-=+;:{}'|,?\\/\\.()&lt;>\\[\\] @]|\\\\\"|\\\\\\\\)+\"))@(?:[a-zA-Z\\d\\-]+(?:\\.[a-zA-Z\\d\\-]+)*|\\[\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\])$'''</span>\n    <span class=\"token keyword\">if</span> re<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span>expression<span class=\"token punctuation\">,</span> email<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span></code></pre></div>\n<br>\n<p>위 코드는 간단하게 regex를 이용한 이메일 검증인데, 음 정규식을 하나 하나 뜯어서 설명하기에는 너무 복잡하니 문제점만 설명하면, 해당 이메일 정규식은 이메일 폼만 맞는다면 모두 승인된다. 예를 들어서 <code class=\"language-text\">admin@who.is.your.admin</code> 이렇게 <code class=\"language-text\">@</code> 뒤에 계속해서 도메인이 생기더라도 이메일 형식에 맞기 때문에 넘어가는데 좀 더 디테일하게 따져보면 <code class=\"language-text\">@</code> 뒤에는 주로 도메인이 많이 붙는데, <code class=\"language-text\">who.is.your.admin</code> 이러한 도메인이 과연 있을까라고 생각하면 분명하게 없다. 그 이유는 도메인 형식을 간단하게 말하면 <code class=\"language-text\">google.co.kr</code>을 예로 처음 <code class=\"language-text\">google</code>이 있고, 그 다음에 여기에서는 <code class=\"language-text\">co.kr</code>, <code class=\"language-text\">or.kr</code>, <code class=\"language-text\">go.kr</code> 같이 2개로 국가 혹은 기관을 의미하는 끝 주소와 혹은 <code class=\"language-text\">com</code>, <code class=\"language-text\">net</code>, <code class=\"language-text\">org</code> 와 같이 한 단어로 이루어졌다.</p>\n<p>그러면 어떻게 디테일화 시키면 좋을까라고 생각하면 정규식이 디테일하지는 않지만 간단히 나마 작성하면 이렇게 작성할 것 같다. 사실 이것보다 더 자세하게 작성해야한다. <a href=\"%5Bhttps://ko.wikipedia.org/wiki/%EC%A0%84%EC%9E%90_%EC%9A%B0%ED%8E%B8_%EC%A3%BC%EC%86%8C%5D(https://ko.wikipedia.org/wiki/%EC%A0%84%EC%9E%90_%EC%9A%B0%ED%8E%B8_%EC%A3%BC%EC%86%8C)\">전자우편주소-wikipedia</a>에 작성된 내용을 읽어보면 <code class=\"language-text\">local</code> 부분에도 <code class=\"language-text\">@</code>가 들어갈 수 있기 때문에 추가적인 작업이 필요하다. (우선 간단한 코드 작성이니 경우 제외)</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">DOMAIN_REGEX <span class=\"token operator\">=</span> <span class=\"token string\">\"^[\\w\\d\\-]+(\\.[\\w]{2,3})?\\.[\\w\\d\\-]+$\"</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">validate_email</span><span class=\"token punctuation\">(</span>email<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  local<span class=\"token punctuation\">,</span> domain <span class=\"token operator\">=</span> email<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">'@'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> re<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span>DOMAIN_REGEX<span class=\"token punctuation\">,</span> domain<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span></code></pre></div>\n<br>\n<blockquote>\n<p>간단하게 짠 코드더라도 그 의도와 예외를 고려하여 코드를 작성할 필요가 있다. 경험적인거지만 개발하기 전에 리서치를 최대한 많이 해보는게 좋다고 생각된다. 예를 들어 도메인에 대한 정규식을 찾더라도 수 많은 정규식이 나오고 이런 정규식 중에 서비스 혹은 기능에 가장 알맞는 정규식이 있을 수도 있고 없을 수 있다.</p>\n</blockquote>\n<p>처음 이메일 검증 코드를 작성할 때에는 문제가 많았다. 예를 들면, <code class=\"language-text\">google.com</code> <code class=\"language-text\">aaa.com</code>과 같이 뒤에 하나의 TLD만 있는 케이스만 생각해서 개발했는데, 기능 테스트를 진행하다보니 많은 문제가 있었다. 예를 들면, <code class=\"language-text\">co.kr</code>을 인식하지 못해 이메일을 못 보낸다던가, 검증에서 계속 실패해서 다음 단계로 넘어가지 못하는 문제가 있었다. 사실 뭐가 문제인지 처음에는 알아차리지 못했다. (이 때부터인가.. 내가 정규식을 공부하게 된 시점이…) 아무튼 그래서 리서치를 본격적으로 시작했다.</p>\n<p>리서치를 통해 어떠한 포맷이 정확한 이메일 형식이고 고객이 이 기능을 실행할 때에는 어떠한 이메일들이 주를 이뤄 들어오겠구나라는 생각과 만약 어뷰저, 이상한 유저들은 어떠한 이메일을 넣어서 문제를 일으킬 것인지 생각해봤다. 그러다보니 단순하게 볼 수 있는 이메일 검증 코드지만 굉장히 길어졌고, 이 때부터 점점 테스트의 중요성을 알았다.</p>\n<h2 id=\"unittest\" style=\"position:relative;\"><a href=\"#unittest\" aria-label=\"unittest permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>unittest</h2>\n<p>unittest(단위테스트)는 모듈 또는 응용 프로그램 내 개별 코드 단위가 작동하는지 확인하기 위한 테스트다. 파이썬 공식문서에 따르면, 단위 테스트 프레임워크는 본래 JUnit으로부터 영감을 받고 다른 언어의 주요 단위 테스트 프레임워크와 비슷한 특징을 갖고 있다.</p>\n<p>주요 개념 몇 가지를 확인하고 들어가면, <strong>테스트 픽스쳐</strong> (test fixture)는 1개 또는 그 이상의 테스트를 수행할 때 필요한 준비와 그 관련된 정리 동작에 해당하는데 예를 들어 임시 데이터베이스, 디렉토리, 서버 프로세스 등 테스트를 위한 준비를 말한다. <strong>테스트 케이스</strong> (test case) 어떻게 보면 가장 중요하다고 생각되는 테스트 케이스는 테스트의 개별 단위로 특정한 입력 모음과 특정한 결과의 묶음을 말한다. 즉 특정 입력으로 인한 특정 결과를 케이스라고 생각하면 된다. 이외에도 테스트 묶음, 테스트 실행자이 있지만, 자세하게 다뤄보진 않을 예정이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> unittest\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomTestCases</span><span class=\"token punctuation\">(</span>unittest<span class=\"token punctuation\">.</span>TestCase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">test_run</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        function<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    unittest<span class=\"token punctuation\">.</span>main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ python3 test.py\n----------------------------------------------------------------------\nRan <span class=\"token number\">1</span> <span class=\"token builtin class-name\">test</span> <span class=\"token keyword\">in</span> <span class=\"token number\">0</span>.000s\n\nOK</code></pre></div>\n<p>위 코드는 아무것도 작성되지 않은 함수를 호출하는 unittest 코드로 실행하면 아래 결과와 같이 1개의 테스트를 실행했고, 0.000s의 시간이 소요되었다고 표시된다. 조금 더 자세하게 코드를 작성해보자</p>\n<p>ㅤ</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> unittest\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomTestCases</span><span class=\"token punctuation\">(</span>unittest<span class=\"token punctuation\">.</span>TestCase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">test_run_1</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        plus<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">test_run_2</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        minus<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">plus</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">minus</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">-</span> b\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    unittest<span class=\"token punctuation\">.</span>main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">plus</code> 와 <code class=\"language-text\">minus</code> 라는 함수 두 개를 작성하고 각각 <code class=\"language-text\">test_run_1</code>과 <code class=\"language-text\">test_run_2</code>에 넣어놨다. 우선 코드가 실행되는데는 이상 없기 때문에 테스트에는 아무 이상이 없지만, 여기서부터는 그 결과값이 맞는지 앞서 테스트 케이스의 설명을 다시 생각해보면 입력과 결과의 묶음을 테스트 케이스라고 한다는 것을 잊지말고, 결과에 대한 테스트도 진행해야한다.</p>\n<p>unittest의 메소드에는 assert가 존재하는데, 여기서 assert는 결과에 대한 테스트에 사용된다. 먼저 종류를 살펴보면 종류는 정말로 많지만 이 중에 내가 생각하는 대표적인 몇 가지만 본다면 다음과 같다.</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Method</th>\n<th align=\"center\">Checking</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\"><code class=\"language-text\">assertEqual(a, b)</code></td>\n<td align=\"center\"><code class=\"language-text\">a==b</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code class=\"language-text\">assertNotEqual(a, b)</code></td>\n<td align=\"center\"><code class=\"language-text\">a!=b</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code class=\"language-text\">assertTrue(x)</code></td>\n<td align=\"center\"><code class=\"language-text\">bool(x) is True</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code class=\"language-text\">assertFalse(x)</code></td>\n<td align=\"center\"><code class=\"language-text\">bool(x) is False</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code class=\"language-text\">assertIsNone(x)</code></td>\n<td align=\"center\"><code class=\"language-text\">x is None</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code class=\"language-text\">assertIsNotNone(x)</code></td>\n<td align=\"center\"><code class=\"language-text\">x is not None</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code class=\"language-text\">assertIsInstance(a, b)</code></td>\n<td align=\"center\"><code class=\"language-text\">isinstance(a, b)</code></td>\n</tr>\n</tbody>\n</table>\n<p>그럼 이 중에서 위에 간단하게 작성한 <code class=\"language-text\">plus</code> 함수와 <code class=\"language-text\">minus</code>함수는 어떠한 <code class=\"language-text\">assert</code> 메소드를 선택해야 검증하기 좋을까 생각해보면 당연하지만 <code class=\"language-text\">assertEqual(a, b)</code> 이다. 그럼 코드를 보면, 다음과 같다.</p>\n<p>ㅤ</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> unittest\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomTestCases</span><span class=\"token punctuation\">(</span>unittest<span class=\"token punctuation\">.</span>TestCase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">test_run_1</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span>plus<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span>plus<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">test_run_2</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span>minus<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span>minus<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">plus</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">minus</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">-</span> b\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    unittest<span class=\"token punctuation\">.</span>main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ python3 test.py\nFF\n<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span>\nFAIL: test_run_1 <span class=\"token punctuation\">(</span>__main__.CustomTestCases<span class=\"token punctuation\">)</span>\n----------------------------------------------------------------------\nTraceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span>:\n  File <span class=\"token string\">\"test.py\"</span>, line <span class=\"token number\">6</span>, <span class=\"token keyword\">in</span> test_run_1\n    self.assertEqual<span class=\"token punctuation\">(</span>plus<span class=\"token punctuation\">(</span><span class=\"token number\">5</span>, <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>, <span class=\"token number\">9</span><span class=\"token punctuation\">)</span>\nAssertionError: <span class=\"token number\">8</span> <span class=\"token operator\">!=</span> <span class=\"token number\">9</span>\n\n<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span>\nFAIL: test_run_2 <span class=\"token punctuation\">(</span>__main__.CustomTestCases<span class=\"token punctuation\">)</span>\n----------------------------------------------------------------------\nTraceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span>:\n  File <span class=\"token string\">\"test.py\"</span>, line <span class=\"token number\">10</span>, <span class=\"token keyword\">in</span> test_run_2\n    self.assertEqual<span class=\"token punctuation\">(</span>minus<span class=\"token punctuation\">(</span><span class=\"token number\">4</span>, <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>, <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nAssertionError: -1 <span class=\"token operator\">!=</span> <span class=\"token number\">1</span>\n\n----------------------------------------------------------------------\nRan <span class=\"token number\">2</span> tests <span class=\"token keyword\">in</span> <span class=\"token number\">0</span>.000s\n\nFAILED <span class=\"token punctuation\">(</span>failures<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>작성한 코드를 보면 당연하겠지만, 2번의 실패가 나타난다. 그럼 unittest 결과에서는 이런 테스트 결과를 어떻게 보여줄까를 보면, <code class=\"language-text\">test_run_1</code>이 실패했다는 문구와 함께 몇 번째 라인 그리고 어떤 코드에서 에러가 났고 결과는 어떻게 다른지 상세하게 나온다. 이처럼 단순히 테스트 케이스를 코드를 작성하기만 하더라도 내가 작성한 코드가 잘못되었는지 바로 식별할 수 있다.</p>\n<p>내가 테스트를 작성해놓고 가장 편했던 것 중에 하나는 유지 보수 할 때인데, 내가 작성했던 기능을 유지보수하게 되면서 기존에 정상적으로 실행되던 코드가 중간에 잘못 입력되었거나 결과에 영향을 주게 될 경우 기존의 테스트 케이스가 안 맞는 경우가 있는데 이런 경우를 바로 알아차릴 수 있어서 좋았다. (모든 케이스를 다 기억하고 있는게 아니기 때문이다. 난 천재가 아니다.)</p>\n<p>ㅤ</p>\n<p>가장 단순하게 작성해서 unittest에 대해 알아봤지만, 실제로 테스트 코드를 작성할 때에는 이보다 정말 수 천줄 이상 되는 코드가 될 수도 있고, 테스트 케이스를 무사히 거치더라도 반례가 생기기 마련이기 때문에 작성하기 전에 최대한 디테일하고 다양한 인풋과 결과에 대해 작성할 필요가 있다. 다시 한번 말하면, 난 천재가 아니다.</p>\n<p>ㅤ</p>\n<h2 id=\"pytest\" style=\"position:relative;\"><a href=\"#pytest\" aria-label=\"pytest permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>pytest</h2>\n<p>앞서 살펴본 파이썬 라이브러리인 unittest 보다 사용하기 쉬운? 이해하기 쉬운 pytest에 대해 공부해보려 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># python3 기준</span>\n$ pip3 <span class=\"token function\">install</span> pytest</code></pre></div>\n<p><strong>pytest</strong>는 <code class=\"language-text\">test_</code>로 생성되어 있는 파일은 모두 테스트 파일로 인식하여 테스트를 진행한다. 여기서 파일명만 <code class=\"language-text\">test_</code>면 되는 것이 아니라 함수명도 역시 <code class=\"language-text\">test_</code>로 작성되어야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># test_pytest.py</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">plus</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">minus</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">-</span> b</code></pre></div>\n<p>앞에서 unittest에 대해 공부할 때와 같이 <code class=\"language-text\">plus</code>와 <code class=\"language-text\">minus</code> 함수를 위와 같이 작성했다. 여기서 테스트 코드를 작성하는데, 위에서 언급한 바와 같이 <code class=\"language-text\">test_</code>로 함수를 생성하면 되고 <code class=\"language-text\">assert</code>를 이용해 결과값을 비교한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">test_plus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">assert</span> plus<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">7</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ pytest\n<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span> <span class=\"token builtin class-name\">test</span> session starts <span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span>\nplatform darwin -- Python <span class=\"token number\">3.7</span>.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1\nrootdir: python/study/\ncollected <span class=\"token number\">1</span> item\n\ntest_pytest.py F                                                                                                                                               <span class=\"token punctuation\">[</span><span class=\"token number\">100</span>%<span class=\"token punctuation\">]</span>\n\n<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span> FAILURES <span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span>\n____________________________________________________________________________ test_plus _____________________________________________________________________________\n\n    def test_plus<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>:\n<span class=\"token operator\">></span>       assert plus<span class=\"token punctuation\">(</span><span class=\"token number\">5</span>, <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">7</span>\nE       assert <span class=\"token number\">9</span> <span class=\"token operator\">==</span> <span class=\"token number\">7</span>\nE        +  where <span class=\"token number\">9</span> <span class=\"token operator\">=</span> plus<span class=\"token punctuation\">(</span><span class=\"token number\">5</span>, <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n\ntest_pytest.py:8: AssertionError\n<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span> short <span class=\"token builtin class-name\">test</span> summary info <span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span>\nFAILED test_case.py::test_plus - assert <span class=\"token number\">9</span> <span class=\"token operator\">==</span> <span class=\"token number\">7</span>\n<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span> <span class=\"token number\">1</span> failed <span class=\"token keyword\">in</span> <span class=\"token number\">0</span>.06s <span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span></code></pre></div>\n<p><code class=\"language-text\">unittest</code>의 경우에는 실행시 해당 unittest 파일을 직접 실행시켰어야했는데, 이와 반대로 <code class=\"language-text\">pytest</code>는 사용하기 매우 쉬웠던 것 중 하나가 바로 <code class=\"language-text\">test_</code> 로 시작하는 파일은 모두 테스트 파일로 인식하여 테스트를 자동으로 진행한다는 점이다.</p>\n<p>그리고 가장 좋았던 점 중 하나는 바로 assert 인데, 물론 unittest 역시 assert를 그냥 사용해도 좋다. (그렇지만 unittest를 쓰는 만큼 unittest의 method로 존재하는 assert 종류를 사용하는게 더 맞지 않을까 생각된다.) assert 사용하고 그 뒤에 조건은 조건문을 짜듯이 조건을 만들어도 되기 때문이다. (읽다보니 설명이 어려운 느낌인데, 예시를 보자!)</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">test_plus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">assert</span> plus<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">9</span>\n    <span class=\"token keyword\">assert</span> plus<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">assert</span> plus<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span>\n    <span class=\"token keyword\">assert</span> plus<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span></code></pre></div>\n<p>위와 같이 assert 뒤에 조건문처럼 작성하면 된다는 점에서 개발자에게 친숙한 모습이라고 생각했다. 나는 처음 unittest를 만났을 때 unittest는 저렇게하면 안되는 줄 알고 method 종류를 일일히 찾아가면서 사용했다. (멍청이)</p>\n<p>ㅤ</p>\n<h2 id=\"flask--pytest--pytest--flask\" style=\"position:relative;\"><a href=\"#flask--pytest--pytest--flask\" aria-label=\"flask  pytest  pytest  flask permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>flask + pytest / pytest + flask</h2>\n<p>그럼 웹 프레임워크에서는 테스트를 어떻게 진행하는지가 사실 가장 중요한 포인트다. 함수 생성해서 테스트하는 건 매우 쉬웠는데 말이다. 그래서 간단하게 <code class=\"language-text\">flask</code>를 이용해 <code class=\"language-text\">API</code>를 몇 가지 만들고 이를 테스트 해보자!</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Flask<span class=\"token punctuation\">,</span> jsonify\n\napp <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span>\n\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/square/&lt;int:x>'</span><span class=\"token punctuation\">,</span> methods<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">square</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> jsonify<span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">'status'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'result'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'sucesss'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'data'</span><span class=\"token punctuation\">:</span> x <span class=\"token operator\">**</span> <span class=\"token number\">2</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    app<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>debug<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">app</code>은 간단하게 <code class=\"language-text\">/square/&lt;int:x&gt;</code> 로 만들었고, 정수 <code class=\"language-text\">x</code>를 받아 제곱을 하여 리턴하는 <code class=\"language-text\">api</code>를 생성하였다. 결과 예시는 <code class=\"language-text\">/square/5</code> 요청 시 25를 결과로 받을 것이고, <code class=\"language-text\">square/10</code>인 경우에는 100을 리턴 받을 것이다. 그럼 테스트를 해보자 테스트 코드는 다음과 같이 작성한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># test_api.py</span>\n<span class=\"token keyword\">import</span> pytest\n<span class=\"token keyword\">from</span> app <span class=\"token keyword\">import</span> app\n\n<span class=\"token decorator annotation punctuation\">@pytest<span class=\"token punctuation\">.</span>fixture</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">client</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    client <span class=\"token operator\">=</span> app<span class=\"token punctuation\">.</span>test_client<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> client\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">test_square</span><span class=\"token punctuation\">(</span>client<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    response <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'/square/5'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">assert</span> response<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">[</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">25</span>\n\n    response <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'/square/10'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">assert</span> response<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">[</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">100</span></code></pre></div>\n<p>먼저 <code class=\"language-text\">pytest.fixture</code>를 설정해준다. <code class=\"language-text\">fixture</code>는 <code class=\"language-text\">unittest</code>에서 설명했지만 다시 한번 살펴보고 가면, 공식 문서 설명에 의하면 1개 또는 그 이상의 테스트를 수행할 때 필요한 <strong>준비</strong>와 그와 관련된 정리 동작에 해당한다. 어떻게보면 준비 단계를 의미하는데, 여기서는 <code class=\"language-text\">flask app</code>를 테스트하기 때문에 <code class=\"language-text\">flask app</code>의 <code class=\"language-text\">test_client()</code>가 그 준비가 되며 <code class=\"language-text\">fixture</code>단계에 실행된다.</p>\n<p>그럼 결과를 보면 이전과 동일하게 pytest 결과화면이 뜬다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ pytest\n<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span> <span class=\"token builtin class-name\">test</span> session starts <span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span>\nplatform darwin -- Python <span class=\"token number\">3.7</span>.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1\nrootdir: ./Python/study\ncollected <span class=\"token number\">1</span> item\n\ntest_api.py <span class=\"token builtin class-name\">.</span>                                                             <span class=\"token punctuation\">[</span><span class=\"token number\">100</span>%<span class=\"token punctuation\">]</span>\n\n<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span> <span class=\"token number\">1</span> passed <span class=\"token keyword\">in</span> <span class=\"token number\">0</span>.13s <span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span></code></pre></div>","frontmatter":{"title":"Python Unittest, Pytest 연습","date":"June 09, 2020"}}},"pageContext":{"slug":"/Python/python-unittest,-pytest-연습/","previous":{"fields":{"slug":"/Backend/cs-알고리즘-정리/"},"frontmatter":{"title":"CS 알고리즘 정리","category":"Backend","draft":false}},"next":{"fields":{"slug":"/Python/python-developer-questions/"},"frontmatter":{"title":"Python Developer Questions","category":"Python","draft":false}}}},"staticQueryHashes":["2486386679","3128451518"]}