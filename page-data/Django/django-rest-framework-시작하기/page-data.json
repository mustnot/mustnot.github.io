{"componentChunkName":"component---src-templates-blog-post-js","path":"/Django/django-rest-framework-시작하기/","result":{"data":{"site":{"siteMetadata":{"title":"mustnot","author":"[mustnot]","siteUrl":"https://mustnot.github.io","comment":{"disqusShortName":"mustnot","utterances":"mustnot/mustnot.github.io"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"365b8d7c-8817-5cfb-b853-67afba0d2ed1","excerpt":"Django REST Framework (이하 DRF) 란 공식 홈페이지에 의하면 웹 API를 구축하기 위한 강력하고 유연한 툴킷이라 설명되어 있고, REST Framework를 사용하는 이유로 몇 가지를 나열하고 있다. Web browsable API는 개발자에게 유용성을 제공한다. 처음에 사실 이해하지 못해 자세한 내용을 읽어보았고, Swagger와 유사한 기능으로 보였다. 이유로는 바로  형식의 요청이 왔을 경우 해당 API…","html":"<p>Django REST Framework (이하 DRF) 란 <a href=\"https://www.django-rest-framework.org/\">공식 홈페이지</a>에 의하면 웹 API를 구축하기 위한 강력하고 유연한 툴킷이라 설명되어 있고, REST Framework를 사용하는 이유로 몇 가지를 나열하고 있다.</p>\n<ul>\n<li>\n<p><a href=\"https://restframework.herokuapp.com/\">Web browsable API</a>는 개발자에게 유용성을 제공한다.</p>\n<ul>\n<li>처음에 사실 이해하지 못해 <a href=\"https://www.django-rest-framework.org/topics/browsable-api/\">자세한 내용</a>을 읽어보았고, Swagger와 유사한 기능으로 보였다. 이유로는 바로 <code class=\"language-text\">HTML</code> 형식의 요청이 왔을 경우 해당 API를 웹 페이지를 통해 어떤 메소드를 사용해야하고, 어떤 결과를 리턴하는지에 대해 안내해준다는 점인데 어떻게 보면 개발자로 하여금 API를 문서화하는 과정을 생략할 수 있는 기능을 제공해준다고 생각한다.</li>\n</ul>\n</li>\n<li><a href=\"https://www.django-rest-framework.org/api-guide/authentication/#django-rest-framework-oauth\">OAuth1a</a> 와 <a href=\"https://www.django-rest-framework.org/api-guide/authentication/#django-oauth-toolkit\">OAuth2</a> 등 다양한 인증 정책 (Authentication Policies)을 제공한다.</li>\n<li>\n<p>직렬화(<a href=\"https://www.django-rest-framework.org/api-guide/serializers/\">Serialization</a>) 기능을 제공하여 <a href=\"https://www.django-rest-framework.org/api-guide/serializers#modelserializer\">ORM</a> 와 <a href=\"https://www.django-rest-framework.org/api-guide/serializers#serializers\">non-ORM</a> 의 데이터 소스를 지원한다.</p>\n<ul>\n<li>직렬화라는 뜻이 어렵게 느껴질 수 있는데, 나는 다른 말로 형식화라고 생각했다. 형식을 변환해준다는 뜻으로 ORM을 쓰던, 쓰지않던 특정 데이터 소스가 들어왔을 때 이를 직렬화하여 사용자에게 보기 좋은 응답을 전달이 가능하다.</li>\n</ul>\n</li>\n<li>문서화와 커뮤니티 지원이 잘되어 있어 접근이 용이하다.</li>\n</ul>\n<p>ㅤ</p>\n<h3 id=\"django-rest-framework-설치\" style=\"position:relative;\"><a href=\"#django-rest-framework-%EC%84%A4%EC%B9%98\" aria-label=\"django rest framework 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Django REST Framework 설치</h3>\n<div class=\"gatsby-highlight\" data-language=\"bah\"><pre class=\"language-bah\"><code class=\"language-bah\">pip install djangorestframework</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># project/settings.py</span>\nINSTALL_APPS <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">'rest_framework'</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>ㅤ</p>\n<p>ㅤ</p>\n<h2 id=\"tutorial-1---serialization\" style=\"position:relative;\"><a href=\"#tutorial-1---serialization\" aria-label=\"tutorial 1   serialization permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tutorial 1 - Serialization</h2>\n<h3 id=\"setup\" style=\"position:relative;\"><a href=\"#setup\" aria-label=\"setup permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Setup</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ python3 -m venv <span class=\"token function\">env</span>\n$ <span class=\"token builtin class-name\">source</span> env/bin/activate\n\n$ pip <span class=\"token function\">install</span> django djangorestframework\n$ pip <span class=\"token function\">install</span> pygments  <span class=\"token comment\"># We'll be using this for the code highlighting</span>\n<span class=\"token comment\"># 나중에 한번 찾아봐야겠다.</span>\n\n$ djang-admin startproject tutorial\n$ <span class=\"token builtin class-name\">cd</span> tutorial\n$ python manage.py startapp snippets</code></pre></div>\n<p>ㅤ</p>\n<h3 id=\"creating-a-model-to-work-with\" style=\"position:relative;\"><a href=\"#creating-a-model-to-work-with\" aria-label=\"creating a model to work with permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Creating a model to work with</h3>\n<blockquote>\n<p>튜토리얼 따라하다보면 정말 정석적으로 보이는 코드 스타일을 볼 수가 있는데, 간혹 기억하고 나중에 써먹고 싶은 것들이 종종 있다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>db <span class=\"token keyword\">import</span> models\n<span class=\"token keyword\">from</span> pygments<span class=\"token punctuation\">.</span>lexers <span class=\"token keyword\">import</span> get_all_lexers\n<span class=\"token keyword\">from</span> pygments<span class=\"token punctuation\">.</span>styles <span class=\"token keyword\">import</span> get_all_styles\n\nLEXERS <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>item <span class=\"token keyword\">for</span> item <span class=\"token keyword\">in</span> get_all_lexers<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> item<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\nLANGUAGE_CHOICES <span class=\"token operator\">=</span> <span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> item <span class=\"token keyword\">in</span> LEXERS<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nSTYLE_CHOICES <span class=\"token operator\">=</span> <span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> item <span class=\"token keyword\">in</span> get_all_styles<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Snippet</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    created <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>DateTimeField<span class=\"token punctuation\">(</span>auto_now_add<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    title <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> blank<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n    code <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>TextField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    linenos <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>BooleanField<span class=\"token punctuation\">(</span>default<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n    language <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>choices<span class=\"token operator\">=</span>LANGUAGE_CHOICES<span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token string\">'python'</span><span class=\"token punctuation\">,</span> max_length<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n    style <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>choices<span class=\"token operator\">=</span>STYLE_CHOICES<span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token string\">'friendly'</span><span class=\"token punctuation\">,</span> max_length<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Meta</span><span class=\"token punctuation\">:</span>\n        ordering <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'created'</span><span class=\"token punctuation\">]</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ python manage.py makemigrations snippets\n$ python manage.py sqlmigrate snippets 0001 <span class=\"token comment\"># 이건 왜 안했지..?</span>\n$ python manage.py migrate</code></pre></div>\n<p><code class=\"language-text\">Snippet</code> 모델인데, snippet은 사전적 의미는 짧은 단편(?) 이라고 하는데 몇 가지 찾아보니 상용구에도 많이 사용되는 단어로 보인다. 그래서 모델을 살펴보니 언어를 선택하고 언어에 대한 상용구를 만드는 모델 같이 보였다.</p>\n<ul>\n<li><code class=\"language-text\">created</code> : 생성일자</li>\n<li><code class=\"language-text\">title</code> : 제목 (빈칸 가능)</li>\n<li><code class=\"language-text\">code</code> : 코드</li>\n<li><code class=\"language-text\">linenos</code> : 이건 뭘까..</li>\n<li><code class=\"language-text\">language</code> : 선택항목으로 <code class=\"language-text\">default</code>는 <code class=\"language-text\">python</code>이고 <code class=\"language-text\">pygments</code>에서 선택 가능한 언어를 선택할 수 있다.</li>\n<li><code class=\"language-text\">style</code> : <code class=\"language-text\">style</code> 역시 <code class=\"language-text\">language</code>와 동일하게 <code class=\"language-text\">pygements</code>에 종속되어 있다.</li>\n</ul>\n<p><code class=\"language-text\">pygments</code>를 쓰는 이유를 봤더니 코드로 작성된 상용구를 <code class=\"language-text\">highlight</code> 하기 위한 라이브러리로 보인다.</p>\n<p>ㅤ</p>\n<h3 id=\"creating-a-serializer-class\" style=\"position:relative;\"><a href=\"#creating-a-serializer-class\" aria-label=\"creating a serializer class permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Creating a Serializer Class</h3>\n<blockquote>\n<p>여기서 serializers.py 라는 파일을 만들어서 별도로 serializers 를 관리하는데, 이건 좋은 방법인 것 같다. 나중에 참고하자.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># serializers.py</span>\n<span class=\"token keyword\">from</span> rest_framework <span class=\"token keyword\">import</span> serializers\n<span class=\"token keyword\">from</span> snippets<span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> Snippet<span class=\"token punctuation\">,</span> LANGUAGE_CHOICES<span class=\"token punctuation\">,</span> STYLE_CHOICES\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SnippetSerializer</span><span class=\"token punctuation\">(</span>serializers<span class=\"token punctuation\">.</span>Serializer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token builtin\">id</span> <span class=\"token operator\">=</span> serializers<span class=\"token punctuation\">.</span>IntegerField<span class=\"token punctuation\">(</span>read_only<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    title <span class=\"token operator\">=</span> serializers<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>required<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> allow_blank<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> max_length<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n    code <span class=\"token operator\">=</span> serializers<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'base_template'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'textarea.html'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    linenos <span class=\"token operator\">=</span> serializers<span class=\"token punctuation\">.</span>BooleanField<span class=\"token punctuation\">(</span>required<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n    language <span class=\"token operator\">=</span> serializers<span class=\"token punctuation\">.</span>ChoiceField<span class=\"token punctuation\">(</span>choices<span class=\"token operator\">=</span>LANGUAGE_CHOICES<span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token string\">'python'</span><span class=\"token punctuation\">)</span>\n    style <span class=\"token operator\">=</span> serializers<span class=\"token punctuation\">.</span>ChoiceField<span class=\"token punctuation\">(</span>choices<span class=\"token operator\">=</span>STYLE_CHOICES<span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token string\">'friendly'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> validated_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        Create and return a new `Snippet` instance, given the validated data.\n        \"\"\"</span>\n        <span class=\"token keyword\">return</span> Snippet<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span>validated_data<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> instance<span class=\"token punctuation\">,</span> validated_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        Update and return an existing `Snippet` instance, given the validated data.\n        \"\"\"</span>\n        instance<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> validated_data<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'title'</span><span class=\"token punctuation\">,</span> instance<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">)</span>\n        instance<span class=\"token punctuation\">.</span>code <span class=\"token operator\">=</span> validated_data<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'code'</span><span class=\"token punctuation\">,</span> instance<span class=\"token punctuation\">.</span>code<span class=\"token punctuation\">)</span>\n        instance<span class=\"token punctuation\">.</span>linenos <span class=\"token operator\">=</span> validated_data<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'linenos'</span><span class=\"token punctuation\">,</span> instance<span class=\"token punctuation\">.</span>linenos<span class=\"token punctuation\">)</span>\n        instance<span class=\"token punctuation\">.</span>language <span class=\"token operator\">=</span> validated_data<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'language'</span><span class=\"token punctuation\">,</span> instance<span class=\"token punctuation\">.</span>language<span class=\"token punctuation\">)</span>\n        instance<span class=\"token punctuation\">.</span>style <span class=\"token operator\">=</span> validated_data<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'style'</span><span class=\"token punctuation\">,</span> instance<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">)</span>\n        instance<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> instance</code></pre></div>\n<p>지금까지 상태로 실행해보자</p>\n<p>ㅤ</p>\n<h3 id=\"working-with-serializers\" style=\"position:relative;\"><a href=\"#working-with-serializers\" aria-label=\"working with serializers permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Working with Serializers</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ python manage.py shell\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> from snippets.models <span class=\"token function\">import</span> Snippet\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> from snippets.serializers <span class=\"token function\">import</span> SnippetSerializer\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> from rest_framework.renderers <span class=\"token function\">import</span> JSONRenderer\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> from rest_framework.parsers <span class=\"token function\">import</span> JSONParser\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> snippet <span class=\"token operator\">=</span> Snippet<span class=\"token punctuation\">(</span>code<span class=\"token operator\">=</span><span class=\"token string\">'foo = \"bar\"<span class=\"token entity\" title=\"\\n\">\\n</span>'</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> snippet.save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> snippet <span class=\"token operator\">=</span> Snippet<span class=\"token punctuation\">(</span>code<span class=\"token operator\">=</span><span class=\"token string\">'print(\"hello, world\")<span class=\"token entity\" title=\"\\n\">\\n</span>'</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> snippet.save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>이 때 느낀점이 있는데, 음? <code class=\"language-text\">views</code>를 만들지 않아도 되는건가? 라는 생각이 들었다. 나는 처음이지만 다른 블로그를 참고했을 때 <code class=\"language-text\">views.py</code>를 만들고 작업을 했었는데, 이렇게도 그냥 사용할 수 있다는걸 처음 알았다. (말이 좀 이상한데, 그냥 <code class=\"language-text\">views.py</code> 없이 사용할 수 있다는걸 처음 알았다.)</p>\n<p>ㅤ</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> serializer <span class=\"token operator\">=</span> SnippetSerializer<span class=\"token punctuation\">(</span>snippet<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> serializer.data\n<span class=\"token punctuation\">{</span><span class=\"token string\">'id'</span><span class=\"token builtin class-name\">:</span> <span class=\"token number\">2</span>, <span class=\"token string\">'title'</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">''</span>, <span class=\"token string\">'code'</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">'print(\"hello, world\")<span class=\"token entity\" title=\"\\n\">\\n</span>'</span>, <span class=\"token string\">'linenos'</span><span class=\"token builtin class-name\">:</span> False, <span class=\"token string\">'language'</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">'python'</span>, <span class=\"token string\">'style'</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">'friendly'</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>실행 결과를 보면 <code class=\"language-text\">code</code>를 제외하고 다른 필드들은 모두 <code class=\"language-text\">default</code> 값으로 들어간 것을 볼 수 있는데, 음 굳이 <code class=\"language-text\">model</code>을 직접 참조하지 않고 <code class=\"language-text\">serializer</code>만 이용해서도 데이터를 넣을 수 있구나라는 걸 알았다.</p>\n<p>ㅤ</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> content <span class=\"token operator\">=</span> JSONRenderer<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>.render<span class=\"token punctuation\">(</span>serializer.data<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> content\nb<span class=\"token string\">'{\"id\":2,\"title\":\"\",\"code\":\"print(<span class=\"token entity\" title=\"\\\\\">\\\\</span>\"hello, world<span class=\"token entity\" title=\"\\\\\">\\\\</span>\")<span class=\"token entity\" title=\"\\\\\">\\\\</span>n\",\"linenos\":false,\"language\":\"python\",\"style\":\"friendly\"}'</span></code></pre></div>\n<p><code class=\"language-text\">JSONRenderer()</code>를 이용해 <code class=\"language-text\">render</code>도 가능하다. (마치 <code class=\"language-text\">flask</code>의 <code class=\"language-text\">jsonify</code> 같다.) 이 기능은 <code class=\"language-text\">JSONParser</code>가 있는데 이는 기존에 <code class=\"language-text\">Python</code>에서 사용하던 것과 유사하다. 간단하게 보고 패스</p>\n<p>ㅤ</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token function\">import</span> io\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> stream <span class=\"token operator\">=</span> io.BytesIO<span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> data <span class=\"token operator\">=</span> JSONParser<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>.parse<span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> data\n<span class=\"token punctuation\">{</span><span class=\"token string\">'id'</span><span class=\"token builtin class-name\">:</span> <span class=\"token number\">2</span>, <span class=\"token string\">'title'</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">''</span>, <span class=\"token string\">'code'</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">'print(\"hello, world\")<span class=\"token entity\" title=\"\\n\">\\n</span>'</span>, <span class=\"token string\">'linenos'</span><span class=\"token builtin class-name\">:</span> False, <span class=\"token string\">'language'</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">'python'</span>, <span class=\"token string\">'style'</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">'friendly'</span><span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> serializer <span class=\"token operator\">=</span> SnippetSerializer<span class=\"token punctuation\">(</span>data<span class=\"token operator\">=</span>data<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> serializer.is_valid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nTrue\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> serializer.validated_data\nOrderedDict<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token string\">'title'</span>, <span class=\"token string\">''</span><span class=\"token punctuation\">)</span>, <span class=\"token punctuation\">(</span><span class=\"token string\">'code'</span>, <span class=\"token string\">'print(\"hello, world\")'</span><span class=\"token punctuation\">)</span>, <span class=\"token punctuation\">(</span><span class=\"token string\">'linenos'</span>, False<span class=\"token punctuation\">)</span>, <span class=\"token punctuation\">(</span><span class=\"token string\">'language'</span>, <span class=\"token string\">'python'</span><span class=\"token punctuation\">)</span>, <span class=\"token punctuation\">(</span><span class=\"token string\">'style'</span>, <span class=\"token string\">'friendly'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> serializer.save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span>Snippet: Snippet object <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span></code></pre></div>\n<p>ㅤ</p>\n<p><code class=\"language-text\">Serializer</code>에 몇 가지 기능들이 있는데 그 중 하나가 <code class=\"language-text\">many=True</code> 로 하나만이 아니라 여러 개를 추출하고 추출된 결과를 <code class=\"language-text\">json = dict</code> 형태로 추출해준다. (하나만 있는 <code class=\"language-text\">Model</code>에서는 <code class=\"language-text\">many=True</code> 했다가 에러가 난 적이 있는데, 과연 이게 원인이었는지는 조금 더 살펴봐야겠다.)</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> serializer <span class=\"token operator\">=</span> SnippetSerializer<span class=\"token punctuation\">(</span>Snippet.objects.all<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">many</span><span class=\"token operator\">=</span>True<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> serializer.data\n<span class=\"token punctuation\">[</span>OrderedDict<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token string\">'id'</span>, <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>, <span class=\"token punctuation\">(</span><span class=\"token string\">'title'</span>, <span class=\"token string\">''</span><span class=\"token punctuation\">)</span>, <span class=\"token punctuation\">(</span><span class=\"token string\">'code'</span>, <span class=\"token string\">'foo = \"bar\"<span class=\"token entity\" title=\"\\n\">\\n</span>'</span><span class=\"token punctuation\">)</span>, <span class=\"token punctuation\">(</span><span class=\"token string\">'linenos'</span>, False<span class=\"token punctuation\">)</span>, <span class=\"token punctuation\">(</span><span class=\"token string\">'language'</span>, <span class=\"token string\">'python'</span><span class=\"token punctuation\">)</span>, <span class=\"token punctuation\">(</span><span class=\"token string\">'style'</span>, <span class=\"token string\">'friendly'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>, OrderedDict<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token string\">'id'</span>, <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>, <span class=\"token punctuation\">(</span><span class=\"token string\">'title'</span>, <span class=\"token string\">''</span><span class=\"token punctuation\">)</span>, <span class=\"token punctuation\">(</span><span class=\"token string\">'code'</span>, <span class=\"token string\">'print(\"hello, world\")<span class=\"token entity\" title=\"\\n\">\\n</span>'</span><span class=\"token punctuation\">)</span>, <span class=\"token punctuation\">(</span><span class=\"token string\">'linenos'</span>, False<span class=\"token punctuation\">)</span>, <span class=\"token punctuation\">(</span><span class=\"token string\">'language'</span>, <span class=\"token string\">'python'</span><span class=\"token punctuation\">)</span>, <span class=\"token punctuation\">(</span><span class=\"token string\">'style'</span>, <span class=\"token string\">'friendly'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>, OrderedDict<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token string\">'id'</span>, <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>, <span class=\"token punctuation\">(</span><span class=\"token string\">'title'</span>, <span class=\"token string\">''</span><span class=\"token punctuation\">)</span>, <span class=\"token punctuation\">(</span><span class=\"token string\">'code'</span>, <span class=\"token string\">'print(\"hello, world\")'</span><span class=\"token punctuation\">)</span>, <span class=\"token punctuation\">(</span><span class=\"token string\">'linenos'</span>, False<span class=\"token punctuation\">)</span>, <span class=\"token punctuation\">(</span><span class=\"token string\">'language'</span>, <span class=\"token string\">'python'</span><span class=\"token punctuation\">)</span>, <span class=\"token punctuation\">(</span><span class=\"token string\">'style'</span>, <span class=\"token string\">'friendly'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>ㅤ</p>\n<h3 id=\"using-modelserializers\" style=\"position:relative;\"><a href=\"#using-modelserializers\" aria-label=\"using modelserializers permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using ModelSerializers</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># snippets/serializers.py</span>\n<span class=\"token keyword\">from</span> rest_framework <span class=\"token keyword\">import</span> serializers\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SnippetSerializer</span><span class=\"token punctuation\">(</span>serializers<span class=\"token punctuation\">.</span>ModelSerializer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Meta</span><span class=\"token punctuation\">:</span>\n        model <span class=\"token operator\">=</span> Snippet\n        fields <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'title'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'code'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'linenos'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'language'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'style'</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p><code class=\"language-text\">serializers</code>를 쓰는 방법 중에 <code class=\"language-text\">ModelSerializer</code> 방법이 있는데, 위에서 했던 방법은 앞서 만든 <code class=\"language-text\">Model</code>을 참조한 것이 아닌 <code class=\"language-text\">Model</code>처럼 만들어댄 <code class=\"language-text\">Serializer</code>였다. 자세히보면 <code class=\"language-text\">model</code>에서 작성했던 것을 중복해서 다시 사용하고 있는데, 나도 작성하면서 든 의문은 <code class=\"language-text\">model</code>에서 만들었던 걸 왜 여기서 또 반복적인 행위를 하나였다. 여기서 의문이 풀렸는데, 코드를 보면 위에 <code class=\"language-text\">serializers.Serializer</code>를 써서 만드는 방법보다 더 간결한 방법인 <code class=\"language-text\">serializers.ModelSerializer</code> 이다.</p>\n<p><code class=\"language-text\">ModelSerializer</code>를 <code class=\"language-text\">meta class</code>에 <code class=\"language-text\">model</code>과 사용하고자 하는 <code class=\"language-text\">field</code>를 지정해주면 이를 이용해 <code class=\"language-text\">serializer</code> 를 생성한다. 여기서 <code class=\"language-text\">fields</code>를 리스트로 직접 입력했는데, <code class=\"language-text\">__all__</code>를 사용하는 방법도 있다.</p>\n<p>ㅤ</p>\n<h3 id=\"writing-regular-django-views-using-our-serializer\" style=\"position:relative;\"><a href=\"#writing-regular-django-views-using-our-serializer\" aria-label=\"writing regular django views using our serializer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Writing regular Django views using our Serializer</h3>\n<blockquote>\n<p>💡 여기서 놀란 사실은 <code class=\"language-text\">method</code>를 구분 할 수 있는 방법을 이제 알았다는 사실과 나는 여태까지 이것보다 더 복잡하게 코드를 짜왔다는 사실이다.. (바똥멍)</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># snippets/views.py</span>\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>shortcuts <span class=\"token keyword\">import</span> render\n\n<span class=\"token comment\"># Create your views here.</span>\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>http <span class=\"token keyword\">import</span> HttpResponse<span class=\"token punctuation\">,</span> JsonResponse\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>views<span class=\"token punctuation\">.</span>decorators<span class=\"token punctuation\">.</span>csrf <span class=\"token keyword\">import</span> csrf_exempt\n<span class=\"token keyword\">from</span> rest_framework<span class=\"token punctuation\">.</span>parsers <span class=\"token keyword\">import</span> JSONParser\n<span class=\"token keyword\">from</span> snippets<span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> Snippet\n<span class=\"token keyword\">from</span> snippets<span class=\"token punctuation\">.</span>serializers <span class=\"token keyword\">import</span> SnippetSerializer\n\n<span class=\"token decorator annotation punctuation\">@csrf_exempt</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">snippet_list</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    List all code snippets, or create a new snippet.\n    \"\"\"</span>\n    <span class=\"token keyword\">if</span> request<span class=\"token punctuation\">.</span>method <span class=\"token operator\">==</span> <span class=\"token string\">'GET'</span><span class=\"token punctuation\">:</span>\n        snippets <span class=\"token operator\">=</span> Snippet<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        serializer <span class=\"token operator\">=</span> SnippetSerializer<span class=\"token punctuation\">(</span>snippets<span class=\"token punctuation\">,</span> many<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span>serializer<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> safe<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">elif</span> request<span class=\"token punctuation\">.</span>method <span class=\"token operator\">==</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">:</span>\n        data <span class=\"token operator\">=</span> JSONParser<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>parse<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span>\n        serializer <span class=\"token operator\">=</span> SnippetSerializer<span class=\"token punctuation\">(</span>data<span class=\"token operator\">=</span>data<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> serializer<span class=\"token punctuation\">.</span>is_valid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            serializer<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span>serializer<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> status<span class=\"token operator\">=</span><span class=\"token number\">201</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span>serializer<span class=\"token punctuation\">.</span>errors<span class=\"token punctuation\">,</span> status<span class=\"token operator\">=</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token decorator annotation punctuation\">@csrf_exempt</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">snippet_detail</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> pk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    Retrieve, update or delete a code snippet.\n    \"\"\"</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        snippet <span class=\"token operator\">=</span> Snippet<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>pk<span class=\"token operator\">=</span>pk<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">except</span> Snippet<span class=\"token punctuation\">.</span>DoesNotExist<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> HttpResponse<span class=\"token punctuation\">(</span>status<span class=\"token operator\">=</span><span class=\"token number\">404</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> request<span class=\"token punctuation\">.</span>method <span class=\"token operator\">==</span> <span class=\"token string\">'GET'</span><span class=\"token punctuation\">:</span>\n        serializer <span class=\"token operator\">=</span> SnippetSerializer<span class=\"token punctuation\">(</span>snippet<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span>serializer<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">elif</span> request<span class=\"token punctuation\">.</span>method <span class=\"token operator\">==</span> <span class=\"token string\">'PUT'</span><span class=\"token punctuation\">:</span>\n        data <span class=\"token operator\">=</span> JSONParser<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>parse<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span>\n        serializer <span class=\"token operator\">=</span> SnippetSerializer<span class=\"token punctuation\">(</span>snippet<span class=\"token punctuation\">,</span> data<span class=\"token operator\">=</span>data<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> serializer<span class=\"token punctuation\">.</span>is_valid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            serializer<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span>serializer<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span>serializer<span class=\"token punctuation\">.</span>errors<span class=\"token punctuation\">,</span> status<span class=\"token operator\">=</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">elif</span> request<span class=\"token punctuation\">.</span>method <span class=\"token operator\">==</span> <span class=\"token string\">'DELETE'</span><span class=\"token punctuation\">:</span>\n        snippet<span class=\"token punctuation\">.</span>delete<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> HttpResponse<span class=\"token punctuation\">(</span>status<span class=\"token operator\">=</span><span class=\"token number\">204</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">!!!</code> <code class=\"language-text\">csrf_exempt</code>는 <code class=\"language-text\">csrf token</code>이 없는 경우에만 쓰도록 하자</p>\n<p>여기서 당황했던건 <code class=\"language-text\">flask</code>랑 큰 차이가 없어 보였다는 점이다. <code class=\"language-text\">flask</code>에서도 똑같이 <code class=\"language-text\">method</code> 나누고 나눈걸 토대로 각기 다른 코드로 결과를 보여주는데, 여기서도 이렇게 쉽게 할 수 있다니… 😭 그럼 이제 URL을 매핑해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># snippets/urls.py</span>\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>urls <span class=\"token keyword\">import</span> path\n<span class=\"token keyword\">from</span> snippets <span class=\"token keyword\">import</span> views\n\nurlpatterns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    path<span class=\"token punctuation\">(</span><span class=\"token string\">'snippets/'</span><span class=\"token punctuation\">,</span> views<span class=\"token punctuation\">.</span>snippet_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    path<span class=\"token punctuation\">(</span><span class=\"token string\">'snippets/&lt;int:pk>/'</span><span class=\"token punctuation\">,</span> views<span class=\"token punctuation\">.</span>snippet_detail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># urls.py</span>\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>urls <span class=\"token keyword\">import</span> path<span class=\"token punctuation\">,</span> include\n\nurlpatterns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    path<span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span> include<span class=\"token punctuation\">(</span><span class=\"token string\">'snippets.urls'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>ㅤ</p>\n<h2 id=\"comments\" style=\"position:relative;\"><a href=\"#comments\" aria-label=\"comments permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Comments</h2>\n<p>굳이 <code class=\"language-text\">API Documents</code>를 볼 필요성이 없다면, 위와 같은 형식으로 <code class=\"language-text\">view</code> 를 만들어도 좋을 것 같다. 참고하자.</p>","frontmatter":{"title":"Django REST Framework 시작하기","date":"September 29, 2020"}}},"pageContext":{"slug":"/Django/django-rest-framework-시작하기/","previous":{"fields":{"slug":"/AWS/aws-관련-정리/"},"frontmatter":{"title":"AWS 관련 정리","category":"AWS","draft":false}},"next":{"fields":{"slug":"/Backend/데이터베이스-관련-내용-정리/"},"frontmatter":{"title":"데이터베이스 관련 내용 정리","category":"Backend","draft":false}}}},"staticQueryHashes":["2486386679","3128451518"]}