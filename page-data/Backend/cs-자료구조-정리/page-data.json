{"componentChunkName":"component---src-templates-blog-post-js","path":"/Backend/cs-자료구조-정리/","result":{"data":{"site":{"siteMetadata":{"title":"MUSTNOT","author":"[mustnot]","siteUrl":"https://mustnot.github.io","comment":{"disqusShortName":"","utterances":"mustnot/mustnot.github.io"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"4e291962-1cbb-596e-8e9e-67f8123a37e2","excerpt":"Queue 줄을 서는 행위와 유사 가장 먼저 넣은 데이터를 가장 먼저 꺼낼 수 있는 구조 FIFO(First-In, First-Out) 또는 LILO(Last-In, Last-Out) 방식으로 스택과 꺼내는 순서가 반대 어디에 Queue가 많이 쓰일까? 멀티 태스킹을 위한 프로세스 스케쥴링 방식을 구현하기 위해 많이 사용됨 (운영체제 참조) 1. 파이썬 Queue…","html":"<h1 id=\"queue\" style=\"position:relative;\"><a href=\"#queue\" aria-label=\"queue permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Queue</h1>\n<ul>\n<li>줄을 서는 행위와 유사</li>\n<li>\n<p>가장 먼저 넣은 데이터를 가장 먼저 꺼낼 수 있는 구조</p>\n<ul>\n<li>FIFO(First-In, First-Out) 또는 LILO(Last-In, Last-Out) 방식으로 스택과 꺼내는 순서가 반대</li>\n</ul>\n</li>\n<li>\n<p>어디에 Queue가 많이 쓰일까?</p>\n<ul>\n<li>멀티 태스킹을 위한 프로세스 스케쥴링 방식을 구현하기 위해 많이 사용됨 (운영체제 참조)</li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"1-파이썬-queue-라이브러리-활용\" style=\"position:relative;\"><a href=\"#1-%ED%8C%8C%EC%9D%B4%EC%8D%AC-queue-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC-%ED%99%9C%EC%9A%A9\" aria-label=\"1 파이썬 queue 라이브러리 활용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 파이썬 Queue 라이브러리 활용</h2>\n<ul>\n<li><code class=\"language-text\">queue</code> 라이브러리에는 다양한 큐 구조로, <code class=\"language-text\">Queue()</code>, <code class=\"language-text\">LifoQueue()</code>, <code class=\"language-text\">PriorityQueue()</code> 제공</li>\n<li>\n<p>프로그램을 작성할 때 프로그램에 따라 적합한 자료 구조를 사용</p>\n<p>일반적인 큐 외에 다양한 정책이 적용된 큐들이 있음</p>\n<ul>\n<li>Queue : 가장 일반적인 큐 자료 구조</li>\n<li>LifoQueue: 나중에 입력된 데이터가 먼저 출력되는 구조 (스택 구조라고 보면 됨)</li>\n<li>PriorityQueue: 데이터마다 우선순위를 넣어서, 우선순위가 높은 순으로 데이터 출력</li>\n</ul>\n</li>\n</ul>\n<br>\n<h3 id=\"1-1-queue-fifo-first-in-first-out\" style=\"position:relative;\"><a href=\"#1-1-queue-fifo-first-in-first-out\" aria-label=\"1 1 queue fifo first in first out permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1-1. Queue() (FIFO: First-In, First-Out)</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> queue\n\nq <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span>Queue<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nq<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token string\">'data1'</span><span class=\"token punctuation\">)</span>\nq<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\nq<span class=\"token punctuation\">.</span>qsize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 2</span>\n\nq<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># data1</span>\nq<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 2</span>\n\nq<span class=\"token punctuation\">.</span>qsize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 0</span></code></pre></div>\n<br>\n<h3 id=\"1-2-lifoqueue-lifo-last-in-first-out\" style=\"position:relative;\"><a href=\"#1-2-lifoqueue-lifo-last-in-first-out\" aria-label=\"1 2 lifoqueue lifo last in first out permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1-2. LifoQueue() (LIFO: Last-In, First-Out)</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> queue\n\nq <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span>LifoQueue<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nq<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token string\">'data1'</span><span class=\"token punctuation\">)</span>\nq<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\nq<span class=\"token punctuation\">.</span>qsize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 2</span>\n\nq<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 2</span>\nq<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># data1</span>\n\nq<span class=\"token punctuation\">.</span>qsize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 0</span></code></pre></div>\n<br>\n<h3 id=\"1-3-priorityqueue\" style=\"position:relative;\"><a href=\"#1-3-priorityqueue\" aria-label=\"1 3 priorityqueue permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1-3. PriorityQueue()</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> queue\n\nq <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span>PriorityQueue<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nq<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'data1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nq<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'data2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nq<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'data3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nq<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># (1, 'data2')</span>\nq<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># (5, 'data3')</span>\nq<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># (10, 'data1')</span></code></pre></div>\n<br>\n<h2 id=\"2-문제-활용--프로그래머스-스택큐---탑\" style=\"position:relative;\"><a href=\"#2-%EB%AC%B8%EC%A0%9C-%ED%99%9C%EC%9A%A9--%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4-%EC%8A%A4%ED%83%9D%ED%81%90---%ED%83%91\" aria-label=\"2 문제 활용  프로그래머스 스택큐   탑 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 문제 활용 : 프로그래머스 (스택/큐) - 탑</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> math\n<span class=\"token keyword\">import</span> queue\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span>progresses<span class=\"token punctuation\">,</span> speeds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    q <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span>Queue<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">for</span> progress<span class=\"token punctuation\">,</span> speed <span class=\"token keyword\">in</span> <span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span>progresses<span class=\"token punctuation\">,</span> speeds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        duration <span class=\"token operator\">=</span> math<span class=\"token punctuation\">.</span>ceil<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span> <span class=\"token operator\">-</span> progress<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> speed<span class=\"token punctuation\">)</span>\n        q<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span>duration<span class=\"token punctuation\">)</span>\n\n    answers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    duration<span class=\"token punctuation\">,</span> answer <span class=\"token operator\">=</span> q<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">while</span> q<span class=\"token punctuation\">.</span>qsize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        work <span class=\"token operator\">=</span> q<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> work <span class=\"token operator\">&lt;=</span> duration<span class=\"token punctuation\">:</span>\n            answer <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            answers<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>answer<span class=\"token punctuation\">)</span>\n            duration<span class=\"token punctuation\">,</span> answer <span class=\"token operator\">=</span> work<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span>\n    answers<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>answer<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> answers</code></pre></div>\n<br>\n<h1 id=\"linked-list-링크드-리스트\" style=\"position:relative;\"><a href=\"#linked-list-%EB%A7%81%ED%81%AC%EB%93%9C-%EB%A6%AC%EC%8A%A4%ED%8A%B8\" aria-label=\"linked list 링크드 리스트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Linked List (링크드 리스트)</h1>\n<p><img src=\"https://user-images.githubusercontent.com/52126612/82140775-1be36a00-986c-11ea-9505-c14cdd7036d4.png\" alt=\"Singly_linked_list\"></p>\n<ul>\n<li>연결 리스트라고도 함</li>\n<li>배열은 순차적으로 연결된 공간에 데이터를 나열하는 데이터 구조</li>\n<li>링크르 리스트는 떨어진 곳에 존재하는 데이터를 화살표로 연결해서 관리하는 데이터 구조</li>\n<li>\n<p>링크드 리스트 기본 구조와 용어</p>\n<ul>\n<li>노드(Node): 데이터 저장 단위 (데이터값, 포인터)로 구성</li>\n<li>포인터(Pointer): 각 노드 안에서 다음이나 이전의 노드와의 연결 정보를 가지고 있는 공간</li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"1-간단한-링크드-리스트-예\" style=\"position:relative;\"><a href=\"#1-%EA%B0%84%EB%8B%A8%ED%95%9C-%EB%A7%81%ED%81%AC%EB%93%9C-%EB%A6%AC%EC%8A%A4%ED%8A%B8-%EC%98%88\" aria-label=\"1 간단한 링크드 리스트 예 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 간단한 링크드 리스트 예</h2>\n<h3 id=\"node-구현\" style=\"position:relative;\"><a href=\"#node-%EA%B5%AC%ED%98%84\" aria-label=\"node 구현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Node 구현</h3>\n<ul>\n<li>\n<p>보통 파이썬에서 링크르 리스트 구현시, 클래스를 활용함</p>\n<ul>\n<li>파이썬 객체지향 문법 이해 필요</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> <span class=\"token builtin\">next</span><span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data\n        self<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">next</span></code></pre></div>\n<h3 id=\"node와-node-연결하기-포인터-활용\" style=\"position:relative;\"><a href=\"#node%EC%99%80-node-%EC%97%B0%EA%B2%B0%ED%95%98%EA%B8%B0-%ED%8F%AC%EC%9D%B8%ED%84%B0-%ED%99%9C%EC%9A%A9\" aria-label=\"node와 node 연결하기 포인터 활용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Node와 Node 연결하기 (포인터 활용)</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">node1 <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nnode2 <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\nnode1<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> Node2\nhead <span class=\"token operator\">=</span> node1</code></pre></div>\n<h3 id=\"링크드-리스트로-데이터-추가하기\" style=\"position:relative;\"><a href=\"#%EB%A7%81%ED%81%AC%EB%93%9C-%EB%A6%AC%EC%8A%A4%ED%8A%B8%EB%A1%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0\" aria-label=\"링크드 리스트로 데이터 추가하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>링크드 리스트로 데이터 추가하기</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    node <span class=\"token operator\">=</span> head\n    <span class=\"token keyword\">while</span> node<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">:</span>\n        node <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n    node<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">node1 <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nhead <span class=\"token operator\">=</span> node1\n<span class=\"token keyword\">for</span> index <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    add<span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span></code></pre></div>\n<br>\n<h2 id=\"2-링크드-리스트의-장단점-c언어에서의-배열과-링크드-리스트\" style=\"position:relative;\"><a href=\"#2-%EB%A7%81%ED%81%AC%EB%93%9C-%EB%A6%AC%EC%8A%A4%ED%8A%B8%EC%9D%98-%EC%9E%A5%EB%8B%A8%EC%A0%90-c%EC%96%B8%EC%96%B4%EC%97%90%EC%84%9C%EC%9D%98-%EB%B0%B0%EC%97%B4%EA%B3%BC-%EB%A7%81%ED%81%AC%EB%93%9C-%EB%A6%AC%EC%8A%A4%ED%8A%B8\" aria-label=\"2 링크드 리스트의 장단점 c언어에서의 배열과 링크드 리스트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 링크드 리스트의 장단점 (C언어에서의 배열과 링크드 리스트)</h2>\n<ul>\n<li>\n<p>장점</p>\n<ul>\n<li>데이터 공간을 미리 할당하지 않아도 됨</li>\n<li>배열은 미리 데이터 공간을 할당해야 함</li>\n</ul>\n</li>\n<li>\n<p>단점</p>\n<ul>\n<li>연결을 위한 별도 데이터 공간이 필요하므로, 저장공간 효율이 높지 않음</li>\n<li>연결 정보를 찾는 시간이 필요하므로 접근 속도가 느림</li>\n<li>중간 데이터 삭제시, 앞뒤 데이터 연결을 재구성해야 하는 부가적인 작업 필요</li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"3-링크드-리스트의-복잡한-기능\" style=\"position:relative;\"><a href=\"#3-%EB%A7%81%ED%81%AC%EB%93%9C-%EB%A6%AC%EC%8A%A4%ED%8A%B8%EC%9D%98-%EB%B3%B5%EC%9E%A1%ED%95%9C-%EA%B8%B0%EB%8A%A5\" aria-label=\"3 링크드 리스트의 복잡한 기능 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 링크드 리스트의 복잡한 기능</h2>\n<h3 id=\"링크드-리스트-데이터-사이에-데이터를-추가\" style=\"position:relative;\"><a href=\"#%EB%A7%81%ED%81%AC%EB%93%9C-%EB%A6%AC%EC%8A%A4%ED%8A%B8-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%82%AC%EC%9D%B4%EC%97%90-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-%EC%B6%94%EA%B0%80\" aria-label=\"링크드 리스트 데이터 사이에 데이터를 추가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>링크드 리스트 데이터 사이에 데이터를 추가</h3>\n<ul>\n<li>연결하고자 하는 연결 정보를 찾아 해당 연결 정보 앞 뒤에 데이터를 추가해야함</li>\n</ul>\n<h3 id=\"특정-노드를-삭제\" style=\"position:relative;\"><a href=\"#%ED%8A%B9%EC%A0%95-%EB%85%B8%EB%93%9C%EB%A5%BC-%EC%82%AD%EC%A0%9C\" aria-label=\"특정 노드를 삭제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>특정 노드를 삭제</h3>\n<ul>\n<li>특정 노드를 삭제할 경우 앞 뒤 연결정보를 이어줘야함</li>\n</ul>\n<br>\n<h2 id=\"4-파이썬-객체-지향-프로그래밍으로-링크드-리스트-구현하기\" style=\"position:relative;\"><a href=\"#4-%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EA%B0%9D%EC%B2%B4-%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%9C%BC%EB%A1%9C-%EB%A7%81%ED%81%AC%EB%93%9C-%EB%A6%AC%EC%8A%A4%ED%8A%B8-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0\" aria-label=\"4 파이썬 객체 지향 프로그래밍으로 링크드 리스트 구현하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 파이썬 객체 지향 프로그래밍으로 링크드 리스트 구현하기</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> <span class=\"token builtin\">next</span><span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data\n        self<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">next</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">NodeMgmt</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>head <span class=\"token operator\">==</span> <span class=\"token string\">''</span><span class=\"token punctuation\">:</span>                   <span class=\"token comment\"># head가 없을 경우, head에 추가</span>\n            self<span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>head\n            <span class=\"token keyword\">while</span> node<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">:</span>\n                node <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n            node<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">desc</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>head\n        <span class=\"token keyword\">while</span> node<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n            node <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>head <span class=\"token operator\">==</span> <span class=\"token string\">''</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"해당 값을 가진 노드가 없습니다.\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span>\n\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span>data <span class=\"token operator\">==</span> data<span class=\"token punctuation\">:</span>\n            temp <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>head\n            self<span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n            <span class=\"token keyword\">del</span> temp\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>head\n            <span class=\"token keyword\">while</span> node<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> node<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">.</span>data <span class=\"token operator\">==</span> data<span class=\"token punctuation\">:</span>\n                    temp <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n                    node<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n                    <span class=\"token keyword\">del</span> temp\n                    <span class=\"token keyword\">return</span>\n                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                    node <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">search_node</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>head\n        <span class=\"token keyword\">while</span> node<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> node<span class=\"token punctuation\">.</span>data <span class=\"token operator\">==</span> data<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> node\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                node <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span></code></pre></div>\n<br>\n<h2 id=\"5-다양한-링크드-리스트-구조\" style=\"position:relative;\"><a href=\"#5-%EB%8B%A4%EC%96%91%ED%95%9C-%EB%A7%81%ED%81%AC%EB%93%9C-%EB%A6%AC%EC%8A%A4%ED%8A%B8-%EA%B5%AC%EC%A1%B0\" aria-label=\"5 다양한 링크드 리스트 구조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. 다양한 링크드 리스트 구조</h2>\n<h3 id=\"더블-링크드-리스트-doubly-linked-list-기본-구조\" style=\"position:relative;\"><a href=\"#%EB%8D%94%EB%B8%94-%EB%A7%81%ED%81%AC%EB%93%9C-%EB%A6%AC%EC%8A%A4%ED%8A%B8-doubly-linked-list-%EA%B8%B0%EB%B3%B8-%EA%B5%AC%EC%A1%B0\" aria-label=\"더블 링크드 리스트 doubly linked list 기본 구조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>더블 링크드 리스트 (Doubly Linked List) 기본 구조</h3>\n<p><img src=\"https://user-images.githubusercontent.com/52126612/82140769-1128d500-986c-11ea-866f-956c023c5d90.png\" alt=\"Doubly_linked_list\"></p>\n<ul>\n<li>이중 연결 리스트라고 함</li>\n<li>장점: 양방향으로 연결되어 있어서 노드 탐색이 양쪽으로 모두 가능</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> prev<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">next</span><span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data\n        self<span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> prev\n        self<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">next</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">NodeMgmt</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>tail <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>head\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>head <span class=\"token operator\">==</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n            self<span class=\"token punctuation\">.</span>tail <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>head\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>head\n            <span class=\"token keyword\">while</span> node<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">:</span>\n                node <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n            new <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> prev<span class=\"token operator\">=</span>node<span class=\"token punctuation\">)</span>\n            node<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> new\n            self<span class=\"token punctuation\">.</span>tail <span class=\"token operator\">=</span> new\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">desc</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>head\n        <span class=\"token keyword\">while</span> node<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n            node <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span></code></pre></div>\n<h3 id=\"연습--위-코드에서-노드-데이터가-특정-숫자인-노드-앞과-뒤에-데이터를-추가하는-함수-만들고-테스트해보기\" style=\"position:relative;\"><a href=\"#%EC%97%B0%EC%8A%B5--%EC%9C%84-%EC%BD%94%EB%93%9C%EC%97%90%EC%84%9C-%EB%85%B8%EB%93%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0%EA%B0%80-%ED%8A%B9%EC%A0%95-%EC%88%AB%EC%9E%90%EC%9D%B8-%EB%85%B8%EB%93%9C-%EC%95%9E%EA%B3%BC-%EB%92%A4%EC%97%90-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-%EC%B6%94%EA%B0%80%ED%95%98%EB%8A%94-%ED%95%A8%EC%88%98-%EB%A7%8C%EB%93%A4%EA%B3%A0-%ED%85%8C%EC%8A%A4%ED%8A%B8%ED%95%B4%EB%B3%B4%EA%B8%B0\" aria-label=\"연습  위 코드에서 노드 데이터가 특정 숫자인 노드 앞과 뒤에 데이터를 추가하는 함수 만들고 테스트해보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>연습 : 위 코드에서 노드 데이터가 특정 숫자인 노드 앞과 뒤에 데이터를 추가하는 함수 만들고, 테스트해보기</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> prev<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">next</span><span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data\n        self<span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> prev\n        self<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">next</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">NodeMgmt</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>tail <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>head\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>head <span class=\"token operator\">==</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n            self<span class=\"token punctuation\">.</span>tail <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>head\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>head\n            <span class=\"token keyword\">while</span> node<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">:</span>\n                node <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n            new <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> prev<span class=\"token operator\">=</span>node<span class=\"token punctuation\">)</span>\n            node<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> new\n            self<span class=\"token punctuation\">.</span>tail <span class=\"token operator\">=</span> new\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">desc</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>head\n        <span class=\"token keyword\">while</span> node<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n            node <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">search_node</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>head\n        <span class=\"token keyword\">while</span> node<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> node<span class=\"token punctuation\">.</span>data <span class=\"token operator\">==</span> data<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> node\n            node <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">insert_prev</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> prev_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>search_node<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n        new <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span>prev_data<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>head <span class=\"token operator\">==</span> node<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> new\n            new<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> node\n            node<span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> new\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            node<span class=\"token punctuation\">.</span>prev<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> new\n            new<span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>prev\n            new<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> node\n            node<span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> new\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">insert_next</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> next_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>search_node<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n        new <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span>next_data<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>tail <span class=\"token operator\">==</span> node<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>tail <span class=\"token operator\">=</span> new\n            new<span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> node\n            node<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> new\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            node<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> new\n            new<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n            new<span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> node\n            node<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> new</code></pre></div>\n<br>\n<h1 id=\"시간-복잡도\" style=\"position:relative;\"><a href=\"#%EC%8B%9C%EA%B0%84-%EB%B3%B5%EC%9E%A1%EB%8F%84\" aria-label=\"시간 복잡도 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>시간 복잡도</h1>\n<blockquote>\n<p>하나의 문제를 푸는 알고리즘은 다양할 수 있는데, 다양한 알고리즘 중 어느 알고리즘이 더 좋은지를 분석하기 위해, 복잡도를 정의하고 계산함</p>\n</blockquote>\n<h2 id=\"1-알고리즘-복잡도-계산-항목\" style=\"position:relative;\"><a href=\"#1-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EB%B3%B5%EC%9E%A1%EB%8F%84-%EA%B3%84%EC%82%B0-%ED%95%AD%EB%AA%A9\" aria-label=\"1 알고리즘 복잡도 계산 항목 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 알고리즘 복잡도 계산 항목</h2>\n<ol>\n<li>\n<p>시간 복잡도 : 알고리즘 실행 속도</p>\n<ul>\n<li>시간 복잡도의 주요 요소는 <code class=\"language-text\">&quot;반복문&quot;</code>이 지배한다.</li>\n</ul>\n</li>\n<li>공간 복잡도 : 알고리즘이 사용하는 메모리 사이즈</li>\n</ol>\n<br>\n<h2 id=\"2-알고리즘-성능-표기법\" style=\"position:relative;\"><a href=\"#2-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EC%84%B1%EB%8A%A5-%ED%91%9C%EA%B8%B0%EB%B2%95\" aria-label=\"2 알고리즘 성능 표기법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 알고리즘 성능 표기법</h2>\n<blockquote>\n<p>시간 복잡도 계산은 반복문이 핵심 요소임을 인지하고, 계산 표기는 최상, 평균, 최악 중 최악의 시간인 Big-O 표기법을 중심으로 익히면 된다.</p>\n</blockquote>\n<ul>\n<li>\n<p>Big O (빅-오) 표기법 : O(N)</p>\n<ul>\n<li><strong>가장 많이/일반적으로 사용</strong>되며 알고리즘 <strong>최악의 실행 시간</strong>을 표기</li>\n<li>아무리 최악의 상황이라도, 이정도의 성능은 보장한다는 의미</li>\n</ul>\n</li>\n<li>\n<p>Ω (오메가) 표기법 : Ω(N)</p>\n<ul>\n<li>알고리즘 <strong>최상의 실행 시간</strong>을 표기</li>\n</ul>\n</li>\n<li>\n<p>Θ (세타) 표기법 : Θ(N)</p>\n<ul>\n<li>알고리즘 <strong>평균 실행 시간</strong>을 표기</li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"3-대문자-o-표기법\" style=\"position:relative;\"><a href=\"#3-%EB%8C%80%EB%AC%B8%EC%9E%90-o-%ED%91%9C%EA%B8%B0%EB%B2%95\" aria-label=\"3 대문자 o 표기법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 대문자 O 표기법</h2>\n<ul>\n<li>\n<p>O (입력)</p>\n<ul>\n<li>입력 n에 따라 결정되는 시간 복잡도 함수</li>\n<li>입력 n의 크기에 따라 기하급수적으로 시간 복잡도가 늘어날 수 있음</li>\n<li>O(1) &#x3C; O(logn) &#x3C; O(n) &#x3C; O(nlogn) &#x3C; O(n^2) &#x3C; O(2^n) &#x3C; O(n!) 등으로 표기함</li>\n<li>단순하게 입력 n에 따라, 몇번 실행되는지를 계산하면 된다.</li>\n<li>표현식에 가장 큰 영향을 미치는 n의 단위로 표기한다.</li>\n<li>빅 오 입력값 표기 방법 예시</li>\n<li>\n<p>만약 시간 복잡도 함수가 2n^2 + 3n이라면</p>\n<ul>\n<li>가장 높은 차수는 2n^2</li>\n<li>상수는 실제 큰 영향이 없음</li>\n<li>결국 빅 오 표기법으로 O(n^2)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"4-연습--시간-복잡도와-빅-오-표기법\" style=\"position:relative;\"><a href=\"#4-%EC%97%B0%EC%8A%B5--%EC%8B%9C%EA%B0%84-%EB%B3%B5%EC%9E%A1%EB%8F%84%EC%99%80-%EB%B9%85-%EC%98%A4-%ED%91%9C%EA%B8%B0%EB%B2%95\" aria-label=\"4 연습  시간 복잡도와 빅 오 표기법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 연습 : 시간 복잡도와 빅-오 표기법</h2>\n<h3 id=\"1-시간-복잡도--n-빅-오-표기법--on\" style=\"position:relative;\"><a href=\"#1-%EC%8B%9C%EA%B0%84-%EB%B3%B5%EC%9E%A1%EB%8F%84--n-%EB%B9%85-%EC%98%A4-%ED%91%9C%EA%B8%B0%EB%B2%95--on\" aria-label=\"1 시간 복잡도  n 빅 오 표기법  on permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. <strong>시간 복잡도 : n, 빅-오 표기법 : O(n)</strong></h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">sigma</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    total <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        total <span class=\"token operator\">+=</span> i\n    <span class=\"token keyword\">return</span> total</code></pre></div>\n<ol>\n<li>Total 변수 설정 후 0을 저장</li>\n<li>임의의 i를 1부터 n까지 1씩 증가시키면서 저장</li>\n<li>반복문 안에서 Total 변수에 1씩 증가된 값을 더함 ← 결국 n번 입력</li>\n<li>반복문 종료시 Total 출력</li>\n</ol>\n<h3 id=\"2-시간-복잡도--1-빅-오-표기법-o1\" style=\"position:relative;\"><a href=\"#2-%EC%8B%9C%EA%B0%84-%EB%B3%B5%EC%9E%A1%EB%8F%84--1-%EB%B9%85-%EC%98%A4-%ED%91%9C%EA%B8%B0%EB%B2%95-o1\" aria-label=\"2 시간 복잡도  1 빅 오 표기법 o1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 시간 복잡도 : 1, 빅-오 표기법: O(1)</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">sigma</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ol>\n<li>n 값을 받자마자 Total 바로 계산 ← 결국 1번의 계산 (반복문이 없음)</li>\n</ol>\n<br>\n<h1 id=\"hash-table\" style=\"position:relative;\"><a href=\"#hash-table\" aria-label=\"hash table permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Hash Table</h1>\n<blockquote>\n<p>키(Key)에 데이터(Value)를 저장하는 데이터 구조로 Key를 통해 데이터를 받아올 수 있으므로, 속도가 획기적으로 빨라짐 - Python의 Dictionary 타입이 대표적인 예</p>\n</blockquote>\n<p align=\"center\">\n  <img width=\"460\" height=\"300\" src=\"https://user-images.githubusercontent.com/52126612/82210485-24aa6d80-994a-11ea-9b59-c9e806492d63.png\">\n</p>\n<h2 id=\"용어-정리\" style=\"position:relative;\"><a href=\"#%EC%9A%A9%EC%96%B4-%EC%A0%95%EB%A6%AC\" aria-label=\"용어 정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✔용어 정리</h2>\n<ol>\n<li>해쉬 (Hash) : 임의 값을 고정 길이로 변환하는 것</li>\n<li>해쉬 테이블 (Hash Table) : 키 값의 연산에 의해 직접 접근이 가능한 데이터 구조</li>\n<li>해싱 함수 (Hashing Function) : 키에 대해 산술 연산을 이용해 데이터 위치를 찾을 수 있는 함수</li>\n<li>해쉬 값 (Hash Value) 또는 해쉬 주소 (Hash Address) : 키를 해싱 함수로 연산해서, 해쉬 값을 알아내고, 이를 기반으로 해쉬 테이블에서 해당 키에 대한 데이터 위치를 일관성 있게 찾을 수 있음</li>\n<li>슬롯 (Slot) : 한 개의 데이터를 저장할 수 있는 공간</li>\n<li>저장할 데이터에 대해 키를 추출할 수 있는 별도 함수도 존재할 수 있음</li>\n</ol>\n<br>\n<h2 id=\"1-hash-table의-장단점과-주요-용도\" style=\"position:relative;\"><a href=\"#1-hash-table%EC%9D%98-%EC%9E%A5%EB%8B%A8%EC%A0%90%EA%B3%BC-%EC%A3%BC%EC%9A%94-%EC%9A%A9%EB%8F%84\" aria-label=\"1 hash table의 장단점과 주요 용도 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Hash Table의 장단점과 주요 용도</h2>\n<ul>\n<li>\n<p>장점</p>\n<ul>\n<li>데이터 저장/읽기 속도가 빠르다. (검색 속도가 빠르다.)</li>\n<li>해쉬는 키에 대한 데이터가 있는지(중복) 확인이 쉬움</li>\n</ul>\n</li>\n<li>\n<p>단점</p>\n<ul>\n<li>일반적으로 저장 공간이 좀 더 많이 필요하다.</li>\n<li><strong>여러 키에 해당하는 주소가 동일한 경우 충돌을 해결하기 위한 별도 자료 구조가 필요함</strong></li>\n</ul>\n</li>\n<li>\n<p>주요 용도</p>\n<ul>\n<li>검색이 많이 필요한 경우</li>\n<li>저장, 삭제, 읽기가 빈번한 경우</li>\n<li>캐시 구현시 (중복 확인이 쉽기 때문에 사용)</li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"2-충돌collision-해결-알고리즘-좋은-해쉬-함수-사용하기\" style=\"position:relative;\"><a href=\"#2-%EC%B6%A9%EB%8F%8Ccollision-%ED%95%B4%EA%B2%B0-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EC%A2%8B%EC%9D%80-%ED%95%B4%EC%89%AC-%ED%95%A8%EC%88%98-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"2 충돌collision 해결 알고리즘 좋은 해쉬 함수 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 충돌(Collision) 해결 알고리즘 (좋은 해쉬 함수 사용하기)</h2>\n<h3 id=\"1-chaining-기법\" style=\"position:relative;\"><a href=\"#1-chaining-%EA%B8%B0%EB%B2%95\" aria-label=\"1 chaining 기법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Chaining 기법</h3>\n<ul>\n<li><strong>개방 해싱</strong> 또는 <strong>Open Hashing 기법</strong> 중 하나로 해쉬 테이블 저장공간 외의 공간을 활용하는 기법</li>\n<li>충돌이 일어나면, 링크드 리스트를 사용해서 링크드 리스트로 데이터를 추가로 뒤에 연결시켜서 저장하는 기법</li>\n</ul>\n<h3 id=\"2-linear-probling-기법\" style=\"position:relative;\"><a href=\"#2-linear-probling-%EA%B8%B0%EB%B2%95\" aria-label=\"2 linear probling 기법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Linear Probling 기법</h3>\n<ul>\n<li><strong>폐쇄 해싱</strong> 또는 <strong>Close Hashing 기법</strong> 중 하나로 해쉬 테이블 저장공간 안에서 충돌 문제를 해결하는 기법</li>\n<li>\n<p>충돌이 일어나면, 해당 hash address의 다음 address부터 맨 처음 나오는 빈공간에 저장하는 기법</p>\n<ul>\n<li><strong>저장 공간 활용도를 높이기 위한 기법</strong></li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"연습-1--리스트-변수를-활용해서-hash-table-구현\" style=\"position:relative;\"><a href=\"#%EC%97%B0%EC%8A%B5-1--%EB%A6%AC%EC%8A%A4%ED%8A%B8-%EB%B3%80%EC%88%98%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%B4%EC%84%9C-hash-table-%EA%B5%AC%ED%98%84\" aria-label=\"연습 1  리스트 변수를 활용해서 hash table 구현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>연습 1 : 리스트 변수를 활용해서 Hash Table 구현</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">hash_table <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">get_key</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">hash</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>          <span class=\"token comment\"># 문자를 정수로 리턴</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">hash_function</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> key <span class=\"token operator\">%</span> <span class=\"token number\">8</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">save_data</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    hash_address <span class=\"token operator\">=</span> hash_function<span class=\"token punctuation\">(</span>get_key<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    hash_table<span class=\"token punctuation\">[</span>hash_address<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">read_data</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    hash_address <span class=\"token operator\">=</span> hash_function<span class=\"token punctuation\">(</span>get_key<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> hash_table<span class=\"token punctuation\">[</span>hash_address<span class=\"token punctuation\">]</span></code></pre></div>\n<h2 id=\"연습-2--chaining-기법으로-충돌-해결-코드-추가\" style=\"position:relative;\"><a href=\"#%EC%97%B0%EC%8A%B5-2--chaining-%EA%B8%B0%EB%B2%95%EC%9C%BC%EB%A1%9C-%EC%B6%A9%EB%8F%8C-%ED%95%B4%EA%B2%B0-%EC%BD%94%EB%93%9C-%EC%B6%94%EA%B0%80\" aria-label=\"연습 2  chaining 기법으로 충돌 해결 코드 추가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>연습 2 : Chaining 기법으로 충돌 해결 코드 추가</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">hash_table <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">get_key</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">hash</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">hash_function</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> key <span class=\"token operator\">%</span> <span class=\"token number\">8</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">save_data</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    index_key <span class=\"token operator\">=</span> get_key<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n    hash_address <span class=\"token operator\">=</span> hash_function<span class=\"token punctuation\">(</span>index_key<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> hash_table<span class=\"token punctuation\">[</span>hash_address<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>    <span class=\"token comment\"># 해당 키에 값이 1개 이상 존재할 경우,</span>\n        <span class=\"token keyword\">for</span> index <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>hash_table<span class=\"token punctuation\">[</span>hash_address<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> hash_table<span class=\"token punctuation\">[</span>hash_address<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> index_key<span class=\"token punctuation\">:</span>\n                hash_table<span class=\"token punctuation\">[</span>hash_address<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value\n                <span class=\"token keyword\">return</span>\n        hash_table<span class=\"token punctuation\">[</span>hash_address<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>index_key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>    <span class=\"token comment\"># 키에 값이 없을 경우 Array 형식으로 데이터 저장</span>\n        hash_table<span class=\"token punctuation\">[</span>hash_address<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>index_key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">read_data</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    index_key <span class=\"token operator\">=</span> get_key<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n    hash_address <span class=\"token operator\">=</span> hash_function<span class=\"token punctuation\">(</span>index_key<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> hash_table<span class=\"token punctuation\">[</span>hash_address<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> index <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>hash_table<span class=\"token punctuation\">[</span>hash_address<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> hash_table<span class=\"token punctuation\">[</span>hash_address<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> index_key<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> hash_table<span class=\"token punctuation\">[</span>hash_address<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span></code></pre></div>\n<h2 id=\"연습-3--linear-probing-기법으로-충돌-해결-코드-추가\" style=\"position:relative;\"><a href=\"#%EC%97%B0%EC%8A%B5-3--linear-probing-%EA%B8%B0%EB%B2%95%EC%9C%BC%EB%A1%9C-%EC%B6%A9%EB%8F%8C-%ED%95%B4%EA%B2%B0-%EC%BD%94%EB%93%9C-%EC%B6%94%EA%B0%80\" aria-label=\"연습 3  linear probing 기법으로 충돌 해결 코드 추가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>연습 3 : Linear Probing 기법으로 충돌 해결 코드 추가</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">hash_table <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">get_key</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">hash</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">hash_function</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> key <span class=\"token operator\">%</span> <span class=\"token number\">8</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">save_data</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    index_key <span class=\"token operator\">=</span> get_key<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n    hash_address <span class=\"token operator\">=</span> hash_function<span class=\"token punctuation\">(</span>index_key<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> hash_table<span class=\"token punctuation\">[</span>hash_address<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> index <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>hash_address<span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>hash_table<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>    <span class=\"token comment\"># 충돌이 일어나면, 빈 공간 탐색하여 저장</span>\n            <span class=\"token keyword\">if</span> hash_table<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                hash_table<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>index_key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span>\n                <span class=\"token keyword\">return</span>\n            <span class=\"token keyword\">elif</span> hash_table<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> index_key<span class=\"token punctuation\">:</span>\n                hash_table<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value\n                <span class=\"token keyword\">return</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        hash_table<span class=\"token punctuation\">[</span>hash_address<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>index_key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">read_data</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    index_key <span class=\"token operator\">=</span> get_key<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n    hash_address <span class=\"token operator\">=</span> hash_function<span class=\"token punctuation\">(</span>index_key<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> hash_table<span class=\"token punctuation\">[</span>hash_address<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> index <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>hash_address<span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>hash_table<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>    <span class=\"token comment\"># 키 값 말고 다른 공간에 있을 수 있어, 탐색하여 읽기</span>\n            <span class=\"token keyword\">if</span> hash_table<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span>\n            <span class=\"token keyword\">elif</span> hash_table<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> index_key<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> hash_table<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span></code></pre></div>\n<br>\n<h2 id=\"참고--해쉬-함수와-키-생성-함수\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0--%ED%95%B4%EC%89%AC-%ED%95%A8%EC%88%98%EC%99%80-%ED%82%A4-%EC%83%9D%EC%84%B1-%ED%95%A8%EC%88%98\" aria-label=\"참고  해쉬 함수와 키 생성 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고 : 해쉬 함수와 키 생성 함수</h2>\n<ul>\n<li>파이썬의 hash() 함수는 실행할 때마다, 값이 달라질 수 있음</li>\n<li>\n<p>해쉬 함수 :</p>\n<ul>\n<li>SHA (Secure Hash Algorithm) : 안전한 해시 알고리즘</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/52126612/82210441-0e9cad00-994a-11ea-924f-e5f1adae3352.png\" alt=\"sha\"></p>\n<h3 id=\"sha-1\" style=\"position:relative;\"><a href=\"#sha-1\" aria-label=\"sha 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SHA-1</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> hashlib\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">get_key</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    hash_object <span class=\"token operator\">=</span> hashlib<span class=\"token punctuation\">.</span>sha1<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    hash_object<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> hash_object<span class=\"token punctuation\">.</span>hexdigest<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nget_key<span class=\"token punctuation\">(</span><span class=\"token string\">'test'</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\"># a94a8fe5ccb19ba61c4c0873d391e987982fbbd3</span></code></pre></div>\n<h3 id=\"sha-256\" style=\"position:relative;\"><a href=\"#sha-256\" aria-label=\"sha 256 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SHA-256</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> hashlib\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">get_key</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    hash_object <span class=\"token operator\">=</span> hashlib<span class=\"token punctuation\">.</span>sha256<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    hash_object<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> hash_object<span class=\"token punctuation\">.</span>hexdigest<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nget_key<span class=\"token punctuation\">(</span><span class=\"token string\">'test'</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\"># 9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08</span></code></pre></div>\n<br>\n<h1 id=\"tree\" style=\"position:relative;\"><a href=\"#tree\" aria-label=\"tree permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tree</h1>\n<ul>\n<li>Node와 Branch를 이용해서, 사이클을 이루지 않도록 구성한 데이터 구조</li>\n<li>트리 중 이진 트리 (Binary Tree) 형태의 구조로 탐색(검색) 알고리즘 구현을 위해 많이 사용됨</li>\n</ul>\n<p align=\"center\">\n  <img width=\"460\" height=\"300\" src=\"https://user-images.githubusercontent.com/52126612/82443386-5f440f80-9adc-11ea-9b10-2b5041e99981.png\">\n</p>\n<br>\n<h2 id=\"용어-정리-1\" style=\"position:relative;\"><a href=\"#%EC%9A%A9%EC%96%B4-%EC%A0%95%EB%A6%AC-1\" aria-label=\"용어 정리 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✔용어 정리</h2>\n<ol>\n<li><strong>Node :</strong> 트리에서 데이터를 저장하는 기본 요소 (데이터와 다른 연결된 노드에 대한 Branch 정보 포함)</li>\n<li><strong>Root Node :</strong> 트리 맨 위에 있는 노드</li>\n<li><strong>Level :</strong> 최상위 노드를 Level 0으로 하였을 때, 하위 Branch로 연결된 노드의 깊이를 나타냄</li>\n<li><strong>Parent Node:</strong> 어떤 노드의 다음 레벨에 연결된 노드</li>\n<li><strong>Child Node:</strong> 어떤 노드의 상위 레벨에 연결된 노드</li>\n<li><strong>Leaf Node (Terminal Node) :</strong> Child Node가 하나도 없는 노드</li>\n<li><strong>Sibling (Brother Node) :</strong> 동일한 Parent Node를 가진 노드</li>\n<li><strong>Depth :</strong> 트리에서 Node가 가질 수 있는 최대 Level</li>\n</ol>\n<br>\n<h2 id=\"1-binary-search-tree-이진-트리와-이진-탐색-트리\" style=\"position:relative;\"><a href=\"#1-binary-search-tree-%EC%9D%B4%EC%A7%84-%ED%8A%B8%EB%A6%AC%EC%99%80-%EC%9D%B4%EC%A7%84-%ED%83%90%EC%83%89-%ED%8A%B8%EB%A6%AC\" aria-label=\"1 binary search tree 이진 트리와 이진 탐색 트리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Binary Search Tree (이진 트리와 이진 탐색 트리)</h2>\n<ul>\n<li>이진 트리 : 노드의 최대 Branch가 2인 트리</li>\n<li>\n<p>이진 탐색 트리 (Binary Search Tree, BST) : 이진 트리에 다음과 같은 추가적인 조건이 있는 트리</p>\n<ul>\n<li>왼쪽은 노드보다 작은 값, 오른쪽은 노드보다 큰 값</li>\n</ul>\n</li>\n</ul>\n<p align=\"center\">\n  <img width=\"460\" height=\"200\" src=\"https://user-images.githubusercontent.com/52126612/82443392-60753c80-9adc-11ea-9410-bcb8cf8507d0.png\">\n</p>\n<ul>\n<li>주요 용도 : 데이터 검색 (탐색)</li>\n<li>장점 : 탐색 속도를 개선할 수 있음</li>\n<li>단점 : 평균 시간 복잡도는 O(logn)이지만, 최악의 경우 리스트 등과 동일한 성능을 보여줌</li>\n</ul>\n<br>\n<h2 id=\"2-링크드-리스트로-이진-탐색-트리-구현하기\" style=\"position:relative;\"><a href=\"#2-%EB%A7%81%ED%81%AC%EB%93%9C-%EB%A6%AC%EC%8A%A4%ED%8A%B8%EB%A1%9C-%EC%9D%B4%EC%A7%84-%ED%83%90%EC%83%89-%ED%8A%B8%EB%A6%AC-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0\" aria-label=\"2 링크드 리스트로 이진 탐색 트리 구현하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 링크드 리스트로 이진 탐색 트리 구현하기</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value\n        self<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n        self<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">NodeMgmt</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> head\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>current_node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>head\n        <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> value <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n                    self<span class=\"token punctuation\">.</span>current_node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>left\n                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                    self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">break</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n                    self<span class=\"token punctuation\">.</span>current_node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right\n                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                    self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">break</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>current_node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>head\n        <span class=\"token keyword\">while</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>value <span class=\"token operator\">==</span> value<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n            <span class=\"token keyword\">elif</span> value <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>current_node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>left\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>current_node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span></code></pre></div>\n<br>\n<h2 id=\"3-이진-탐색-트리-삭제\" style=\"position:relative;\"><a href=\"#3-%EC%9D%B4%EC%A7%84-%ED%83%90%EC%83%89-%ED%8A%B8%EB%A6%AC-%EC%82%AD%EC%A0%9C\" aria-label=\"3 이진 탐색 트리 삭제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 이진 탐색 트리 삭제</h2>\n<h3 id=\"0-삭제할-node-탐색\" style=\"position:relative;\"><a href=\"#0-%EC%82%AD%EC%A0%9C%ED%95%A0-node-%ED%83%90%EC%83%89\" aria-label=\"0 삭제할 node 탐색 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>0. 삭제할 Node 탐색</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    searched <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n    self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>head\n    <span class=\"token keyword\">while</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>value <span class=\"token operator\">==</span> value<span class=\"token punctuation\">:</span>\n            searched <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n        <span class=\"token keyword\">elif</span> value <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node\n            self<span class=\"token punctuation\">.</span>current_node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>left\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node\n            self<span class=\"token punctuation\">.</span>current_node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right\n\n    <span class=\"token keyword\">if</span> searched <span class=\"token operator\">==</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> False1<span class=\"token punctuation\">.</span> Leaf Node 삭제</code></pre></div>\n<p align=\"center\">\n  <img width=\"480\" height=\"220\" src=\"https://user-images.githubusercontent.com/52126612/82443394-610dd300-9adc-11ea-8f66-1a254ca79a0d.png\">\n</p>\n<ul>\n<li>Leaf Node : Child Node 가 없는 Node</li>\n<li>삭제할 Node의 Parent Node가 삭제할 Node를 가리키지 않도록 한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n    <span class=\"token keyword\">del</span> self<span class=\"token punctuation\">.</span>current_node</code></pre></div>\n<h3 id=\"2-child-node가-하나인-node-삭제\" style=\"position:relative;\"><a href=\"#2-child-node%EA%B0%80-%ED%95%98%EB%82%98%EC%9D%B8-node-%EC%82%AD%EC%A0%9C\" aria-label=\"2 child node가 하나인 node 삭제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Child Node가 하나인 Node 삭제</h3>\n<p align=\"center\">\n  <img width=\"500\" height=\"200\" src=\"https://user-images.githubusercontent.com/52126612/82443396-61a66980-9adc-11ea-852d-f27a13e8c26b.png\">\n</p>\n<ul>\n<li>삭제할 Node의 Parent Node가 삭제할 Node의 Child Node를 가리키도록 한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>left <span class=\"token keyword\">and</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">==</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> value <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>left\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>left\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> value <span class=\"token operator\">></span> self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right</code></pre></div>\n<h3 id=\"3-child-node가-두-개인-node-삭제\" style=\"position:relative;\"><a href=\"#3-child-node%EA%B0%80-%EB%91%90-%EA%B0%9C%EC%9D%B8-node-%EC%82%AD%EC%A0%9C\" aria-label=\"3 child node가 두 개인 node 삭제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Child Node가 두 개인 Node 삭제</h3>\n<p align=\"center\">\n  <img width=\"500\" height=\"200\" src=\"https://user-images.githubusercontent.com/52126612/82443397-61a66980-9adc-11ea-8d3e-e8b7fd74b82d.png\">\n</p>\n<ul>\n<li>\n<p>삭제할 Node의 오른쪽 자식 중, 가장 작은 값을 삭제할 Node의 Parent Node가 가리키도록 한다.</p>\n<ol>\n<li>삭제할 Node의 오른쪽 자식 선택</li>\n<li>오른쪽 자식의 가장 왼쪽에 있는 Node를 선택</li>\n<li>해당 Node를 삭제할 Node의 Parent Node의 왼쪽 Branch가 가리키게 함</li>\n<li>해당 Node의 왼쪽 Branch가 삭제할 Node의 왼쪽 Child Node를 가리키게 함</li>\n<li>해당 Node의 오른쪽 Branch가 삭제할 Node의 왼쪽 Child Node를 가리키게 함</li>\n<li>만약 해당 Node가 오른쪽 Child Node를 가지고 있었을 경우에는, 해당 Node의 본래 Parent Node의 왼쪽 Branch가 해당 오른쪽 Child Node를 가리키게 함</li>\n</ol>\n</li>\n<li>삭제의 Node의 왼쪽 자식 중, 가장 큰 값을 삭제할 Node의 Parent Node가 가리키도록 한다</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token boolean\">None</span> <span class=\"token keyword\">and</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># case3</span>\n    <span class=\"token keyword\">if</span> value <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">:</span> <span class=\"token comment\"># case3-1</span>\n        self<span class=\"token punctuation\">.</span>change_node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right\n        self<span class=\"token punctuation\">.</span>change_node_parent <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right\n        <span class=\"token keyword\">while</span> self<span class=\"token punctuation\">.</span>change_node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>change_node_parent <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>change_node\n            self<span class=\"token punctuation\">.</span>change_node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>change_node<span class=\"token punctuation\">.</span>left\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>change_node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>change_node_parent<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>change_node<span class=\"token punctuation\">.</span>right\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>change_node_parent<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n        self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>change_node\n        self<span class=\"token punctuation\">.</span>change_node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right\n        self<span class=\"token punctuation\">.</span>change_node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>change_node<span class=\"token punctuation\">.</span>left\n\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>change_node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right\n        self<span class=\"token punctuation\">.</span>change_node_parent <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right\n        <span class=\"token keyword\">while</span> self<span class=\"token punctuation\">.</span>change_node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>change_node_parent <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>change_node\n            self<span class=\"token punctuation\">.</span>change_node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>change_node<span class=\"token punctuation\">.</span>left\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>change_node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>change_node_parent<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>change_node<span class=\"token punctuation\">.</span>right\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>change_node_parent<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n        self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>change_node\n        self<span class=\"token punctuation\">.</span>change_node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>left\n        self<span class=\"token punctuation\">.</span>change_node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right</code></pre></div>\n<br>\n<h2 id=\"4-이진-탐색-트리의-시간-복잡도와-단점\" style=\"position:relative;\"><a href=\"#4-%EC%9D%B4%EC%A7%84-%ED%83%90%EC%83%89-%ED%8A%B8%EB%A6%AC%EC%9D%98-%EC%8B%9C%EA%B0%84-%EB%B3%B5%EC%9E%A1%EB%8F%84%EC%99%80-%EB%8B%A8%EC%A0%90\" aria-label=\"4 이진 탐색 트리의 시간 복잡도와 단점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 이진 탐색 트리의 시간 복잡도와 단점</h2>\n<ul>\n<li>depth (트리의 높이)를 h라고 표기한다면, O(h)</li>\n<li>\n<p>n개의 노드를 가진다면, h=logn 에 가까우므로, 시간 복잡도는 O(logn)</p>\n<ul>\n<li>log는 밑이 10이 아닌 2를 의미로 즉 50%의 실행 시간을 단축시킬 수 있음</li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"5-전체-파이썬-코드\" style=\"position:relative;\"><a href=\"#5-%EC%A0%84%EC%B2%B4-%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EC%BD%94%EB%93%9C\" aria-label=\"5 전체 파이썬 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. 전체 파이썬 코드</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value\n        self<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n        self<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">NodeMgmt</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> head\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>current_node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>head\n        <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> value <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n                    self<span class=\"token punctuation\">.</span>current_node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>left\n                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                    self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">break</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n                    self<span class=\"token punctuation\">.</span>current_node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right\n                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                    self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">break</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>current_node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>head\n        <span class=\"token keyword\">while</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>value <span class=\"token operator\">==</span> value<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n            <span class=\"token keyword\">elif</span> value <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>current_node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>left\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>current_node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 삭제할 노드 탐색</span>\n        searched <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n        self<span class=\"token punctuation\">.</span>current_node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>head\n        self<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>head\n        <span class=\"token keyword\">while</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>value <span class=\"token operator\">==</span> value<span class=\"token punctuation\">:</span>\n                searched <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n                <span class=\"token keyword\">break</span>\n            <span class=\"token keyword\">elif</span> value <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node\n                self<span class=\"token punctuation\">.</span>current_node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>left\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node\n                self<span class=\"token punctuation\">.</span>current_node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right\n\n        <span class=\"token keyword\">if</span> searched <span class=\"token operator\">==</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n\n        <span class=\"token comment\"># case 1 : Child Node가 하나인 Node 삭제</span>\n        <span class=\"token keyword\">if</span>  self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> <span class=\"token boolean\">None</span> <span class=\"token keyword\">and</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">==</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> value <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n\n        <span class=\"token comment\"># case 2 : Child Node가 하나인 Node 삭제</span>\n        <span class=\"token keyword\">elif</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token boolean\">None</span> <span class=\"token keyword\">and</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">==</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> value <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>left\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>left\n        <span class=\"token keyword\">elif</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> <span class=\"token boolean\">None</span> <span class=\"token keyword\">and</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> value <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right\n\n        <span class=\"token comment\"># case 3 : Child Node가 두 개인 Node 삭제</span>\n        <span class=\"token keyword\">elif</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token boolean\">None</span> <span class=\"token keyword\">and</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># case 3-1 : 삭제할 Node의 오른쪽 자식 중, 가장 작은 값을 삭제할 Node의 Parent Node가 가리키도록 한다.</span>\n            <span class=\"token keyword\">if</span> value <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>change_node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right\n                self<span class=\"token punctuation\">.</span>change_node_parent <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right\n                <span class=\"token keyword\">while</span> self<span class=\"token punctuation\">.</span>change_node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n                    self<span class=\"token punctuation\">.</span>change_node_parent <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>change_node\n                    self<span class=\"token punctuation\">.</span>change_node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>change_node<span class=\"token punctuation\">.</span>left\n                <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>change_node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n                    self<span class=\"token punctuation\">.</span>change_node_parent<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>change_node<span class=\"token punctuation\">.</span>right\n                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                    self<span class=\"token punctuation\">.</span>change_node_parent<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n                self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>change_node\n                self<span class=\"token punctuation\">.</span>change_node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right\n                self<span class=\"token punctuation\">.</span>change_node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>change_node<span class=\"token punctuation\">.</span>left\n            <span class=\"token comment\"># case 3-2 : 삭제할 Node의 왼쪽 자식 중, 가장 큰 값을 삭제할 Node의 Parent Node가 가리키도록 한다.</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>change_node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right\n                self<span class=\"token punctuation\">.</span>change_node_parent <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right\n                <span class=\"token keyword\">while</span> self<span class=\"token punctuation\">.</span>change_node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n                    self<span class=\"token punctuation\">.</span>change_node_parent <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>change_node\n                    self<span class=\"token punctuation\">.</span>change_node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>change_node<span class=\"token punctuation\">.</span>left\n                <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>change_node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n                    self<span class=\"token punctuation\">.</span>change_node_parent<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>change_node<span class=\"token punctuation\">.</span>right\n                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                    self<span class=\"token punctuation\">.</span>change_node_parent<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n                self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>change_node\n                self<span class=\"token punctuation\">.</span>change_node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right\n                self<span class=\"token punctuation\">.</span>change_node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>left\n\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span></code></pre></div>\n<br>\n<h1 id=\"heap\" style=\"position:relative;\"><a href=\"#heap\" aria-label=\"heap permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Heap</h1>\n<ul>\n<li>\n<p>데이터에서 최대값과 최소값을 빠르게 찾기 위해 고안된 완전 이진 트리 (Complete Binary Tree)</p>\n<ul>\n<li>완전 이진 트리 : 노드를 삽입할 때 최하단 왼쪽 노드부터 차례대로 삽입하는 트리</li>\n</ul>\n</li>\n<li>\n<p>사용하는 이유</p>\n<ul>\n<li>배열에 데이터를 넣고, 최대값과 최소값을 찾으려면 O(n)이 걸림</li>\n<li>하지만, 힙에 데이터를 넣고, 최대값과 최소값을 찾으면, O(logn)이 걸림</li>\n<li>우선순위 큐와 같이 최대값 또는 최소값을 빠르게 찾아야 하는 자료구조 및 알고리즘 구현 등에 활용됨</li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"1-heap-구조\" style=\"position:relative;\"><a href=\"#1-heap-%EA%B5%AC%EC%A1%B0\" aria-label=\"1 heap 구조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Heap 구조</h2>\n<ul>\n<li>힙은 최대값을 구하기 위한 구조 (Max Heap)와 최소값을 구하기 위한 구조 (Min Heap)로 분류됨</li>\n<li>\n<p>힙은 다음과 같이 두 가지 조건을 가지고 있는 자료구조임</p>\n<ol>\n<li>각 노드의 값은 해당 노드의 자식 노드가 가진 값보다 크거나 같다. (Max Heap의 경우)</li>\n<li>완전 이진 트리 형태를 가짐</li>\n</ol>\n</li>\n</ul>\n<p align=\"center\">\n  <img width=\"460\" height=\"220\" src=\"https://user-images.githubusercontent.com/52126612/82558869-96ccbd80-9ba9-11ea-943a-828859ed571a.png\">\n</p>\n<ul>\n<li>\n<p>이진 탐색 트리와의 차이점</p>\n<ul>\n<li>힙은 각 노드의 값이 자식 노드보다 크거나 같음</li>\n<li>힙은 이진 탐색 트리와 달리 자식 노드의 조건이 없음</li>\n<li>이진 탐색 트리는 탐색을 위한 구조, 힙은 최대/최소값 검색을 위한 구조 중 하나로 이해하면 됨</li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"2-heap-구현\" style=\"position:relative;\"><a href=\"#2-heap-%EA%B5%AC%ED%98%84\" aria-label=\"2 heap 구현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Heap 구현</h2>\n<ul>\n<li>일반적으로 힙 구현시 배열 자료 구조를 활용함</li>\n<li>배열은 인덱스가 0부터 시작하지만, 힙 구현의 편의를 위해 root 노드 인덱스 번호를 1로 지정하면 구현이 좀 더 수월함</li>\n<li>\n<p>특정 노드의 관련 노드 위치 알아내기</p>\n<ul>\n<li>부모 노드 인덱스 번호 (parent node’s index) = 자식 노드 인덱스 번호 (child node’s index) // 2</li>\n<li>왼쪽 자식 노드 인덱스 번호 (left child node’s index) = 부모 노드 인덱스 번호 (parent node’s index) * 2</li>\n<li>오른쪽 자식 노드 인덱스 번호 (right child node’s index) = 부모 노드 인덱스 번호 (parent node’s index) * 2 + 1</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-데이터-삽입---기본-동작\" style=\"position:relative;\"><a href=\"#1-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%82%BD%EC%9E%85---%EA%B8%B0%EB%B3%B8-%EB%8F%99%EC%9E%91\" aria-label=\"1 데이터 삽입   기본 동작 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 데이터 삽입 - 기본 동작</h3>\n<ul>\n<li>힙은 완전 이진 트리로, 삽입할 노드는 기본적으로 왼쪽 최하단부 노드부터 삽입</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Heap</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>heap_array <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span>\n            self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n\n        self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span></code></pre></div>\n<br>\n<h3 id=\"2-데이터-삽입---삽입할-데이터가-힙의-데이터보다-클-경우-max-heap\" style=\"position:relative;\"><a href=\"#2-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%82%BD%EC%9E%85---%EC%82%BD%EC%9E%85%ED%95%A0-%EB%8D%B0%EC%9D%B4%ED%84%B0%EA%B0%80-%ED%9E%99%EC%9D%98-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B3%B4%EB%8B%A4-%ED%81%B4-%EA%B2%BD%EC%9A%B0-max-heap\" aria-label=\"2 데이터 삽입   삽입할 데이터가 힙의 데이터보다 클 경우 max heap permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 데이터 삽입 - 삽입할 데이터가 힙의 데이터보다 클 경우 (Max Heap)</h3>\n<ol>\n<li>먼저 삽입된 데이터는 완전 이진 트리 구조에 맞춰 최하단부 왼쪽 노드부터 채워짐</li>\n<li>채워진 노드 위치에서 부모 노드보다 값이 클 경우 부모 노드와 위치를 바꿔주는 작업을 반복함</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">move_up</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> inserted_idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> inserted_idx <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n\n    parent_idx <span class=\"token operator\">=</span> inserted_idx <span class=\"token operator\">//</span> <span class=\"token number\">2</span>\n    <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">[</span>inserted_idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">[</span>parent_idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n\n    self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># return True  아래 부분 추가</span>\n\n    inserted_idx <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n\n    <span class=\"token keyword\">while</span> self<span class=\"token punctuation\">.</span>move_up<span class=\"token punctuation\">(</span>inserted_idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># move_up 이 실패할 때까지</span>\n        parent_idx <span class=\"token operator\">=</span> inserted_idx <span class=\"token operator\">//</span> <span class=\"token number\">2</span>   <span class=\"token comment\"># 부모 노드 인덱스 = 자식 노드 인덱스 // 2</span>\n        self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">[</span>inserted_idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">[</span>parent_idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">[</span>parent_idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">[</span>inserted_idx<span class=\"token punctuation\">]</span>\n        inserted_idx <span class=\"token operator\">=</span> parent_idx\n\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span></code></pre></div>\n<br>\n<h3 id=\"3-데이터-삭제---기본\" style=\"position:relative;\"><a href=\"#3-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%82%AD%EC%A0%9C---%EA%B8%B0%EB%B3%B8\" aria-label=\"3 데이터 삭제   기본 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 데이터 삭제 - 기본</h3>\n<blockquote>\n<p>✔ 리스트의 Pop과 어떤 차이가 있는지 확인하는 것이 <strong>중요</strong> !</p>\n</blockquote>\n<ul>\n<li>\n<p>보통 삭제는 최상단 노드 (root 노드)를 삭제하는 것이 일반적이다.</p>\n<ul>\n<li>힙의 용도는 최대값 또는 최소값을 root 노드에 놓아서, 최대값과 최소값을 바로 꺼내 쓸 수 있도록 하는 것이기에, 기본적인 데이터 삭제는 root 노드 삭제이다.</li>\n<li>파이썬에서 List의 pop은 가장 마지막에 인서트된 값을 삭제하는 것과 반대이다.</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span>\n    returned_data <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">return</span> returend_data</code></pre></div>\n<br>\n<h3 id=\"4-데이터-삭제---구현\" style=\"position:relative;\"><a href=\"#4-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%82%AD%EC%A0%9C---%EA%B5%AC%ED%98%84\" aria-label=\"4 데이터 삭제   구현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 데이터 삭제 - 구현</h3>\n<blockquote>\n<p>✔ 요약하면, 단순히 root 노드를 삭제하는 것이 아닌 가장 마지막에 추가된 노드를 root 노드로 이동시킨 후 나머지 노드들과 비교하며 <strong>재정렬</strong>하는 과정을 거친다.</p>\n</blockquote>\n<ol>\n<li>상단의 데이터 삭제시, 가장 하단부 왼쪽에 위치한 노드 (가장 마지막에 추가한 노드)를 root 노드로 이동</li>\n<li>root 노드의 값이 child node 보다 작을 경우, root 노드의 child node 중 가장 큰 값을 가진 노드와 root 노드 위치를 바꿔주는 작업 반복</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">move_down</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> popped_idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    left_child_popped_idx <span class=\"token operator\">=</span> popped_idx <span class=\"token operator\">*</span> <span class=\"token number\">2</span>\n    right_child_popped_idx <span class=\"token operator\">=</span> popped_idx <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n\n    <span class=\"token comment\"># case 1: 왼쪽 자식 노드도 없을 때</span>\n    <span class=\"token keyword\">if</span> left_child_popped_idx <span class=\"token operator\">>=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n    <span class=\"token comment\"># case 2: 오른쪽 자식 노드만 없을 때</span>\n    <span class=\"token keyword\">elif</span> right_child_popped_idx <span class=\"token operator\">>=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">[</span>popped_idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">[</span>left_child_popped_idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n    <span class=\"token comment\"># case 3: 왼쪽, 오른쪽 자식 노드 모두 있을 때</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">[</span>left_child_popped_idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">[</span>right_child_popped_idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">[</span>popped_idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">[</span>left_child_popped_idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">[</span>popped_idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">[</span>right_child_popped_idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span>\n\n    returned_data <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">del</span> self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    popped_idx <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\n    <span class=\"token keyword\">while</span> self<span class=\"token punctuation\">.</span>move_down<span class=\"token punctuation\">(</span>popped_idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        left_child_popped_idx <span class=\"token operator\">=</span> popped_idx <span class=\"token operator\">*</span> <span class=\"token number\">2</span>\n        right_child_popped_idx <span class=\"token operator\">=</span> popped_idx <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n\n        <span class=\"token comment\"># case 2: 오른쪽 자식 노드만 없을 때</span>\n        <span class=\"token keyword\">if</span> right_child_popped_idx <span class=\"token operator\">>=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">[</span>popped_idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">[</span>left_child_popped_idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">[</span>popped_idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">[</span>left_child_popped_idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">[</span>left_child_popped_idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">[</span>popped_idx<span class=\"token punctuation\">]</span>\n                popped_idx <span class=\"token operator\">=</span> left_child_popped_idx\n        <span class=\"token comment\"># case 3: 왼쪽, 오른쪽 자식 노드 모두 있을 때</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">[</span>left_child_popped_idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">[</span>right_child_popped_idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">[</span>popped_idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">[</span>left_child_popped_idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                    self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">[</span>popped_idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">[</span>left_child_popped_idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">[</span>left_child_popped_idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">[</span>popped_idx<span class=\"token punctuation\">]</span>\n                    popped_idx <span class=\"token operator\">=</span> left_child_popped_idx\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">[</span>popped_idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">[</span>right_child_popped_idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                    self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">[</span>popped_idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">[</span>right_child_popped_idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">[</span>right_child_popped_idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">[</span>popped_idx<span class=\"token punctuation\">]</span>\n                    popped_idx <span class=\"token operator\">=</span> right_child_popped_idx\n\n    <span class=\"token keyword\">return</span> returned_data</code></pre></div>\n<br>\n<h3 id=\"5-heap-전체-파이썬-코드\" style=\"position:relative;\"><a href=\"#5-heap-%EC%A0%84%EC%B2%B4-%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EC%BD%94%EB%93%9C\" aria-label=\"5 heap 전체 파이썬 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. Heap 전체 파이썬 코드</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Heap</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>heap_array <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">move_down</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> popped_idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        left_child_popped_idx <span class=\"token operator\">=</span> popped_idx <span class=\"token operator\">*</span> <span class=\"token number\">2</span>\n        right_child_popped_idx <span class=\"token operator\">=</span> popped_idx <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n\n        <span class=\"token comment\"># case 1: 왼쪽 자식 노드도 없을 때</span>\n        <span class=\"token keyword\">if</span> left_child_popped_idx <span class=\"token operator\">>=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n        <span class=\"token comment\"># case 2: 오른쪽 자식 노드만 없을 때</span>\n        <span class=\"token keyword\">elif</span> right_child_popped_idx <span class=\"token operator\">>=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">[</span>popped_idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">[</span>left_child_popped_idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n        <span class=\"token comment\"># case 3: 왼쪽, 오른쪽 자식 노드 모두 있을 때</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">[</span>left_child_popped_idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">[</span>right_child_popped_idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">[</span>popped_idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">[</span>left_child_popped_idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">[</span>popped_idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">[</span>right_child_popped_idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span>\n\n        returned_data <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n        self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">del</span> self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n        popped_idx <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\n        <span class=\"token keyword\">while</span> self<span class=\"token punctuation\">.</span>move_down<span class=\"token punctuation\">(</span>popped_idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            left_child_popped_idx <span class=\"token operator\">=</span> popped_idx <span class=\"token operator\">*</span> <span class=\"token number\">2</span>\n            right_child_popped_idx <span class=\"token operator\">=</span> popped_idx <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n\n            <span class=\"token comment\"># case 2: 오른쪽 자식 노드만 없을 때</span>\n            <span class=\"token keyword\">if</span> right_child_popped_idx <span class=\"token operator\">>=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">[</span>popped_idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">[</span>left_child_popped_idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                    self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">[</span>popped_idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">[</span>left_child_popped_idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">[</span>left_child_popped_idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">[</span>popped_idx<span class=\"token punctuation\">]</span>\n                    popped_idx <span class=\"token operator\">=</span> left_child_popped_idx\n            <span class=\"token comment\"># case 3: 왼쪽, 오른쪽 자식 노드 모두 있을 때</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">[</span>left_child_popped_idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">[</span>right_child_popped_idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">[</span>popped_idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">[</span>left_child_popped_idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                        self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">[</span>popped_idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">[</span>left_child_popped_idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">[</span>left_child_popped_idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">[</span>popped_idx<span class=\"token punctuation\">]</span>\n                        popped_idx <span class=\"token operator\">=</span> left_child_popped_idx\n                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">[</span>popped_idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">[</span>right_child_popped_idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                        self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">[</span>popped_idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">[</span>right_child_popped_idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">[</span>right_child_popped_idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">[</span>popped_idx<span class=\"token punctuation\">]</span>\n                        popped_idx <span class=\"token operator\">=</span> right_child_popped_idx\n\n        <span class=\"token keyword\">return</span> returned_data\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">move_up</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> inserted_idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> inserted_idx <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n        parent_idx <span class=\"token operator\">=</span> inserted_idx <span class=\"token operator\">//</span> <span class=\"token number\">2</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">[</span>inserted_idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">[</span>parent_idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n\n        self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n        inserted_idx <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n\n        <span class=\"token keyword\">while</span> self<span class=\"token punctuation\">.</span>move_up<span class=\"token punctuation\">(</span>inserted_idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            parent_idx <span class=\"token operator\">=</span> inserted_idx <span class=\"token operator\">//</span> <span class=\"token number\">2</span>\n            self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">[</span>inserted_idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">[</span>parent_idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">[</span>parent_idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>heap_array<span class=\"token punctuation\">[</span>inserted_idx<span class=\"token punctuation\">]</span>\n            inserted_idx <span class=\"token operator\">=</span> parent_idx\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span></code></pre></div>","frontmatter":{"title":"CS 자료구조 정리","date":"May 20, 2020"}}},"pageContext":{"slug":"/Backend/cs-자료구조-정리/","previous":null,"next":{"fields":{"slug":"/Docker/docker-명령어-정리/"},"frontmatter":{"title":"Docker 명령어 정리","category":"Docker","draft":false}}}},"staticQueryHashes":["2486386679","3128451518"]}