{"componentChunkName":"component---src-templates-blog-post-js","path":"/Backend/cs-알고리즘-정리/","result":{"data":{"site":{"siteMetadata":{"title":"mustnot","author":"[mustnot]","siteUrl":"https://mustnot.github.io","comment":{"disqusShortName":"mustnot","utterances":"mustnot/mustnot.github.io"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"96ed0364-c1b7-55b9-8e4b-024479c59b7a","excerpt":"Sort 정렬 알고리즘에 대한 정리와 추가적인 알고리즘에 대한 정리 정렬 알고리즘은 정렬 방식에 따라 여러 방식의 알고리즘들이 존재한다. 알고리즘 종류만 따지더라도  부터 ,  등 다양하게 있다. Selection Sort Selection Sort (선택 정렬)은 제자리 정렬 알고리즘 중 하나로 주어진 리스트 중 최소값을 찾고, 그 값을 맨 앞 앞에 위치한 값과 교체하는 방식으로 그 다음에는 앞 전에 교체한 위치를 뺀 나머지 리스트의 맨 앞에 위치와 교체한다. Process (Ascending…","html":"<h1 id=\"sort\" style=\"position:relative;\"><a href=\"#sort\" aria-label=\"sort permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Sort</h1>\n<blockquote>\n<p>정렬 알고리즘에 대한 정리와 추가적인 알고리즘에 대한 정리</p>\n</blockquote>\n<p>정렬 알고리즘은 정렬 방식에 따라 여러 방식의 알고리즘들이 존재한다. 알고리즘 종류만 따지더라도 <code class=\"language-text\">선택 정렬(Selection Sort)</code> 부터 <code class=\"language-text\">Bubble Sort</code>, <code class=\"language-text\">Quick Sort</code> 등 다양하게 있다.</p>\n<br>\n<h2 id=\"selection-sort\" style=\"position:relative;\"><a href=\"#selection-sort\" aria-label=\"selection sort permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Selection Sort</h2>\n<p>Selection Sort (선택 정렬)은 <strong>제자리 정렬</strong> 알고리즘 중 하나로 주어진 리스트 중 최소값을 찾고, 그 값을 맨 앞 앞에 위치한 값과 교체하는 방식으로 그 다음에는 앞 전에 교체한 위치를 뺀 나머지 리스트의 맨 앞에 위치와 교체한다.</p>\n<br>\n<h3 id=\"process-ascending\" style=\"position:relative;\"><a href=\"#process-ascending\" aria-label=\"process ascending permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Process (Ascending)</h3>\n<ol>\n<li>배열에서 최소값을 찾는다.</li>\n<li>찾은 최소값을 배열에서 가장 맨 앞에 위치한 값과 교체한다.</li>\n<li>교체한 맨 앞의 값을 제외한 배열에서 1번 과정부터 다시 반복</li>\n</ol>\n<br>\n<h3 id=\"python-code\" style=\"position:relative;\"><a href=\"#python-code\" aria-label=\"python code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Python Code</h3>\n<blockquote>\n<p>변수명 짓기 너무나 어려운 것..</p>\n</blockquote>\n<p><strong>Code 1</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">selection_sort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> ascending<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> ix <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        _min <span class=\"token operator\">=</span> ix\n        <span class=\"token keyword\">for</span> jx <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>ix<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> arr<span class=\"token punctuation\">[</span>jx<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">[</span>_min<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                _min <span class=\"token operator\">=</span> jx\n        arr<span class=\"token punctuation\">[</span>_min<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>ix<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>ix<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>_min<span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">return</span> arr</code></pre></div>\n<p><strong>Code 2</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">selection_sort</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> stand <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        lowest <span class=\"token operator\">=</span> stand\n        <span class=\"token keyword\">for</span> index <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>stand <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> data<span class=\"token punctuation\">[</span>lowest<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> data<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                lowest <span class=\"token operator\">=</span> index\n        data<span class=\"token punctuation\">[</span>lowest<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">[</span>stand<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span>stand<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">[</span>lowest<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">return</span> data</code></pre></div>\n<br>\n<h2 id=\"merge-sort\" style=\"position:relative;\"><a href=\"#merge-sort\" aria-label=\"merge sort permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Merge sort</h2>\n<ul>\n<li>\n<p>재귀용법을 활용한 정렬 알고리즘</p>\n<ul>\n<li>리스트를 절반으로 잘라 비슷한 크기의 두 부분 리스트로 나눈다.</li>\n<li>각 부분 리스트를 재귀적으로 합병 정렬을 이용해 정렬한다.</li>\n<li>두 부분 리스트를 다시 하나의 정렬된 리스트로 합병한다.</li>\n</ul>\n</li>\n</ul>\n<br>\n<h3 id=\"알고리즘-구현\" style=\"position:relative;\"><a href=\"#%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EA%B5%AC%ED%98%84\" aria-label=\"알고리즘 구현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>알고리즘 구현</h3>\n<blockquote>\n<p>✔ 내가 이해한 것과 공부할 때 본 코드의 순서가 다름. 내 코드는 병합 후에 정렬을 진행했고, 공부할 때 본 코드는 정렬하며 병합 (조금 더 살펴보자 !)</p>\n</blockquote>\n<ol>\n<li><code class=\"language-text\">[1, 9, 3, 2]</code></li>\n<li><code class=\"language-text\">[1, 9], [3, 2]</code> : 리스트를 절반으로 잘라 비슷한 크기의 두 부분 리스트로 나눈다.</li>\n<li><code class=\"language-text\">[1], [9], [3], [2]</code> : 동일하게 두 부분으로 나눈다.</li>\n<li><code class=\"language-text\">[1, 9], [3], [2]</code> : <code class=\"language-text\">[1]</code>과 <code class=\"language-text\">[9]</code>를 비교하면서 병합</li>\n<li><code class=\"language-text\">[1, 9], [2, 3]</code> : <code class=\"language-text\">[3]</code>과 <code class=\"language-text\">[2]</code>를 비교하여 정렬 후 병합</li>\n<li><code class=\"language-text\">[1, 2, 3, 9]</code> : <code class=\"language-text\">[1, 9]</code>와 <code class=\"language-text\">[2, 3]</code>을 비교하며 정렬하여 병합</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># my code</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">merge_sort</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> data\n    center <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    left<span class=\"token punctuation\">,</span> right <span class=\"token operator\">=</span> merge_sort<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>center<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> merge_sort<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span>center<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> sort<span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span> left <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        result <span class=\"token operator\">+=</span> left\n    <span class=\"token keyword\">if</span> right <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        result <span class=\"token operator\">+=</span> right\n\n    <span class=\"token keyword\">for</span> ix1 <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        minimum <span class=\"token operator\">=</span> ix1\n        <span class=\"token keyword\">for</span> ix2 <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>ix1<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> result<span class=\"token punctuation\">[</span>ix2<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> result<span class=\"token punctuation\">[</span>minimum<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                minimum <span class=\"token operator\">=</span> ix2\n        result<span class=\"token punctuation\">[</span>ix1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">[</span>minimum<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> result<span class=\"token punctuation\">[</span>minimum<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">[</span>ix1<span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">return</span> result</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># study code</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    merged <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    left_point<span class=\"token punctuation\">,</span> right_point <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span>\n\n    <span class=\"token comment\"># case1 - left/right 둘다 있을때</span>\n    <span class=\"token keyword\">while</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> left_point <span class=\"token keyword\">and</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> right_point<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> left<span class=\"token punctuation\">[</span>left_point<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> right<span class=\"token punctuation\">[</span>right_point<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            merged<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">[</span>right_point<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            right_point <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            merged<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">[</span>left_point<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            left_point <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\n    <span class=\"token comment\"># case2 - left 데이터가 없을 때</span>\n    <span class=\"token keyword\">while</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> left_point<span class=\"token punctuation\">:</span>\n        merged<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">[</span>left_point<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        left_point <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\n    <span class=\"token comment\"># case3 - right 데이터가 없을 때</span>\n    <span class=\"token keyword\">while</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> right_point<span class=\"token punctuation\">:</span>\n        merged<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">[</span>right_point<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        right_point <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\n    <span class=\"token keyword\">return</span> merged\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">mergesplit</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> data\n    medium <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    left <span class=\"token operator\">=</span> mergesplit<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>medium<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    right <span class=\"token operator\">=</span> mergesplit<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span>medium<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> merge<span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span></code></pre></div>\n<br>\n<h2 id=\"quick-sort\" style=\"position:relative;\"><a href=\"#quick-sort\" aria-label=\"quick sort permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Quick sort</h2>\n<ul>\n<li><strong>정렬 알고리즘의 꽃(🌺)</strong></li>\n<li>기준점(Pivot)을 정하여, 기준점보다 작은 데이터는 왼쪽, 큰 데이터는 오른쪽으로 모으는 함수</li>\n<li>각 왼쪽과 오른쪽은 재귀용법을 사용하여, 다시 동일 함수를 호출하여 반복</li>\n<li><code class=\"language-text\">return left + pivot + right</code></li>\n</ul>\n<br>\n<h3 id=\"알고리즘-구현-1\" style=\"position:relative;\"><a href=\"#%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EA%B5%AC%ED%98%84-1\" aria-label=\"알고리즘 구현 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>알고리즘 구현</h3>\n<blockquote>\n<p>✔ 오히려 병합 정렬보다 간단하지만 생각하는데 오래 걸렸음. 오히려 복잡하게 생각하지 말고 단순하게 생각하자 !</p>\n</blockquote>\n<ul>\n<li>\n<p>quicksort 함수</p>\n<ul>\n<li>리스트의 길이가 1이면 바로 리턴</li>\n<li>그렇지 않다면, 리스트 맨 앞 데이터를 기준점(Pivot)으로 놓고 left, right 리스트 변수 생성</li>\n<li>맨 앞에 데이터를 뺀 나머지 데이터를 기준점과 비교(Pivot)</li>\n<li>기준점보다 작으면 left에 추가, 크면 right에 추가</li>\n<li><code class=\"language-text\">return quicksort(left) + pivot + quicksort(right)</code></li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># my code</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">quick_sort</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> data\n\n    pivot <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    left<span class=\"token punctuation\">,</span> right <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token comment\"># merge sort와 유사</span>\n\n    <span class=\"token keyword\">for</span> ix <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        val <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span>ix<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">if</span> val <span class=\"token operator\">&lt;</span> pivot<span class=\"token punctuation\">:</span>\n            left<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            right<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> quick_sort<span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span>pivot<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> quick_sort<span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># study code</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">qsort</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> data\n\n    left<span class=\"token punctuation\">,</span> right <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    pivot <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">for</span> index <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> pivot <span class=\"token operator\">></span> data<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            left<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            right<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> qsort<span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span>pivot<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> qsort<span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">)</span></code></pre></div>\n<br>\n<h4 id=\"big-o\" style=\"position:relative;\"><a href=\"#big-o\" aria-label=\"big o permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Big-O</h4>\n<p>시간 복잡도를 계산하면 첫 번째 반복문에서 <code class=\"language-text\">n</code> 만큼 돌 것이고, 두 번째 반복문에서는 첫 번째 루프를 지날 때마다 <code class=\"language-text\">n-1</code>, <code class=\"language-text\">n-2</code>, <code class=\"language-text\">...</code> 로 점차 감소할테지만, 그래도 <code class=\"language-text\">n</code>만큼 돌기 때문에 시간 복잡도는 <code class=\"language-text\">O(n^2)</code>다.</p>\n<p>공간 복잡도는 배열 안에서만 모든 작업이 이루어지기 때문에 <code class=\"language-text\">O(n)</code> 이다.</p>\n<br>\n<h2 id=\"bubble-sort\" style=\"position:relative;\"><a href=\"#bubble-sort\" aria-label=\"bubble sort permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Bubble Sort</h2>\n<blockquote>\n<p>거품 정렬이 왜 거품 정렬일까라고 생각했는데, 원소의 이동이 마치 거품이 수면으로 올라오는 듯한 모습을 보인다고 해서 지어졌다고 한다. 궁금하면 <a href=\"%5Bhttps://ko.wikipedia.org/wiki/%EA%B1%B0%ED%92%88_%EC%A0%95%EB%A0%AC%5D(https://ko.wikipedia.org/wiki/%EA%B1%B0%ED%92%88_%EC%A0%95%EB%A0%AC)\">Bubble Sort - Wikipedia</a></p>\n</blockquote>\n<p>거품 정렬은 Selection Sort와 유사하다고 볼 수 있는데, 그 이유는 리스트의 값을 하나 씩 순회하며 인접한 두 원소를 비교하고 자리를 교환하면서 정렬하는 알고리즘이다. 여기서 리스트를 순차적으로 순회한다는 점에서 어느 정도 유사한 면이 있다.</p>\n<br>\n<h3 id=\"process-ascending-1\" style=\"position:relative;\"><a href=\"#process-ascending-1\" aria-label=\"process ascending 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Process (Ascending)</h3>\n<ol>\n<li>첫 번째와 두 번째 원소를 비교, 그 후 두 번째와 세 번째 원소를 비교하는 방식으로 n 번째와 n+1 번째의 원소를 비교하여 이 중 조건에 의해 자리를 교환한다. 여기서 조건은 오름차순인지, 내림차순인지 이다.</li>\n<li>(오름차순) 1번 과정을 거치면 가장 끝에 있는 원소의 값이 가장 크게 되어 다음 과정 진행할 때에는 마지막 위치를 제외하고 1번 과정을 반복한다.</li>\n</ol>\n<br>\n<h3 id=\"python-code-1\" style=\"position:relative;\"><a href=\"#python-code-1\" aria-label=\"python code 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Python Code</h3>\n<p><strong>Code 1</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">bubble_sort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> ascending<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    end <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">while</span> end <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> ix <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>end<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> arr<span class=\"token punctuation\">[</span>ix<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> arr<span class=\"token punctuation\">[</span>ix<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                arr<span class=\"token punctuation\">[</span>ix<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>ix<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>ix<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>ix<span class=\"token punctuation\">]</span>\n        end <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">return</span> arr</code></pre></div>\n<p><strong>Code 2</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">bubble_sort</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> index <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        swap <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n        <span class=\"token keyword\">for</span> index2 <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> index <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> data<span class=\"token punctuation\">[</span>index2<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> data<span class=\"token punctuation\">[</span>index2 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                data<span class=\"token punctuation\">[</span>index2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">[</span>index2 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span>index2 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">[</span>index2<span class=\"token punctuation\">]</span>\n                swap <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n\n        <span class=\"token keyword\">if</span> swap <span class=\"token operator\">==</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">break</span>\n    <span class=\"token keyword\">return</span> data</code></pre></div>\n<br>\n<h3 id=\"big-o-1\" style=\"position:relative;\"><a href=\"#big-o-1\" aria-label=\"big o 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Big-O</h3>\n<p><strong>시간 복잡도</strong>는 반복문을 살펴보면 <code class=\"language-text\">(n-1) + (n-2) + ... + 2 + 1</code>로 점점 감소한다. 이는 <code class=\"language-text\">n(n-1)/2</code>으로 <code class=\"language-text\">O(n^2)</code>이다.</p>\n<p><strong>공간 복잡도</strong>는 배열 내부에서 위치를 바꾸는 방식이기 때문에 선택 정렬과 동일하게 <code class=\"language-text\">O(n)</code>이다.</p>\n<br>\n<h2 id=\"insertion-sort\" style=\"position:relative;\"><a href=\"#insertion-sort\" aria-label=\"insertion sort permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Insertion Sort</h2>\n<p>삽입 정렬은 리스트의 모든 요소를 앞에서부터 차례대로 이미 정렬된 배열 부분과 비교하여, 자신의 위치를 찾아 삽입함으로써 정렬을 완성하는 알고리즘으로 선택 정렬과 유사하지만 더 효율적인 정렬 알고리즘으로 두 번째 인덱스부터 시작한다는 특이점이 있다.</p>\n<br>\n<h3 id=\"process\" style=\"position:relative;\"><a href=\"#process\" aria-label=\"process permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Process</h3>\n<ul>\n<li>삽입 정렬은 버블 정렬과 달리 두 번째 인덱스부터 시작한다.</li>\n<li>해당 인덱스(Key 값) 앞에 있는 데이터부터 비교하여 Key 값이 더 작으면 B 값을 뒤 인덱스로 복사 이를 Key값이 더 큰 데이터를 만날 때까지 반복, 그리고 큰 데이터를 만난 위치 바로 뒤에 Key 값을 이동</li>\n</ul>\n<br>\n<h3 id=\"python-code-2\" style=\"position:relative;\"><a href=\"#python-code-2\" aria-label=\"python code 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Python Code</h3>\n<blockquote>\n<p>나는 처음 삽입 정렬이라길래 특정 리스트에 삽입해서 하는 줄 알았다. Code1은 처음에 짠 코드</p>\n</blockquote>\n<p><strong>Code 1</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">insertion_sort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> ascending<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    temp <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> idx <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        temp<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> idx2 <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> temp<span class=\"token punctuation\">[</span>idx2<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> temp<span class=\"token punctuation\">[</span>idx2<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                temp<span class=\"token punctuation\">[</span>idx2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> temp<span class=\"token punctuation\">[</span>idx2<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">[</span>idx2<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> temp<span class=\"token punctuation\">[</span>idx2<span class=\"token punctuation\">]</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">break</span>\n    <span class=\"token keyword\">return</span> temp</code></pre></div>\n<p><strong>Code 2</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">insertion_sort</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> index <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> index2 <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> data<span class=\"token punctuation\">[</span>index2<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> data<span class=\"token punctuation\">[</span>index2 <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                data<span class=\"token punctuation\">[</span>index2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">[</span>index2 <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span>index2 <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">[</span>index2<span class=\"token punctuation\">]</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n              <span class=\"token keyword\">break</span>\n    <span class=\"token keyword\">return</span> data</code></pre></div>\n<br>\n<h3 id=\"big-o-2\" style=\"position:relative;\"><a href=\"#big-o-2\" aria-label=\"big o 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Big-O</h3>\n<p><strong>시간 복잡도</strong>는 최악의 경우 두 개의 반복문을 처음과 끝까지 돈다고 가정했을 때, 선택 정렬과 동일하게 <code class=\"language-text\">O(n^2)</code>이다. 효율적이라면서 선택 정렬과 동일하면 어쩌자는건가라고 생각할 수 있겠는데, 선택 정렬은 데이터가 어느 정도 정렬이 되어 있든 없든 항상 <code class=\"language-text\">O(n^2)</code>인데 반면에 삽입 정렬은 좌측에 정렬된 데이터가 어느 정도 순서를 유지하고 있기 때문에 중도에 멈추기도하여 <code class=\"language-text\">O(n^2)</code>보다는 항상 적은 시간 복잡도를 가진다.</p>\n<p><strong>공간 복잡도</strong>는 주어진 리스트에서 위치를 교환하기 때문에 <code class=\"language-text\">O(n)</code>이다. 하지만, <strong>Code 1</strong>의 경우에는 <code class=\"language-text\">temp</code>라는 리스트를 생성하여 그 안에서 정렬을 수행했기 때문에 <code class=\"language-text\">O(2n)</code>이다. (메모리를 2배나 차지한다.)</p>\n<br>\n<h2 id=\"quicksort\" style=\"position:relative;\"><a href=\"#quicksort\" aria-label=\"quicksort permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>QuickSort</h2>\n<p><strong>Quick Sort</strong> (퀵 정렬)은 <strong>불안정 정렬</strong>에 속하며, 다른 원소와의 비교만으로 정렬을 수행하는 <strong>비교 정렬</strong>에 속한다. 여기서 <strong>불안정 정렬</strong>이란, <strong>안정성</strong> (stable) 이라는 걸 먼저 이해해야하는데, 쉽게 설명하면 기존의 순서를 유지하는 정렬을 말한다. “응? 순서를 바꾸는게 정렬인데 기존의 순서를 유지한다는게 뭐지?”라고 생각할 수 있는데, 여기서의 순서는 동일한 값의 순서를 의미한다. 개발을 하다보면 리스트의 모든 값이 <code class=\"language-text\">unique</code> 하지 않기 때문에 중복된 값이 존재하기 마련인데, 이 때 중복된 값들 사이의 순서를 유지하는 것을 말한다.</p>\n<br>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>sorting<span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">></span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># 여기서 두 개의 5는 순서를 유지해야한다. 앞에 있는 5는 맨 처음 가장 앞에 있던 5여야한다는 걸 의미한다.</span></code></pre></div>\n<p>약간 간단하게 예를 생각하면, 우리가 입장을 하기 위해 줄을 섰는데 입장하시려면 나이 순서대로 입장 가능하세요. 라고 안내가 나오고 나이 순서대로 순서를 정하는데, 이 때 맨 앞에 있던 사람은 동일한 나이를 가진 사람들 사이에서도 맨 앞에 있어야한다는 것과 똑같다. (순서가 바뀌면 얼마나 억울하겠는가)</p>\n<p>또한, 퀵 정렬은 <strong>분할 정복</strong> 알고리즘의 하나로 평균적으로 매우 빠른 수행 속도를 자랑하는 정렬 방법을 이용한다. <strong>합병 정렬</strong> (merge sort)와 달리 리스트를 비균등하게 분할한다. 여기서 <strong>분할 정복</strong> (divide and conquer) 방법이란, 문제를 작은 2개의 문제로 분리하고 각각 해결한 다음, 결과를 모아서 원래의 문제를 해결하는 전략으로 대개 순환 호출을 이용하여 구현한다.</p>\n<br>\n<h3 id=\"process-1\" style=\"position:relative;\"><a href=\"#process-1\" aria-label=\"process 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Process</h3>\n<ol>\n<li><strong>피벗(pivot)</strong> 선택한다. 여기서 피벗이란 리스트 안에 한 요소를 선택한다. (분할 하기 전 기준점을 의미)</li>\n<li><strong>피벗</strong>을 기준으로 피벗보다 작은 요소들은 모두 피벗의 왼쪽으로 옮겨지고 피벗보다 큰 요소들은 모두 피벗의 오른쪽으로 옮겨진다. (피벗을 중심으로 왼쪽 : 피벗의 작은 요소들, 오른쪽 : 피벗보다 큰 요소들)</li>\n<li>피벗을 제외한 왼쪽과 오른쪽 리스트를 정렬하는데, 분할된 부분에 리스트에 대해 순환 호출을 이용하여 정렬을 반복한다.</li>\n<li>부분 리스트들이 더 이상 분할이 불가능할 때까지 반복한다.</li>\n</ol>\n<br>\n<h3 id=\"python-code-3\" style=\"position:relative;\"><a href=\"#python-code-3\" aria-label=\"python code 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Python Code</h3>\n<p><strong>1.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">qsort</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> data\n\n    left<span class=\"token punctuation\">,</span> pivot<span class=\"token punctuation\">,</span> right <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">for</span> value <span class=\"token keyword\">in</span> data<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> value <span class=\"token operator\">&lt;</span> data<span class=\"token punctuation\">:</span>\n            left<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            right<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> qsort<span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span>pivot<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> qsort<span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">)</span></code></pre></div>\n<p><strong>2.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">qsort</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> data\n\n    center <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span> <span class=\"token number\">2</span>\n    left<span class=\"token punctuation\">,</span> pivot<span class=\"token punctuation\">,</span> right <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">[</span>center<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">for</span> value <span class=\"token keyword\">in</span> data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>center<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> data<span class=\"token punctuation\">[</span>center<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> value <span class=\"token operator\">&lt;</span> pivot<span class=\"token punctuation\">:</span>\n            left<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            right<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> qsort<span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span>pivot<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> qsort<span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">)</span></code></pre></div>\n<br>\n<h3 id=\"big-o-3\" style=\"position:relative;\"><a href=\"#big-o-3\" aria-label=\"big o 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Big-O</h3>\n<p><strong>시간 복잡도</strong>는 <strong>Code 1</strong> 방식으로 진행하면, <code class=\"language-text\">O(n^2)</code>으로 계산된다. 그 이유는 초기 <code class=\"language-text\">pivot</code>을 중간이 아닌 맨 앞 원소로 잡아서 그런데, 이 경우에는 처음은 물론이고 파티션된 두 번째 정렬에서도 동일하게 맨 앞 원소부터 시작하는데, 시간 복잡도를 줄이기 위해서 <strong>Code 2</strong>에서는 가운데부터 시작하도록 수정하여 <code class=\"language-text\">O(n^2)</code> 보다 빠르게 한다. 이는 <code class=\"language-text\">O(nlogn)</code> 보다 더 빠르다고 알려져있다.</p>\n<p><strong>공간 복잡도</strong>는 순환 함수를 사용했지만, 배열의 공간 외에는 다른 공간을 더 크게 사용하진 않기 때문에 공간복잡도는 <code class=\"language-text\">O(n)</code> 이다.</p>\n<br>\n<h2 id=\"mergesort\" style=\"position:relative;\"><a href=\"#mergesort\" aria-label=\"mergesort permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MergeSort</h2>\n<p><strong>MergeSort</strong>은 병합 정렬이라 부르며, 분할 정복 방법을 사용하는 알고리즘이다. 여기서 분할 정복이 어떻게 쓰이냐면, 전체 데이터를 정확히 반으로 나누고 반으로 나눈 리스트로 또 반으로 나누어가는 과정을 반복하고 합치면서 정렬하는 알고리즘이다.</p>\n<p>가장 큰 특징은 Stable Sort로 <strong>안정 정렬</strong>에 속한다. 이것도 코드 짜기 나름인 것 같지만, 분할 정복 알고리즘을 사용하기 때문에 리스트가 분할되어 다시 병합되는 과정을 거치면서 각 원소의 순서를 유지한 채로 정렬이 된다.</p>\n<br>\n<h3 id=\"process-2\" style=\"position:relative;\"><a href=\"#process-2\" aria-label=\"process 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Process</h3>\n<p>재귀 용법을 활용한 정렬 알고리즘이다.</p>\n<ol>\n<li>리스트를 절반으로 잘라 비슷한 크기의 두 부분 리스트로 나눈다.</li>\n<li>각 부분 리스트를 재귀적으로 합병 정렬을 이용해 정렬한다.</li>\n<li>두 부분 리스트를 다시 하나의 정렬된 리스트로 합병한다.</li>\n</ol>\n<p>예시를 들어 과정을 보면 다음과 같음</p>\n<ol>\n<li><code class=\"language-text\">[1, 9, 3, 2]</code></li>\n<li><code class=\"language-text\">[1, 9], [3, 2]</code> : 리스트를 절반으로 잘라 비슷한 크기의 두 부분 리스트로 나눈다.</li>\n<li><code class=\"language-text\">[1], [9], [3], [2]</code> : 동일하게 두 부분으로 나눈다.</li>\n<li><code class=\"language-text\">[1, 9], [3], [2]</code> : <code class=\"language-text\">[1]</code>과 <code class=\"language-text\">[9]</code>를 비교하면서 병합</li>\n<li><code class=\"language-text\">[1, 9], [2, 3]</code> : <code class=\"language-text\">[3]</code>과 <code class=\"language-text\">[2]</code>를 비교하여 정렬 후 병합</li>\n<li><code class=\"language-text\">[1, 2, 3, 9]</code> : <code class=\"language-text\">[1, 9]</code>와 <code class=\"language-text\">[2, 3]</code>을 비교하며 정렬하여 병합</li>\n</ol>\n<br>\n<h3 id=\"python-code-4\" style=\"position:relative;\"><a href=\"#python-code-4\" aria-label=\"python code 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Python Code</h3>\n<p><strong>1.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    merged <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    left_point<span class=\"token punctuation\">,</span> right_point <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span>\n\n    <span class=\"token keyword\">while</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> left_point <span class=\"token keyword\">and</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> right_point<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> left<span class=\"token punctuation\">[</span>left_point<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> right<span class=\"token punctuation\">[</span>right_point<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            merged<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">[</span>right_point<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            right_point <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            merged<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">[</span>left_point<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            left_point <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\n    <span class=\"token keyword\">while</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> left_point<span class=\"token punctuation\">:</span>\n        merged<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">[</span>left_point<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        left_point <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\n    <span class=\"token keyword\">while</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> right_point<span class=\"token punctuation\">:</span>\n        merged<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">[</span>right_point<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        right_point <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\n    <span class=\"token keyword\">return</span> merged\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">mergesplit</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> data\n    medium <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    left <span class=\"token operator\">=</span> mergesplit<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>medium<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    right <span class=\"token operator\">=</span> mergesplit<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span>medium<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> merge<span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span></code></pre></div>\n<p><strong>2.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">merge_sort</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> data\n    center <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    left<span class=\"token punctuation\">,</span> right <span class=\"token operator\">=</span> merge_sort<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>center<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> merge_sort<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span>center<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> sort<span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span> left <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        result <span class=\"token operator\">+=</span> left\n    <span class=\"token keyword\">if</span> right <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        result <span class=\"token operator\">+=</span> right\n\n    <span class=\"token keyword\">for</span> ix1 <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        minimum <span class=\"token operator\">=</span> ix1\n        <span class=\"token keyword\">for</span> ix2 <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>ix1<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> result<span class=\"token punctuation\">[</span>ix2<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> result<span class=\"token punctuation\">[</span>minimum<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                minimum <span class=\"token operator\">=</span> ix2\n        result<span class=\"token punctuation\">[</span>ix1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">[</span>minimum<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> result<span class=\"token punctuation\">[</span>minimum<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">[</span>ix1<span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">return</span> result</code></pre></div>\n<br>\n<h3 id=\"big-o-4\" style=\"position:relative;\"><a href=\"#big-o-4\" aria-label=\"big o 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Big-O</h3>\n<p><strong>시간 복잡도</strong>는 평균 <code class=\"language-text\">O(nlogn)</code> 로 계산되고 최선, 최악 모두 동일하다. <strong>공간 복잡도</strong>는 <code class=\"language-text\">O(n)</code>이다. 공간복잡도는 생각보다 쉽게 계산되었는데, 원래 리스트를 절반 씩 분할하며 정렬하더라도 원래의 사이즈인 <code class=\"language-text\">n</code> 이하로 분할되고 유지되기 때문에 공간 복잡도는 <code class=\"language-text\">O(n)</code>이다.</p>\n<br>\n<h2 id=\"heapsort\" style=\"position:relative;\"><a href=\"#heapsort\" aria-label=\"heapsort permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HeapSort</h2>\n<p>완전 이진 트리를 기본으로 하는 힙(Heap) 자료 구조를 기반으로한 정렬 방식으로 여기서 완전 이진 트리란, 삽입할 때 왼쪽부터 차례대로 추가하는 이진 트리를 말한다. 힙 소트는 불안정 정렬에 속하는데 그 이유는 입력된 순서에 따라 왼쪽부터 차례대로 추가되지만, 순서가 바뀌게 되면서 자식 노드와 부모 노드의 위치로 인해 순서가 뒤죽박죽 된다.</p>\n<br>\n<h3 id=\"process-3\" style=\"position:relative;\"><a href=\"#process-3\" aria-label=\"process 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Process</h3>\n<ol>\n<li>최대 힙을 구성한다.</li>\n<li>최대 힙을 구성하면 힙의 루트에는 가장 큰 값이 존재하는데, 루트의 값을 마지막 요소와 바꾼 후 힙의 사이즈를 하나 씩 줄여 나간다. (여기서 제거한 루트의 가장 큰 값을 추가해가면서 정렬하는 방식이다.)</li>\n<li>힙의 사이즈가 1보다 크면 위 과정 반복</li>\n</ol>\n<br>\n<h3 id=\"python-code-5\" style=\"position:relative;\"><a href=\"#python-code-5\" aria-label=\"python code 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Python Code</h3>\n<p><strong>1.</strong> python 내장 모듈인 heapq를 이용한 방법</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> heapq\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">heap_sort</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    heap <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> e <span class=\"token keyword\">in</span> data<span class=\"token punctuation\">:</span>\n        heapq<span class=\"token punctuation\">.</span>heappush<span class=\"token punctuation\">(</span>heap<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span>\n    result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">while</span> heap<span class=\"token punctuation\">:</span>\n        result<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>heapq<span class=\"token punctuation\">.</span>heappop<span class=\"token punctuation\">(</span>heap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<br>\n<h3 id=\"big-o-5\" style=\"position:relative;\"><a href=\"#big-o-5\" aria-label=\"big o 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Big-O</h3>\n<p><strong>시간복잡도</strong>는 최선, 평균, 최악 모두 <code class=\"language-text\">O(nlogn)</code>이고, <strong>공간복잡도</strong>는 <code class=\"language-text\">O(n)</code>인 알고리즘에 속한다.</p>\n<br>\n<h3 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h3>\n<ul>\n<li><a href=\"https://gmlwjd9405.github.io/2018/05/10/algorithm-quick-sort.html\">퀵 정렬이란 - heejeong Kwon</a></li>\n</ul>\n<br>\n<h2 id=\"공간-복잡도\" style=\"position:relative;\"><a href=\"#%EA%B3%B5%EA%B0%84-%EB%B3%B5%EC%9E%A1%EB%8F%84\" aria-label=\"공간 복잡도 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>공간 복잡도</h2>\n<blockquote>\n<p>✔ <strong>좋은 알고리즘</strong>이란, 실행 시간이 짧고, 저장 공간도 적게 쓰는 알고리즘</p>\n</blockquote>\n<ul>\n<li>\n<p>알고리즘 계산 복잡도는 다음 두 가지 척도로 표현될 수 있음</p>\n<ul>\n<li>시간 복잡도 : 얼마나 빠르게 실행되는지</li>\n<li>공간 복잡도 : 얼마나 많은 저장 공간이 필요한지 (메모리, 저장 공간)</li>\n</ul>\n</li>\n<li>\n<p>일반적으로 모두 만족시키기가 어렵다.</p>\n<ul>\n<li>시간과 공간은 반비례 관계를 갖고 있다.\n(공간이 많다면, 시간은 짧아진다. → 공간 속에서 찾는 시간이 감소)</li>\n<li>최근에는 대용량 시스템이 보편화되면서, <strong>공간 복잡도</strong>보다는 <strong>시간 복잡도</strong>가 <strong>우선</strong></li>\n</ul>\n</li>\n</ul>\n<br>\n<blockquote>\n<p>✔ <strong>메모리</strong> 뿐만 아니라, <strong>저장 공간</strong>에 대한 제약도 공간 복잡도에 포함된다.</p>\n</blockquote>\n<ul>\n<li>\n<p>최근 알고리즘 문제에서는 <strong>시간 복잡도 제약</strong>이 많으나<strong>,</strong> 기존 알고리즘 문제는 <strong>공간 복잡도도 고려</strong>되어야 할 떄 만들어진 경우가 많아, 제약 사항이 있을 수 있다.</p>\n<ul>\n<li>최근 현업에서는 빅데이터를 다룰 때 저장 공간을 고려하여 구현하는 경우가 많다.</li>\n</ul>\n</li>\n<li>제약 예시</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">Complexity<span class=\"token punctuation\">:</span>\n\t<span class=\"token operator\">-</span> expected worst<span class=\"token operator\">-</span>case time complexity<span class=\"token punctuation\">:</span> O<span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">)</span>   <span class=\"token comment\"># 시간 복잡도</span>\n\t<span class=\"token operator\">-</span> expected worst<span class=\"token operator\">-</span>case space complexity<span class=\"token punctuation\">:</span> O<span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 공간 복잡도</span></code></pre></div>\n<br>\n<blockquote>\n<p>✔ 코드 실행 중 <strong>동적</strong>으로 할당되는 가변 공간에 대해 고려하는 것이 가장 중요</p>\n</blockquote>\n<ul>\n<li>프로그램 실행 및 완료하는데 필요한 저장공간의 양을 뜻함</li>\n<li>\n<p>총 필요 저장 공간</p>\n<ul>\n<li>고정 공간 (알고리즘과 무관한 공간) : 코드 저장 공간, 단순 변수 및 상수</li>\n<li>가변 공간 (알고리즘 실행과 관련있는 공간) : 실행 중 동적으로 필요한 공간</li>\n</ul>\n</li>\n</ul>\n<br>\n<h3 id=\"예제--n-팩토리얼-구하기\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%A0%9C--n-%ED%8C%A9%ED%86%A0%EB%A6%AC%EC%96%BC-%EA%B5%AC%ED%95%98%EA%B8%B0\" aria-label=\"예제  n 팩토리얼 구하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예제 : n! 팩토리얼 구하기</h3>\n<ul>\n<li><strong>fac 변수</strong>에 n만큼 곱하면서 index라는 변수는 계속 변했기 떄문에 결국 <strong>공간 복잡도는 O(1)</strong></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    fac <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">for</span> index <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        fac <span class=\"token operator\">=</span> fac <span class=\"token operator\">*</span> index\n    <span class=\"token keyword\">return</span> fac</code></pre></div>\n<br>\n<ul>\n<li><strong>재귀 용법</strong>을 사용하면서 factorial 함수를 실행할 때마다 1~n만큼 변수 n을 파라미터로 갖는 factorial(n)이 만들어지게 되면서, <strong>공간 복잡도는 O(n)</strong></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> n <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> n <span class=\"token operator\">*</span> factorial<span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span></code></pre></div>\n<br>\n<h1 id=\"재귀-용법-recursive-call-재귀-호출\" style=\"position:relative;\"><a href=\"#%EC%9E%AC%EA%B7%80-%EC%9A%A9%EB%B2%95-recursive-call-%EC%9E%AC%EA%B7%80-%ED%98%B8%EC%B6%9C\" aria-label=\"재귀 용법 recursive call 재귀 호출 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>재귀 용법 (Recursive call, 재귀 호출)</h1>\n<blockquote>\n<p>✨ 알아도 제대로 사용하기 어렵던 재귀 함수… 연습하자 !</p>\n</blockquote>\n<ul>\n<li>함수 안에서 동일한 함수를 호출하는 형태로 익숙해져야 함</li>\n<li>대표적인 예시로 팩토리얼(n!) 이 있다. (작성해보자 !)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">if</span> n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">return</span> n\n\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">return</span> n <span class=\"token operator\">*</span> factorial<span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"시간-복잡도와-공간-복잡도\" style=\"position:relative;\"><a href=\"#%EC%8B%9C%EA%B0%84-%EB%B3%B5%EC%9E%A1%EB%8F%84%EC%99%80-%EA%B3%B5%EA%B0%84-%EB%B3%B5%EC%9E%A1%EB%8F%84\" aria-label=\"시간 복잡도와 공간 복잡도 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>시간 복잡도와 공간 복잡도</h3>\n<ul>\n<li><code class=\"language-text\">factorial(n)</code>은 <strong>n-1</strong>번의 <code class=\"language-text\">factorial()</code> 함수를 호출하며 곱셈을 하는데, 결국 <strong>n-1</strong>번 반복문을 호출한 것과 동일하며, 지역 변수 <strong>n</strong>이 <strong>n-1</strong>번 생성된다.</li>\n<li>\n<p><strong>complexity</strong> <strong>:</strong> O(n)</p>\n<ul>\n<li><strong>time complexity :</strong> O(n-1) = O(n)</li>\n<li><strong>space complexity :</strong> O(n-1) = O(n)</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"연습\" style=\"position:relative;\"><a href=\"#%EC%97%B0%EC%8A%B5\" aria-label=\"연습 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>연습</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">n_sum</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">if</span> n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">return</span> n\n\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">return</span> n <span class=\"token operator\">+</span> n_sum<span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></code></pre></div>\n<br>\n<h1 id=\"동적-계획법-dynamic-programming\" style=\"position:relative;\"><a href=\"#%EB%8F%99%EC%A0%81-%EA%B3%84%ED%9A%8D%EB%B2%95-dynamic-programming\" aria-label=\"동적 계획법 dynamic programming permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>동적 계획법 (Dynamic Programming)</h1>\n<blockquote>\n<p>✔ 코드를 만들다보면, 함수 안에 너무 많은 값을 저장하는 것을 기피했는데, 동일한 과정이 반복된다면, 저장하여 속도를 높이는 것도 좋으니 적극 활용해보자 !</p>\n</blockquote>\n<ul>\n<li><strong>동적계획법 :</strong> 입력 크기가 작은 부분 문제들을 해결한 후 해를 활용해서 보다 큰 크기의 부분 문제를 해결, 최종적으로 전체 문제를 해결하는 알고리즘</li>\n<li><strong>상향식 접근법</strong>으로 <strong>최하위</strong>에서 시작하여, 최하위 해답을 구한 후 이를 토대로 상위 문제를 풀어가는 방식을 의미</li>\n<li><strong>Memoization 기법</strong>을 사용하는데, Memoization이란, 프로그램 실행 시 이전에 계산한 값을 저장하여, 다시 계산하지 않도록 하여 실행 속도를 빠르게 하는 기술, 결국 과거 계산한 값을 기록해 놓는 것으로 생각하면 된다.</li>\n<li>대표적인 예씨로, 피보나치 수열이 있다.</li>\n</ul>\n<br>\n<h1 id=\"분할-정복-divide-and-conquer\" style=\"position:relative;\"><a href=\"#%EB%B6%84%ED%95%A0-%EC%A0%95%EB%B3%B5-divide-and-conquer\" aria-label=\"분할 정복 divide and conquer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>분할 정복 (Divide and Conquer)</h1>\n<ul>\n<li><strong>분할 정복 :</strong> 문제를 나눌 수 없을 때까지 나누어서 각각을 풀면서 다시 합병하여 문제의 답을 얻는 알고리즘</li>\n<li>동적 계획법과 달리 <strong>하향식 접근법</strong>으로 상위의 해답을 구하기 위해 아래로 내려가면서 하위의 해답을 구하는 방식</li>\n<li>일반적으로 재귀함수로 구현하며, 문제를 잘게 쪼개며, 부분 문제는 서로 중복되지 않는데, 병합 정렬, 퀵 정렬과 유사하다.</li>\n</ul>\n<br>\n<h3 id=\"공통점과-차이점\" style=\"position:relative;\"><a href=\"#%EA%B3%B5%ED%86%B5%EC%A0%90%EA%B3%BC-%EC%B0%A8%EC%9D%B4%EC%A0%90\" aria-label=\"공통점과 차이점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>공통점과 차이점</h3>\n<ul>\n<li>\n<p>공통점</p>\n<ul>\n<li>문제를 잘게 쪼개서, 가장 작은 단위로 분할</li>\n</ul>\n</li>\n<li>\n<p>차이점</p>\n<ul>\n<li>동적 계획법</li>\n<li>부분 문제는 <strong>중복</strong>되어 <strong>재활용</strong>되어 상위 문제 해결시 사용된다.</li>\n<li><strong>Memoization 기법</strong>을 사용하는데, 부분 문제가 중복되어 재활용되기에 부분 문제를 저장해서 재활용하여 <strong>최적화</strong>에 이용한다.</li>\n<li>분할 정복</li>\n<li>부분 문제는 서로 <strong>중복되지 않음</strong></li>\n<li><strong>Memoization 기법</strong> 사용하지 않음</li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"동적-계획법-알고리즘-이해\" style=\"position:relative;\"><a href=\"#%EB%8F%99%EC%A0%81-%EA%B3%84%ED%9A%8D%EB%B2%95-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EC%9D%B4%ED%95%B4\" aria-label=\"동적 계획법 알고리즘 이해 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>동적 계획법 알고리즘 이해</h2>\n<ul>\n<li><strong>피보나치 수열</strong> : n을 입력받아 아래 공식에 의해 계산이 되는데, 여기서 F<em>(n_1) 과 F</em>(n-2) 을 <strong>Memoization 기법</strong>을 사용하여 저장하여 재활용한다면 <strong>최적화</strong>가 가능하다.</li>\n</ul>\n<p align=\"center\">\n  <img width=\"460\" height=\"180\" src=\"https://user-images.githubusercontent.com/52126612/83019044-4057f700-a061-11ea-8d31-14dfad6c22aa.png\">\n</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># fibonachi (recursive call)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">fibonachi</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> n\n    <span class=\"token keyword\">return</span> fibonachi<span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> fibonachi<span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># fibonachi memoization</span>\n<span class=\"token comment\"># my code</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">fibonachi_memo</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    fibonachi_db <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span> <span class=\"token keyword\">if</span> ix <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token keyword\">else</span> <span class=\"token number\">0</span> <span class=\"token keyword\">for</span> ix <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">for</span> ix <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        fibonachi_db<span class=\"token punctuation\">[</span>ix<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> fibonachi_db<span class=\"token punctuation\">[</span>ix<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> fibonachi_db<span class=\"token punctuation\">[</span>ix<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">return</span> fibonachi_db<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># study code</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">fibo_dp</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cache <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">0</span> <span class=\"token keyword\">for</span> index <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    cache<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    cache<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\n    <span class=\"token keyword\">for</span> index <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> num <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        cache<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> cache<span class=\"token punctuation\">[</span>index <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> cache<span class=\"token punctuation\">[</span>index <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">return</span> cache<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span></code></pre></div>\n<br>\n<h1 id=\"깊이-우선-탐색dfs-과-너비-우선-탐색bfs\" style=\"position:relative;\"><a href=\"#%EA%B9%8A%EC%9D%B4-%EC%9A%B0%EC%84%A0-%ED%83%90%EC%83%89dfs-%EA%B3%BC-%EB%84%88%EB%B9%84-%EC%9A%B0%EC%84%A0-%ED%83%90%EC%83%89bfs\" aria-label=\"깊이 우선 탐색dfs 과 너비 우선 탐색bfs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>깊이 우선 탐색(DFS) 과 너비 우선 탐색(BFS)</h1>\n<blockquote>\n<p>✔ 예제를 찾아서 복습할 필요성이 있음. 꼭 한번 복습하자 !</p>\n</blockquote>\n<ul>\n<li>대표적인 <strong>그래프 탐색</strong> 알고리즘</li>\n</ul>\n<p align=\"center\">\n  <img width=\"460\" height=\"250\" src=\"https://user-images.githubusercontent.com/52126612/83351585-31828480-a380-11ea-9c7a-693cd2af0d34.png\">\n</p>\n<ul>\n<li>\n<p><strong>너비 우선 탐색 (Breadth-First Search) :</strong> 정점들과 같은 레벨에 있는 노드 (형제 노드)를 먼저 탐색하는 방식</p>\n<ul>\n<li>A - B - C - D - G - H - I - E - F - J</li>\n<li>한 단계 씩 내려가며 해당 노드와 <strong>같은 레벨</strong>에 있는 노드를 먼저 순회하며 탐색</li>\n</ul>\n</li>\n<li>\n<p><strong>깊이 우선 탐색 (Depth-First Search) :</strong> 정점의 자식들을 먼저 탐색하는 방식</p>\n<ul>\n<li>A - B - D - E - F - C - G - H - I - J</li>\n<li>한 노드의 자식을 타고 <strong>끝까지 순회</strong>한 후 다시 돌아와 다른 형제들의 자식을 타고 내려가며 탐색</li>\n</ul>\n</li>\n</ul>\n<br>\n<h3 id=\"파이썬으로-그래프를-표현하는-방법\" style=\"position:relative;\"><a href=\"#%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9C%BC%EB%A1%9C-%EA%B7%B8%EB%9E%98%ED%94%84%EB%A5%BC-%ED%91%9C%ED%98%84%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-label=\"파이썬으로 그래프를 표현하는 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>파이썬으로 그래프를 표현하는 방법</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">graph <span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\ngraph<span class=\"token punctuation\">[</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">]</span>\ngraph<span class=\"token punctuation\">[</span><span class=\"token string\">'B'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'D'</span><span class=\"token punctuation\">]</span>\ngraph<span class=\"token punctuation\">[</span><span class=\"token string\">'C'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'G'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'H'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'I'</span><span class=\"token punctuation\">]</span>\ngraph<span class=\"token punctuation\">[</span><span class=\"token string\">'D'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'E'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'F'</span><span class=\"token punctuation\">]</span>\ngraph<span class=\"token punctuation\">[</span><span class=\"token string\">'E'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'D'</span><span class=\"token punctuation\">]</span>\ngraph<span class=\"token punctuation\">[</span><span class=\"token string\">'F'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'D'</span><span class=\"token punctuation\">]</span>\ngraph<span class=\"token punctuation\">[</span><span class=\"token string\">'G'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'C'</span><span class=\"token punctuation\">]</span>\ngraph<span class=\"token punctuation\">[</span><span class=\"token string\">'H'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'C'</span><span class=\"token punctuation\">]</span>\ngraph<span class=\"token punctuation\">[</span><span class=\"token string\">'I'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'C'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'J'</span><span class=\"token punctuation\">]</span>\ngraph<span class=\"token punctuation\">[</span><span class=\"token string\">'J'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'I'</span><span class=\"token punctuation\">]</span></code></pre></div>\n<br>\n<h2 id=\"깊이-우선-탐색-dfs--depth-first-search-구현\" style=\"position:relative;\"><a href=\"#%EA%B9%8A%EC%9D%B4-%EC%9A%B0%EC%84%A0-%ED%83%90%EC%83%89-dfs--depth-first-search-%EA%B5%AC%ED%98%84\" aria-label=\"깊이 우선 탐색 dfs  depth first search 구현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>깊이 우선 탐색 (DFS : Depth-First Search) 구현</h2>\n<blockquote>\n<p>✔ <strong>DFS</strong>는 <strong>스택과 큐</strong>를 활용하는 반면, <strong>BFS</strong>는 <strong>두 개의 큐</strong>를 활용하는 점이 차이점</p>\n</blockquote>\n<ul>\n<li>자료 구조 중 <strong>스택과 큐</strong>를 활용하여 구현</li>\n<li>큐와 스택 구현은 기본 내장 라이브러리를 활용할 수 있지만, 여기서는 간단하게 리스트를 활용한다.</li>\n</ul>\n<h3 id=\"일반적인-dfs-시간-복잡도\" style=\"position:relative;\"><a href=\"#%EC%9D%BC%EB%B0%98%EC%A0%81%EC%9D%B8-dfs-%EC%8B%9C%EA%B0%84-%EB%B3%B5%EC%9E%A1%EB%8F%84\" aria-label=\"일반적인 dfs 시간 복잡도 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>일반적인 DFS 시간 복잡도</h3>\n<ul>\n<li>노드 수: V / 간선 수: E</li>\n<li>아래 코드에서는 while need_visit 은 V + E 번 만큼 수행함</li>\n<li>시간 복잡도: O(V + E)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># study code</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">,</span> start_node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    visited<span class=\"token punctuation\">,</span> need_visit <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>start_node<span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">while</span> need_visit<span class=\"token punctuation\">:</span>\n        node <span class=\"token operator\">=</span> need_visit<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> node <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> visited<span class=\"token punctuation\">:</span>\n            visited<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span>\n            need_visit<span class=\"token punctuation\">.</span>extend<span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> visited</code></pre></div>\n<br>\n<h2 id=\"너비-우선-탐색-bfs--breadth-first-search-구현\" style=\"position:relative;\"><a href=\"#%EB%84%88%EB%B9%84-%EC%9A%B0%EC%84%A0-%ED%83%90%EC%83%89-bfs--breadth-first-search-%EA%B5%AC%ED%98%84\" aria-label=\"너비 우선 탐색 bfs  breadth first search 구현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>너비 우선 탐색 (BFS : Breadth-First Search) 구현</h2>\n<ul>\n<li>자료 구조 중 <strong>큐</strong>를 활용함</li>\n<li>\n<p>visited, need_visit를 큐를 활용하여 만들어 활용</p>\n<ul>\n<li>간단히 파이썬 리스트 활용</li>\n</ul>\n</li>\n</ul>\n<p align=\"center\">\n  <img width=\"460\" height=\"250\" src=\"https://user-images.githubusercontent.com/52126612/83351586-32b3b180-a380-11ea-9c91-714513be4d39.png\">\n</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># study code</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">,</span> start_node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    visited <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    need_visit <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    need_visit<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>start_node<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">while</span> need_visit<span class=\"token punctuation\">:</span>\n        node <span class=\"token operator\">=</span> need_visit<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> node <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> visited<span class=\"token punctuation\">:</span>\n            visited<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span>\n            need_visit<span class=\"token punctuation\">.</span>extend<span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> visited</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># my code (using queue)</span>\n<span class=\"token keyword\">import</span> queue\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">,</span> start_node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    visited<span class=\"token punctuation\">,</span> need_visit <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> queue<span class=\"token punctuation\">.</span>Queue<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    need_visit<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span>start_node<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">while</span> need_visit<span class=\"token punctuation\">.</span>qsize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        node <span class=\"token operator\">=</span> need_visit<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> node <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> visited<span class=\"token punctuation\">:</span>\n            visited<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">for</span> children <span class=\"token keyword\">in</span> graph<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                need_visit<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> visited</code></pre></div>\n<br>\n<h1 id=\"graph\" style=\"position:relative;\"><a href=\"#graph\" aria-label=\"graph permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Graph</h1>\n<blockquote>\n<p>✔ Network 그래프만 알았는데, 정말 다양한 그래프가 있다. 기억하고 어디에 사용할 수 있을지 생각하며 기억하자 !</p>\n</blockquote>\n<ul>\n<li>실제 세계의 현상이나 사물을 정점(Vertex) 또는 노드(Node)와 간선(Edge)으로 표현한 것이다.</li>\n</ul>\n<br>\n<h3 id=\"용어정리\" style=\"position:relative;\"><a href=\"#%EC%9A%A9%EC%96%B4%EC%A0%95%EB%A6%AC\" aria-label=\"용어정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>용어정리</h3>\n<ul>\n<li><strong>노드 (Node) :</strong> 위치를 말하며, 정점 (Vertex)라고도 부른다.</li>\n<li><strong>간선 (Edge) :</strong> 위치 간의 관계를 나타내는 선으로 노드를 연결한 선으로 보면 되며 Link 또는 Branch 라고 부른다.</li>\n<li><strong>인접 정점 (Adjacent Vertex) :</strong> 간선으로 직접 연결된 정점 또는 노드</li>\n<li>\n<p><strong>참고</strong></p>\n<ul>\n<li><strong>Degree :</strong> 하나의 정점에 인접한 정점의 수</li>\n<li><strong>In-Degree :</strong> 방향 그래프에서 외부에서 오는 간선의 수</li>\n<li><strong>Out-Degree</strong> : 방향 그래프에서 외부로 향하는 간선의 수</li>\n<li><strong>Path Length :</strong> 경로를 구성하기 위해 사용된 간선의 수</li>\n<li><strong>Simple Path :</strong> 처음 정점과 끝 정점을 제외하고 중복된 정점이 없는 경로</li>\n<li><strong>Cycle :</strong> 단순 경로의 시작 정점과 종료 정점이 동일한 경우</li>\n</ul>\n</li>\n</ul>\n<br>\n<h3 id=\"그래프-종류\" style=\"position:relative;\"><a href=\"#%EA%B7%B8%EB%9E%98%ED%94%84-%EC%A2%85%EB%A5%98\" aria-label=\"그래프 종류 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>그래프 종류</h3>\n<h4 id=\"1-무방향-그래프-undirected-graph\" style=\"position:relative;\"><a href=\"#1-%EB%AC%B4%EB%B0%A9%ED%96%A5-%EA%B7%B8%EB%9E%98%ED%94%84-undirected-graph\" aria-label=\"1 무방향 그래프 undirected graph permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 무방향 그래프 (Undirected Graph)</h4>\n<ul>\n<li>방향이 없는 그래프로, 간선을 통해 노드는 양방향으로 갈 수 있음</li>\n<li>보통 노드가 A, B가 연결되어 있다고 하면, <strong>(A, B)</strong> 또는 <strong>(B, A)</strong> 로 표기</li>\n</ul>\n<h4 id=\"2-방향-그래프-directed-graph\" style=\"position:relative;\"><a href=\"#2-%EB%B0%A9%ED%96%A5-%EA%B7%B8%EB%9E%98%ED%94%84-directed-graph\" aria-label=\"2 방향 그래프 directed graph permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 방향 그래프 (Directed Graph)</h4>\n<ul>\n<li>간선에 방향이 있는 그래프로 방향에 따라 갈 수 있는 노드가 다르다.</li>\n<li><strong>&#x3C;A, B></strong> 는 <strong>A → B</strong> 를 의미하며, <strong>&#x3C;B, A></strong>와는 다른 의미이다.</li>\n</ul>\n<h4 id=\"3-가중치-그래프-weighted-graph-또는-네트워크-network\" style=\"position:relative;\"><a href=\"#3-%EA%B0%80%EC%A4%91%EC%B9%98-%EA%B7%B8%EB%9E%98%ED%94%84-weighted-graph-%EB%98%90%EB%8A%94-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-network\" aria-label=\"3 가중치 그래프 weighted graph 또는 네트워크 network permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 가중치 그래프 (Weighted Graph) 또는 네트워크 (Network)</h4>\n<ul>\n<li>간선 사이에 가중치가 할당된 그래프</li>\n<li>보통 <strong>(A, B)</strong> 가 4번 정도 반복된다면, <strong>(A, B)</strong> 사이에는 <strong>4</strong>의 가중치가 있다고 보면 된다.</li>\n</ul>\n<h4 id=\"4-연결-그래프-connected-graph-와-비연결-그래프-disconnected-graph\" style=\"position:relative;\"><a href=\"#4-%EC%97%B0%EA%B2%B0-%EA%B7%B8%EB%9E%98%ED%94%84-connected-graph-%EC%99%80-%EB%B9%84%EC%97%B0%EA%B2%B0-%EA%B7%B8%EB%9E%98%ED%94%84-disconnected-graph\" aria-label=\"4 연결 그래프 connected graph 와 비연결 그래프 disconnected graph permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 연결 그래프 (Connected Graph) 와 비연결 그래프 (Disconnected Graph)</h4>\n<ul>\n<li>연결 그래프 : 무방향 그래프에 있는 모든 노드에 대해 <strong>항상</strong> 경로가 존재하는 경우</li>\n<li>비연결 그래프 : 무방향 그래프에서 특정 노드에 대해 경로가 존재하지 <strong>않는</strong> 경우</li>\n</ul>\n<h4 id=\"5-사이클-cycle-과-비순환-그래프-acyclic-graph\" style=\"position:relative;\"><a href=\"#5-%EC%82%AC%EC%9D%B4%ED%81%B4-cycle-%EA%B3%BC-%EB%B9%84%EC%88%9C%ED%99%98-%EA%B7%B8%EB%9E%98%ED%94%84-acyclic-graph\" aria-label=\"5 사이클 cycle 과 비순환 그래프 acyclic graph permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. 사이클 (Cycle) 과 비순환 그래프 (Acyclic Graph)</h4>\n<ul>\n<li>사이클 ; 단순 경로의 시작 노드와 종료 노드가 동일한 경우</li>\n<li>비순환 그래프 : 사이클이 존재하지 않는 그래프</li>\n</ul>\n<h4 id=\"6-완전-그래프-complete-graph\" style=\"position:relative;\"><a href=\"#6-%EC%99%84%EC%A0%84-%EA%B7%B8%EB%9E%98%ED%94%84-complete-graph\" aria-label=\"6 완전 그래프 complete graph permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. 완전 그래프 (Complete Graph)</h4>\n<ul>\n<li>그래프의 모든 노드가 서로 연결되어 있는 그래프</li>\n</ul>\n<br>\n<h2 id=\"그래프와-트리의-차이\" style=\"position:relative;\"><a href=\"#%EA%B7%B8%EB%9E%98%ED%94%84%EC%99%80-%ED%8A%B8%EB%A6%AC%EC%9D%98-%EC%B0%A8%EC%9D%B4\" aria-label=\"그래프와 트리의 차이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>그래프와 트리의 차이</h2>\n<blockquote>\n<p>크게 보면, 부모/자식 관계를 가진 트리인지 아닌 그래프인지 구분하면 편해보임</p>\n</blockquote>\n<ul>\n<li>트리는 그래프 중 속한 한 종류로 보면 이해하기 쉽지만, 차이점이 분명히 존재함</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">제목</th>\n<th align=\"center\">내용</th>\n<th align=\"center\">설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">정의</td>\n<td align=\"center\">노드와 노드를 연결하는 간선으로 표현되는 자료 구조</td>\n<td align=\"center\">그래프의 한 종류, 방향성이 있는 비순환 그래프</td>\n</tr>\n<tr>\n<td align=\"center\">방향성</td>\n<td align=\"center\">방향 그래프, 무방향 그래프 둘다 존재</td>\n<td align=\"center\">방향그래프만 존재</td>\n</tr>\n<tr>\n<td align=\"center\">사이클</td>\n<td align=\"center\">사이클 가능함, 순환 및 비순환 그래프 모두 존재</td>\n<td align=\"center\">사이클이 존재하지 않는 비순환 그래프</td>\n</tr>\n<tr>\n<td align=\"center\">루트 노드</td>\n<td align=\"center\">루트 노드 존재하지 않음</td>\n<td align=\"center\">루트 노드 존재함</td>\n</tr>\n<tr>\n<td align=\"center\">부모/자식 관계</td>\n<td align=\"center\">부모/자식 개념이 없음</td>\n<td align=\"center\">부모/자식 관계가 존재함</td>\n</tr>\n</tbody>\n</table>\n<br>\n<h1 id=\"최단-경로-알고리즘\" style=\"position:relative;\"><a href=\"#%EC%B5%9C%EB%8B%A8-%EA%B2%BD%EB%A1%9C-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\" aria-label=\"최단 경로 알고리즘 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>최단 경로 알고리즘</h1>\n<blockquote>\n<p>💥 이번부터는 이론만 이해하지말고 코드도 다시 한번 확인하며 활용도 할 수 있도록 시간을 들여서 공부할 것 !</p>\n</blockquote>\n<ul>\n<li>최단 경로 문제란, 말그대로 두 노드를 잇는 <strong>가장 짧은 경로</strong>를 찾는 문제이다.</li>\n<li>하지만, 가중치 그래프 (Weighted Graph) 에서는 간선 (Edge) 의 <strong>가중치 합이 최소</strong>가 되도록 찾는 것으로 목적이 바뀐다.</li>\n</ul>\n<h3 id=\"최단-경로-문제-종류\" style=\"position:relative;\"><a href=\"#%EC%B5%9C%EB%8B%A8-%EA%B2%BD%EB%A1%9C-%EB%AC%B8%EC%A0%9C-%EC%A2%85%EB%A5%98\" aria-label=\"최단 경로 문제 종류 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>최단 경로 문제 종류</h3>\n<ol>\n<li>\n<p>단일 출발 및 단일 도착 최단 경로 문제 (Single-source and single-destination shortest path problem)</p>\n<ul>\n<li>그래프 내 특정 노드 <strong>u</strong> 에서 출발하여, 또 다른 특정 노드 <strong>v</strong> 에 도착하는 가장 짧은 경로를 찾는 문제</li>\n</ul>\n</li>\n<li>\n<p>단일 출발 최단 경로 문제 (single-source shortest path problem)</p>\n<ul>\n<li>그래프 내 특정 노드 <strong>u</strong> 와 그래프 내 다른 모든 노드 각각의 가장 짧은 경로를 찾는 문제</li>\n</ul>\n</li>\n<li>\n<p>전체 쌍 (all-pair) 최단 경로</p>\n<ul>\n<li>그래프 내 모든 노드 쌍 <strong>(u, v)</strong>에 대한 최단 경로를 찾는 문제</li>\n</ul>\n</li>\n</ol>\n<br>\n<h2 id=\"최단-경로-알고리즘---다익스트라-알고리즘\" style=\"position:relative;\"><a href=\"#%EC%B5%9C%EB%8B%A8-%EA%B2%BD%EB%A1%9C-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98---%EB%8B%A4%EC%9D%B5%EC%8A%A4%ED%8A%B8%EB%9D%BC-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\" aria-label=\"최단 경로 알고리즘   다익스트라 알고리즘 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>최단 경로 알고리즘 - 다익스트라 알고리즘</h2>\n<ul>\n<li>다익스트라 알고리즘은 위의 최단 경로 문제 종류 중 2번에 해당하며, 하나의 정점에서 다른 모든 정점 간의 <strong>각각 가장 짧은 거리</strong>를 구하는 문제이다.</li>\n</ul>\n<h3 id=\"알고리즘-개요\" style=\"position:relative;\"><a href=\"#%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EA%B0%9C%EC%9A%94\" aria-label=\"알고리즘 개요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>알고리즘 개요</h3>\n<ul>\n<li>첫 정점을 기준으로 연결되어 있는 정점들을 추가해 가며, 최단 거리를 갱신하는 방법</li>\n<li>\n<p>다익스트라 알고리즘은 너비 우선 탐색(BFS)와 유사하다.</p>\n<ul>\n<li>첫 정점부터 각 노드 간의 거리를 저장하는 배열을 만든 후, 첫 정점의 인접 노드 간의 거리부터 먼저 계산하면서, 첫 정점부터 해당 노드간의 가장 짧은 거리를 해당 배열에 업데이트</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"우선순위-큐를-활용한-다익스트라-알고리즘\" style=\"position:relative;\"><a href=\"#%EC%9A%B0%EC%84%A0%EC%88%9C%EC%9C%84-%ED%81%90%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-%EB%8B%A4%EC%9D%B5%EC%8A%A4%ED%8A%B8%EB%9D%BC-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\" aria-label=\"우선순위 큐를 활용한 다익스트라 알고리즘 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>우선순위 큐를 활용한 다익스트라 알고리즘</h3>\n<ul>\n<li>우선순위 큐는 MinHeap 방식을 활용해서, 현재 가장 짧은 거리를 가진 노드 정보를 먼저 꺼내게 됨</li>\n<li>\n<p>첫 정점을 기준으로 배열을 선언하여 첫 정점에서 각 정점까지의 거리를 저장</p>\n<ul>\n<li>초기에는 첫 정점의 거리는 0, 나머지는 무한대로 저장함 (inf 라고 표현함)</li>\n<li>우선순위 큐에 (첫 정점, 거리 0) 만 먼저 넣음</li>\n</ul>\n</li>\n<li>\n<p>우선순위 큐에서 노드를 꺼냄</p>\n<ul>\n<li>처음에는 첫 정점만 저장되어 있으므로, 첫 정점이 꺼내짐</li>\n<li>첫 정점에 인접한 노드들 각각에 대해, 첫 정점에서 각 노드로 가는 거리와 현재 배열에 저장되어 있는 첫 정점에서 각 정점까지의 거리를 비교한다.</li>\n<li>배열에 저장되어 있는 거리보다, 첫 정점에서 해당 노드로 가는 거리가 더 짧을 경우, 배열에 해당 노드의 거리를 업데이트한다.</li>\n<li>배열에 해당 노드의 거리가 업데이트된 경우, 우선순위 큐에 넣는다.</li>\n<li>결과적으로 너비 우선 탐색 방식과 유사하게, 첫 정점에 인접한 노드들을 순차적으로 방문하게 됨</li>\n<li>만약 배열에 기록된 현재까지 발견된 가장 짧은 거리보다, 더 긴 거리(루트)를 가진 (노드, 거리)의 경우에는 해당 노드와 인접한 노드간의 거리 계산을 하지 않음</li>\n</ul>\n</li>\n<li><strong>2</strong>번의 과정을 우선순위 큐에 꺼낼 노드가 없을 때까지 반복한다.</li>\n</ul>\n<br>\n<h2 id=\"구현-과정\" style=\"position:relative;\"><a href=\"#%EA%B5%AC%ED%98%84-%EA%B3%BC%EC%A0%95\" aria-label=\"구현 과정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>구현 과정</h2>\n<p>1단계: 초기화</p>\n<ul>\n<li>\n<p>첫 정점을 기준으로 배열을 선언하여 첫 정점에서 각 정점까지의 거리를 저장</p>\n<ul>\n<li>초기에는 첫 정점의 거리는 0, 나머지는 무한대로 저장함 (inf 라고 표현함)</li>\n<li>우선순위 큐에 (첫 정점, 거리 0) 만 먼저 넣음</li>\n</ul>\n</li>\n</ul>\n<p align=\"center\">\n  <img width=\"700\" height=\"105\" src=\"https://www.fun-coding.org/00_Images/dijkstra_initial.png\">\n</p>\n<p>2단계: 우선순위 큐에서 추출한 (A, 0) [노드, 첫 노드와의 거리] 를 기반으로 인접한 노드와의 거리 계산</p>\n<ul>\n<li>\n<p>우선순위 큐에서 노드를 꺼냄</p>\n<ul>\n<li>처음에는 첫 정점만 저장되어 있으므로, 첫 정점이 꺼내짐</li>\n<li>첫 정점에 인접한 노드들 각각에 대해, 첫 정점에서 각 노드로 가는 거리와 현재 배열에 저장되어 있는 첫 정점에서 각 정점까지의 거리를 비교한다.</li>\n<li>배열에 저장되어 있는 거리보다, 첫 정점에서 해당 노드로 가는 거리가 더 짧을 경우, 배열에 해당 노드의 거리를 업데이트한다.</li>\n<li>배열에 해당 노드의 거리가 업데이트된 경우, 우선순위 큐에 넣는다.</li>\n<li>결과적으로 너비 우선 탐색 방식과 유사하게, 첫 정점에 인접한 노드들을 순차적으로 방문하게 됨</li>\n<li>만약 배열에 기록된 현재까지 발견된 가장 짧은 거리보다, 더 긴 거리(루트)를 가진 (노드, 거리)의 경우에는 해당 노드와 인접한 노드간의 거리 계산을 하지 않음</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>✔ 이전 표에서 보듯이, 첫 정점 이외에 모두 inf 였었으므로, 첫 정점에 인접한 노드들은 모두 우선순위 큐에 들어가고, 첫 정점과 인접한 노드간의 거리가 배열에 업데이트됨</p>\n</blockquote>\n<p align=\"center\">\n  <img width=\"700\" height=\"220\" src=\"https://www.fun-coding.org/00_Images/dijkstra_1st.png\">\n</p>\n<p>3단계: 우선순위 큐에서 (C, 1) [노드, 첫 노드와의 거리] 를 기반으로 인접한 노드와의 거리 계산</p>\n<ul>\n<li>우선순위 큐가 MinHeap(최소 힙) 방식이므로, 위 표에서 넣어진 (C, 1), (D, 2), (B, 8) 중 (C, 1) 이 먼저 추출됨 (pop)</li>\n<li>\n<p>위 표에서 보듯이 1단계까지의 A - B 최단 거리는 8 인 상황임</p>\n<ul>\n<li>A - C 까지의 거리는 1, C 에 인접한 B, D에서 C - B는 5, 즉 A - C - B 는 1 + 5 = 6 이므로, A - B 최단 거리 8보다 더 작은 거리를 발견, 이를 배열에 업데이트</li>\n<li>배열에 업데이트했으므로 B, 6 (즉 A에서 B까지의 현재까지 발견한 최단 거리) 값이 우선순위 큐에 넣어짐</li>\n<li>C - D 의 거리는 2, 즉 A - C - D 는 1 + 2 = 3 이므로, A - D의 현재 최단 거리인 2 보다 긴 거리, 그래서 D 의 거리는 업데이트되지 않음</li>\n</ul>\n</li>\n</ul>\n<p align=\"center\">\n  <img width=\"700\" height=\"60\" src=\"https://www.fun-coding.org/00_Images/dijkstra_2nd.png\">\n</p>\n<p>4단계: 우선순위 큐에서 (D, 2) [노드, 첫 노드와의 거리] 를 기반으로 인접한 노드와의 거리 계산</p>\n<ul>\n<li>\n<p>지금까지 접근하지 못했던 E와 F 거리가 계산됨</p>\n<ul>\n<li>A - D 까지의 거리인 2 에 D - E 가 3 이므로 이를 더해서 E, 5</li>\n<li>A - D 까지의 거리인 2 에 D - F 가 5 이므로 이를 더해서 F, 7</li>\n</ul>\n</li>\n</ul>\n<p align=\"center\">\n  <img width=\"700\" height=\"125\" src=\"https://www.fun-coding.org/00_Images/dijkstra_3rd.png\">\n</p>\n<p>5단계: 우선순위 큐에서 (E, 5) [노드, 첫 노드와의 거리] 를 기반으로 인접한 노드와의 거리 계산</p>\n<ul>\n<li>\n<p>A - E 거리가 5인 상태에서, E에 인접한 F를 가는 거리는 1, 즉 A - E - F 는 5 + 1 = 6, 현재 배열에 A - F 최단거리가 7로 기록되어 있으므로, F, 6 으로 업데이트</p>\n<ul>\n<li>우선순위 큐에 F, 6 추가</li>\n</ul>\n</li>\n</ul>\n<p align=\"center\">\n  <img width=\"700\" height=\"50\" src=\"https://www.fun-coding.org/00_Images/dijkstra_3-2th.png\">\n</p>\n<p>6단계: 우선순위 큐에서 (B, 6), (F, 6) 를 순차적으로 추출해 각 노드 기반으로 인접한 노드와의 거리 계산</p>\n<ul>\n<li>예제의 방향 그래프에서 B 노드는 다른 노드로 가는 루트가 없음</li>\n<li>F 노드는 A 노드로 가는 루트가 있으나, 현재 A - A 가 0 인 반면에 A - F - A 는 6 + 5 = 11, 즉 더 긴 거리이므로 업데이트되지 않음</li>\n</ul>\n<p align=\"center\">\n  <img width=\"700\" height=\"125\" src=\"https://www.fun-coding.org/00_Images/dijkstra_4th.png\">\n</p>\n<p>7단계: 우선순위 큐에서 (F, 7), (B, 8) 를 순차적으로 추출해 각 노드 기반으로 인접한 노드와의 거리 계산</p>\n<ul>\n<li>\n<p>A - F 로 가는 하나의 루트의 거리가 7 인 상황이나, 배열에서 이미 A - F 로 가는 현재의 최단 거리가 6인 루트의 값이 있는 상황이므로, 더 긴거리인 F, 7 루트 기반 인접 노드까지의 거리는 계산할 필요가 없음, 그래서 계산없이 스킵함</p>\n<ul>\n<li>계산하더라도 A - F 거리가 6인 루트보다 무조건 더 긴거리가 나올 수 밖에 없음</li>\n</ul>\n</li>\n<li>B, 8 도 현재 A - B 거리가 6이므로, 인접 노드 거리 계산이 필요 없음.</li>\n</ul>\n<h3 id=\"우선순위-큐-사용-장점\" style=\"position:relative;\"><a href=\"#%EC%9A%B0%EC%84%A0%EC%88%9C%EC%9C%84-%ED%81%90-%EC%82%AC%EC%9A%A9-%EC%9E%A5%EC%A0%90\" aria-label=\"우선순위 큐 사용 장점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>우선순위 큐 사용 장점</h3>\n<blockquote>\n<p>✔ 우선순위 큐를 사용하면 불필요한 계산 과정을 줄일 수 있음</p>\n</blockquote>\n<ul>\n<li>지금까지 발견된 가장 짧은 거리의 노드에 대해서 먼저 계산</li>\n<li>더 긴 거리로 계산된 루트에 대해서는 계산을 스킵할 수 있음</li>\n</ul>\n<br>\n<h2 id=\"파이썬에서의-구현\" style=\"position:relative;\"><a href=\"#%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%97%90%EC%84%9C%EC%9D%98-%EA%B5%AC%ED%98%84\" aria-label=\"파이썬에서의 구현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>파이썬에서의 구현</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">mygraph <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'A'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'B'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'D'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'B'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'C'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'B'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'D'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'D'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'E'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'F'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'E'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'F'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'F'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p align=\"center\">\n  <img width=\"400\" height=\"400\" src=\"https://www.fun-coding.org/00_Images/dijkstra.png\">\n</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> heapq\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">dijkstra</span><span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    distances <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>node<span class=\"token punctuation\">:</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span><span class=\"token string\">'inf'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> node <span class=\"token keyword\">in</span> graph<span class=\"token punctuation\">}</span>\n    distances<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    queue <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    heapq<span class=\"token punctuation\">.</span>heappush<span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>distances<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">while</span> queue<span class=\"token punctuation\">:</span>\n        current_distance<span class=\"token punctuation\">,</span> current_node <span class=\"token operator\">=</span> heapq<span class=\"token punctuation\">.</span>heappop<span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">if</span> distances<span class=\"token punctuation\">[</span>current_node<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> current_distance<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">continue</span>\n\n        <span class=\"token keyword\">for</span> adjacent<span class=\"token punctuation\">,</span> weight <span class=\"token keyword\">in</span> graph<span class=\"token punctuation\">[</span>current_node<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            distance <span class=\"token operator\">=</span> current_distance <span class=\"token operator\">+</span> weight\n\n            <span class=\"token keyword\">if</span> distance <span class=\"token operator\">&lt;</span> distances<span class=\"token punctuation\">[</span>adjacent<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                distances<span class=\"token punctuation\">[</span>adjacent<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> distance\n                heapq<span class=\"token punctuation\">.</span>heappush<span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>distance<span class=\"token punctuation\">,</span> adjacent<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> distances</code></pre></div>\n<br>\n<h2 id=\"최단-경로-출력\" style=\"position:relative;\"><a href=\"#%EC%B5%9C%EB%8B%A8-%EA%B2%BD%EB%A1%9C-%EC%B6%9C%EB%A0%A5\" aria-label=\"최단 경로 출력 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>최단 경로 출력</h2>\n<ul>\n<li>탐색할 그래프의 시작 정점과 다른 정점들간의 최단 거리 및 최단 경로 출력하기</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> heapq\n\n<span class=\"token comment\"># 탐색할 그래프와 시작 정점을 인수로 전달받습니다.</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">dijkstra</span><span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 시작 정점에서 각 정점까지의 거리를 저장할 딕셔너리를 생성하고, 무한대(inf)로 초기화합니다.</span>\n    distances <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>vertex<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span><span class=\"token string\">'inf'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> vertex <span class=\"token keyword\">in</span> graph<span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\"># 그래프의 시작 정점의 거리는 0으로 초기화 해줌</span>\n    distances<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">]</span>\n\n    <span class=\"token comment\"># 모든 정점이 저장될 큐를 생성합니다.</span>\n    queue <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token comment\"># 그래프의 시작 정점과 시작 정점의 거리(0)을 최소힙에 넣어줌</span>\n    heapq<span class=\"token punctuation\">.</span>heappush<span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>distances<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">while</span> queue<span class=\"token punctuation\">:</span>\n\n        <span class=\"token comment\"># 큐에서 정점을 하나씩 꺼내 인접한 정점들의 가중치를 모두 확인하여 업데이트합니다.</span>\n        current_distance<span class=\"token punctuation\">,</span> current_vertex <span class=\"token operator\">=</span> heapq<span class=\"token punctuation\">.</span>heappop<span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 더 짧은 경로가 있다면 무시한다.</span>\n        <span class=\"token keyword\">if</span> distances<span class=\"token punctuation\">[</span>current_vertex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> current_distance<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">continue</span>\n\n        <span class=\"token keyword\">for</span> adjacent<span class=\"token punctuation\">,</span> weight <span class=\"token keyword\">in</span> graph<span class=\"token punctuation\">[</span>current_vertex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            distance <span class=\"token operator\">=</span> current_distance <span class=\"token operator\">+</span> weight\n            <span class=\"token comment\"># 만약 시작 정점에서 인접 정점으로 바로 가는 것보다 현재 정점을 통해 가는 것이 더 가까울 경우에는</span>\n            <span class=\"token keyword\">if</span> distance <span class=\"token operator\">&lt;</span> distances<span class=\"token punctuation\">[</span>adjacent<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                <span class=\"token comment\"># 거리를 업데이트합니다.</span>\n                distances<span class=\"token punctuation\">[</span>adjacent<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>distance<span class=\"token punctuation\">,</span> current_vertex<span class=\"token punctuation\">]</span>\n                heapq<span class=\"token punctuation\">.</span>heappush<span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>distance<span class=\"token punctuation\">,</span> adjacent<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    path <span class=\"token operator\">=</span> end\n    path_output <span class=\"token operator\">=</span> end <span class=\"token operator\">+</span> <span class=\"token string\">'->'</span>\n    <span class=\"token keyword\">while</span> distances<span class=\"token punctuation\">[</span>path<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> start<span class=\"token punctuation\">:</span>\n        path_output <span class=\"token operator\">+=</span> distances<span class=\"token punctuation\">[</span>path<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">'->'</span>\n        path <span class=\"token operator\">=</span> distances<span class=\"token punctuation\">[</span>path<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    path_output <span class=\"token operator\">+=</span> start\n    <span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>path_output<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> distances</code></pre></div>\n<br>\n<h2 id=\"시간-복잡도\" style=\"position:relative;\"><a href=\"#%EC%8B%9C%EA%B0%84-%EB%B3%B5%EC%9E%A1%EB%8F%84\" aria-label=\"시간 복잡도 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>시간 복잡도</h2>\n<ul>\n<li>\n<p>위 다익스트라 알고리즘은 크게 다음 두 가지 과정을 거침</p>\n<ul>\n<li>과정1: 각 노드마다 인접한 간선들을 모두 검사하는 과정</li>\n<li>과정2: 우선순위 큐에 노드/거리 정보를 넣고 삭제(pop)하는 과정</li>\n</ul>\n</li>\n<li>\n<p>각 과정별 시간 복잡도</p>\n<ul>\n<li>과정1: 각 노드는 최대 한 번씩 방문하므로 (첫 노드와 해당 노드간의 갈 수 있는 루트가 있는 경우만 해당), 그래프의 모든 간선은 최대 한 번씩 검사</li>\n<li>즉, 각 노드마다 인접한 간선들을 모두 검사하는 과정은 O(E) 시간이 걸림, E 는 간선(edge)의 약자</li>\n<li>과정2: 우선순위 큐에 가장 많은 노드, 거리 정보가 들어가는 경우, 우선순위 큐에 노드/거리 정보를 넣고, 삭제하는 과정이 최악의 시간이 걸림</li>\n<li>우선순위 큐에 가장 많은 노드, 거리 정보가 들어가는 시나리오는 그래프의 모든 간선이 검사될 때마다, 배열의 최단 거리가 갱신되고, 우선순위 큐에 노드/거리가 추가되는 것임</li>\n<li>\n<p>이 때 추가는 각 간선마다 최대 한 번 일어날 수 있으므로, 최대 O(E)의 시간이 걸리고, O(E) 개의 노드/거리 정보에 대해 우선순위 큐를 유지하는 작업은 O(logE)가 걸림</p>\n<ul>\n<li>따라서 해당 과정의 시간 복잡도는 O(ElogE)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"총-시간-복잡도\" style=\"position:relative;\"><a href=\"#%EC%B4%9D-%EC%8B%9C%EA%B0%84-%EB%B3%B5%EC%9E%A1%EB%8F%84\" aria-label=\"총 시간 복잡도 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>총 시간 복잡도</h3>\n<ul>\n<li>과정1 + 과정2 = O(E) + O(ElogE) = O(E+ElogE) = O(ElogE)</li>\n</ul>\n<h3 id=\"참고-힙의-시간-복잡도\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0-%ED%9E%99%EC%9D%98-%EC%8B%9C%EA%B0%84-%EB%B3%B5%EC%9E%A1%EB%8F%84\" aria-label=\"참고 힙의 시간 복잡도 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고: 힙의 시간 복잡도</h3>\n<ul>\n<li>depth (트리의 높이) 를 h라고 표기한다면,</li>\n<li>n개의 노드를 가지는 heap 에 데이터 삽입 또는 삭제시, 최악의 경우 root 노드에서 leaf 노드까지 비교해야 하므로 h=log2n 에 가까우므로, 시간 복잡도는 O(logn)</li>\n</ul>","frontmatter":{"title":"CS 알고리즘 정리","date":"June 03, 2020"}}},"pageContext":{"slug":"/Backend/cs-알고리즘-정리/","previous":{"fields":{"slug":"/Docker/docker-명령어-정리/"},"frontmatter":{"title":"Docker 명령어 정리","category":"Docker","draft":false}},"next":{"fields":{"slug":"/Python/python-unittest,-pytest-연습/"},"frontmatter":{"title":"Python Unittest, Pytest 연습","category":"Python","draft":false}}}},"staticQueryHashes":["2486386679","3128451518"]}